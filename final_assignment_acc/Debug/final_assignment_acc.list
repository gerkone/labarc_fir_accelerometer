
final_assignment_acc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  08006fa8  08006fa8  00016fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d0  080075d0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075d8  080075d8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075d8  080075d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080075e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  200001e4  080077c4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  080077c4  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128e3  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc4  00000000  00000000  00032af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000062bc  00000000  00000000  000366bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0003c978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a58  00000000  00000000  0003d190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a73  00000000  00000000  0003dbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f6ff  00000000  00000000  0006265b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d53a2  00000000  00000000  00071d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001470fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025e8  00000000  00000000  00147150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f8c 	.word	0x08006f8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08006f8c 	.word	0x08006f8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <arm_fir_f32>:
void arm_fir_f32(
const arm_fir_instance_f32 * S,
float32_t * pSrc,
float32_t * pDst,
uint32_t blockSize)
{
 8000f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f44:	ed2d 8b0a 	vpush	{d8-d12}
   float32_t *pState = S->pState;                 /* State pointer */
 8000f48:	6847      	ldr	r7, [r0, #4]
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000f4a:	f8d0 9008 	ldr.w	r9, [r0, #8]
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8000f4e:	f8b0 e000 	ldrh.w	lr, [r0]
 8000f52:	46f2      	mov	sl, lr
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */
   float32_t p0,p1,p2,p3,p4,p5,p6,p7;             /* Temporary product values */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1u)]);
 8000f54:	f10e 4c80 	add.w	ip, lr, #1073741824	; 0x40000000
 8000f58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000f5c:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]  
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]  
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]  
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]  
    */
   blkCnt = blockSize >> 3;
 8000f60:	08de      	lsrs	r6, r3, #3

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.  
   ** a second loop below computes the remaining 1 to 7 samples. */
   while(blkCnt > 0u)
 8000f62:	e171      	b.n	8001248 <arm_fir_f32+0x308>
      /* Loop over the number of taps.  Unroll by a factor of 8.  
       ** Repeat until we've computed numTaps-8 coefficients. */
      while(tapCnt > 0u)
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 8000f64:	edd4 5a00 	vldr	s11, [r4]

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 8000f68:	ed91 7a00 	vldr	s14, [r1]

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         p0 = x0 * c0;
 8000f6c:	ee21 ca25 	vmul.f32	s24, s2, s11

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         p1 = x1 * c0;
 8000f70:	ee64 ba25 	vmul.f32	s23, s8, s11

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         p2 = x2 * c0;
 8000f74:	ee23 baa5 	vmul.f32	s22, s7, s11

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         p3 = x3 * c0;
 8000f78:	ee63 aa25 	vmul.f32	s21, s6, s11

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         p4 = x4 * c0;
 8000f7c:	ee22 aaa5 	vmul.f32	s20, s5, s11

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         p5 = x5 * c0;
 8000f80:	ee22 5a25 	vmul.f32	s10, s4, s11

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         p6 = x6 * c0;
 8000f84:	ee61 7aa5 	vmul.f32	s15, s3, s11

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         p7 = x7 * c0;
 8000f88:	ee65 5a87 	vmul.f32	s11, s11, s14
         
         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 8000f8c:	ed94 6a01 	vldr	s12, [r4, #4]

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 8000f90:	ed91 1a01 	vldr	s2, [r1, #4]
         
         acc0 += p0;
 8000f94:	ee79 9a8c 	vadd.f32	s19, s19, s24
         acc1 += p1;
 8000f98:	ee39 9a2b 	vadd.f32	s18, s18, s23
         acc2 += p2;
 8000f9c:	ee78 8a8b 	vadd.f32	s17, s17, s22
         acc3 += p3;
 8000fa0:	ee38 8a2a 	vadd.f32	s16, s16, s21
         acc4 += p4;
 8000fa4:	ee30 0a0a 	vadd.f32	s0, s0, s20
         acc5 += p5;
 8000fa8:	ee70 0a85 	vadd.f32	s1, s1, s10
         acc6 += p6;
 8000fac:	ee74 7aa7 	vadd.f32	s15, s9, s15
         acc7 += p7;
 8000fb0:	ee36 5aa5 	vadd.f32	s10, s13, s11


         /* Perform the multiply-accumulate */
         p0 = x1 * c0;
 8000fb4:	ee24 ca06 	vmul.f32	s24, s8, s12
         p1 = x2 * c0;   
 8000fb8:	ee63 ba86 	vmul.f32	s23, s7, s12
         p2 = x3 * c0;   
 8000fbc:	ee23 ba06 	vmul.f32	s22, s6, s12
         p3 = x4 * c0;   
 8000fc0:	ee62 aa86 	vmul.f32	s21, s5, s12
         p4 = x5 * c0;   
 8000fc4:	ee22 aa06 	vmul.f32	s20, s4, s12
         p5 = x6 * c0;   
 8000fc8:	ee61 5a86 	vmul.f32	s11, s3, s12
         p6 = x7 * c0;   
 8000fcc:	ee67 6a06 	vmul.f32	s13, s14, s12
         p7 = x0 * c0;   
 8000fd0:	ee26 6a01 	vmul.f32	s12, s12, s2
         
         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 8000fd4:	edd4 4a02 	vldr	s9, [r4, #8]

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 8000fd8:	ed91 4a02 	vldr	s8, [r1, #8]
         
         acc0 += p0;
 8000fdc:	ee79 9a8c 	vadd.f32	s19, s19, s24
         acc1 += p1;
 8000fe0:	ee39 9a2b 	vadd.f32	s18, s18, s23
         acc2 += p2;
 8000fe4:	ee78 8a8b 	vadd.f32	s17, s17, s22
         acc3 += p3;
 8000fe8:	ee38 8a2a 	vadd.f32	s16, s16, s21
         acc4 += p4;
 8000fec:	ee30 0a0a 	vadd.f32	s0, s0, s20
         acc5 += p5;
 8000ff0:	ee70 0aa5 	vadd.f32	s1, s1, s11
         acc6 += p6;
 8000ff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
         acc7 += p7;
 8000ff8:	ee35 6a06 	vadd.f32	s12, s10, s12

         /* Perform the multiply-accumulates */      
         p0 = x2 * c0;
 8000ffc:	ee23 caa4 	vmul.f32	s24, s7, s9
         p1 = x3 * c0;   
 8001000:	ee63 ba24 	vmul.f32	s23, s6, s9
         p2 = x4 * c0;   
 8001004:	ee22 baa4 	vmul.f32	s22, s5, s9
         p3 = x5 * c0;   
 8001008:	ee62 aa24 	vmul.f32	s21, s4, s9
         p4 = x6 * c0;   
 800100c:	ee21 aaa4 	vmul.f32	s20, s3, s9
         p5 = x7 * c0;   
 8001010:	ee67 5a24 	vmul.f32	s11, s14, s9
         p6 = x0 * c0;   
 8001014:	ee61 6a24 	vmul.f32	s13, s2, s9
         p7 = x1 * c0;   
 8001018:	ee64 4a84 	vmul.f32	s9, s9, s8

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 800101c:	ed94 5a03 	vldr	s10, [r4, #12]

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 8001020:	edd1 3a03 	vldr	s7, [r1, #12]
         
         acc0 += p0;
 8001024:	ee79 9a8c 	vadd.f32	s19, s19, s24
         acc1 += p1;
 8001028:	ee39 9a2b 	vadd.f32	s18, s18, s23
         acc2 += p2;
 800102c:	ee78 8a8b 	vadd.f32	s17, s17, s22
         acc3 += p3;
 8001030:	ee38 8a2a 	vadd.f32	s16, s16, s21
         acc4 += p4;
 8001034:	ee30 0a0a 	vadd.f32	s0, s0, s20
         acc5 += p5;
 8001038:	ee70 0aa5 	vadd.f32	s1, s1, s11
         acc6 += p6;
 800103c:	ee77 7aa6 	vadd.f32	s15, s15, s13
         acc7 += p7;
 8001040:	ee76 4a24 	vadd.f32	s9, s12, s9

         /* Perform the multiply-accumulates */      
         p0 = x3 * c0;
 8001044:	ee23 ca05 	vmul.f32	s24, s6, s10
         p1 = x4 * c0;   
 8001048:	ee62 ba85 	vmul.f32	s23, s5, s10
         p2 = x5 * c0;   
 800104c:	ee22 ba05 	vmul.f32	s22, s4, s10
         p3 = x6 * c0;   
 8001050:	ee61 aa85 	vmul.f32	s21, s3, s10
         p4 = x7 * c0;   
 8001054:	ee27 aa05 	vmul.f32	s20, s14, s10
         p5 = x0 * c0;   
 8001058:	ee21 6a05 	vmul.f32	s12, s2, s10
         p6 = x1 * c0;   
 800105c:	ee64 6a05 	vmul.f32	s13, s8, s10
         p7 = x2 * c0;   
 8001060:	ee25 5a23 	vmul.f32	s10, s10, s7

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8001064:	edd4 5a04 	vldr	s11, [r4, #16]

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 8001068:	ed91 3a04 	vldr	s6, [r1, #16]
         
         acc0 += p0;
 800106c:	ee79 9a8c 	vadd.f32	s19, s19, s24
         acc1 += p1;
 8001070:	ee39 9a2b 	vadd.f32	s18, s18, s23
         acc2 += p2;
 8001074:	ee78 8a8b 	vadd.f32	s17, s17, s22
         acc3 += p3;
 8001078:	ee38 8a2a 	vadd.f32	s16, s16, s21
         acc4 += p4;
 800107c:	ee30 0a0a 	vadd.f32	s0, s0, s20
         acc5 += p5;
 8001080:	ee70 0a86 	vadd.f32	s1, s1, s12
         acc6 += p6;
 8001084:	ee77 7aa6 	vadd.f32	s15, s15, s13
         acc7 += p7;
 8001088:	ee34 5a85 	vadd.f32	s10, s9, s10

         /* Perform the multiply-accumulates */      
         p0 = x4 * c0;
 800108c:	ee22 caa5 	vmul.f32	s24, s5, s11
         p1 = x5 * c0;   
 8001090:	ee62 ba25 	vmul.f32	s23, s4, s11
         p2 = x6 * c0;   
 8001094:	ee21 baa5 	vmul.f32	s22, s3, s11
         p3 = x7 * c0;   
 8001098:	ee67 aa25 	vmul.f32	s21, s14, s11
         p4 = x0 * c0;   
 800109c:	ee21 aa25 	vmul.f32	s20, s2, s11
         p5 = x1 * c0;   
 80010a0:	ee64 6a25 	vmul.f32	s13, s8, s11
         p6 = x2 * c0;   
 80010a4:	ee63 4aa5 	vmul.f32	s9, s7, s11
         p7 = x3 * c0;   
 80010a8:	ee65 5a83 	vmul.f32	s11, s11, s6

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 80010ac:	ed94 6a05 	vldr	s12, [r4, #20]

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 80010b0:	edd1 2a05 	vldr	s5, [r1, #20]
         
         acc0 += p0;
 80010b4:	ee79 9a8c 	vadd.f32	s19, s19, s24
         acc1 += p1;
 80010b8:	ee39 9a2b 	vadd.f32	s18, s18, s23
         acc2 += p2;
 80010bc:	ee78 8a8b 	vadd.f32	s17, s17, s22
         acc3 += p3;
 80010c0:	ee38 8a2a 	vadd.f32	s16, s16, s21
         acc4 += p4;
 80010c4:	ee30 0a0a 	vadd.f32	s0, s0, s20
         acc5 += p5;
 80010c8:	ee70 0aa6 	vadd.f32	s1, s1, s13
         acc6 += p6;
 80010cc:	ee77 4aa4 	vadd.f32	s9, s15, s9
         acc7 += p7;
 80010d0:	ee75 5a25 	vadd.f32	s11, s10, s11

         /* Perform the multiply-accumulates */      
         p0 = x5 * c0;
 80010d4:	ee22 ca06 	vmul.f32	s24, s4, s12
         p1 = x6 * c0;   
 80010d8:	ee61 ba86 	vmul.f32	s23, s3, s12
         p2 = x7 * c0;   
 80010dc:	ee27 ba06 	vmul.f32	s22, s14, s12
         p3 = x0 * c0;   
 80010e0:	ee61 aa06 	vmul.f32	s21, s2, s12
         p4 = x1 * c0;   
 80010e4:	ee24 aa06 	vmul.f32	s20, s8, s12
         p5 = x2 * c0;   
 80010e8:	ee23 5a86 	vmul.f32	s10, s7, s12
         p6 = x3 * c0;   
 80010ec:	ee63 7a06 	vmul.f32	s15, s6, s12
         p7 = x4 * c0;   
 80010f0:	ee26 6a22 	vmul.f32	s12, s12, s5

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 80010f4:	edd4 6a06 	vldr	s13, [r4, #24]

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 80010f8:	ed91 2a06 	vldr	s4, [r1, #24]
         
         acc0 += p0;
 80010fc:	ee79 9a8c 	vadd.f32	s19, s19, s24
         acc1 += p1;
 8001100:	ee39 9a2b 	vadd.f32	s18, s18, s23
         acc2 += p2;
 8001104:	ee78 8a8b 	vadd.f32	s17, s17, s22
         acc3 += p3;
 8001108:	ee38 8a2a 	vadd.f32	s16, s16, s21
         acc4 += p4;
 800110c:	ee30 0a0a 	vadd.f32	s0, s0, s20
         acc5 += p5;
 8001110:	ee30 5a85 	vadd.f32	s10, s1, s10
         acc6 += p6;
 8001114:	ee74 4aa7 	vadd.f32	s9, s9, s15
         acc7 += p7;
 8001118:	ee75 5a86 	vadd.f32	s11, s11, s12

         /* Perform the multiply-accumulates */      
         p0 = x6 * c0;
 800111c:	ee21 caa6 	vmul.f32	s24, s3, s13
         p1 = x7 * c0;   
 8001120:	ee67 ba26 	vmul.f32	s23, s14, s13
         p2 = x0 * c0;   
 8001124:	ee21 ba26 	vmul.f32	s22, s2, s13
         p3 = x1 * c0;   
 8001128:	ee64 aa26 	vmul.f32	s21, s8, s13
         p4 = x2 * c0;   
 800112c:	ee23 aaa6 	vmul.f32	s20, s7, s13
         p5 = x3 * c0;   
 8001130:	ee23 6a26 	vmul.f32	s12, s6, s13
         p6 = x4 * c0;   
 8001134:	ee62 0aa6 	vmul.f32	s1, s5, s13
         p7 = x5 * c0;   
 8001138:	ee66 6a82 	vmul.f32	s13, s13, s4

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 800113c:	edd4 7a07 	vldr	s15, [r4, #28]

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8001140:	edd1 1a07 	vldr	s3, [r1, #28]
         
         acc0 += p0;
 8001144:	ee79 9a8c 	vadd.f32	s19, s19, s24
         acc1 += p1;
 8001148:	ee39 9a2b 	vadd.f32	s18, s18, s23
         acc2 += p2;
 800114c:	ee78 8a8b 	vadd.f32	s17, s17, s22
         acc3 += p3;
 8001150:	ee38 8a2a 	vadd.f32	s16, s16, s21
         acc4 += p4;
 8001154:	ee30 0a0a 	vadd.f32	s0, s0, s20
         acc5 += p5;
 8001158:	ee35 6a06 	vadd.f32	s12, s10, s12
         acc6 += p6;
 800115c:	ee74 4aa0 	vadd.f32	s9, s9, s1
         acc7 += p7;
 8001160:	ee75 6aa6 	vadd.f32	s13, s11, s13

         /* Perform the multiply-accumulates */      
         p0 = x7 * c0;
 8001164:	ee27 7a27 	vmul.f32	s14, s14, s15
         p1 = x0 * c0;   
 8001168:	ee21 ba27 	vmul.f32	s22, s2, s15
         p2 = x1 * c0;   
 800116c:	ee64 aa27 	vmul.f32	s21, s8, s15
         p3 = x2 * c0;   
 8001170:	ee23 aaa7 	vmul.f32	s20, s7, s15
         p4 = x3 * c0;   
 8001174:	ee23 5a27 	vmul.f32	s10, s6, s15
         p5 = x4 * c0;   
 8001178:	ee62 0aa7 	vmul.f32	s1, s5, s15
         p6 = x5 * c0;   
 800117c:	ee62 5a27 	vmul.f32	s11, s4, s15
         p7 = x6 * c0;   
 8001180:	ee67 7aa1 	vmul.f32	s15, s15, s3

         tapCnt--;
 8001184:	3d01      	subs	r5, #1
         
         acc0 += p0;
 8001186:	ee79 9a87 	vadd.f32	s19, s19, s14
         acc1 += p1;
 800118a:	ee39 9a0b 	vadd.f32	s18, s18, s22
         acc2 += p2;
 800118e:	ee78 8aaa 	vadd.f32	s17, s17, s21
         acc3 += p3;
 8001192:	ee38 8a0a 	vadd.f32	s16, s16, s20
         acc4 += p4;
 8001196:	ee30 0a05 	vadd.f32	s0, s0, s10
         acc5 += p5;
 800119a:	ee76 0a20 	vadd.f32	s1, s12, s1
         acc6 += p6;
 800119e:	ee74 4aa5 	vadd.f32	s9, s9, s11
         acc7 += p7;
 80011a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
         c0 = *(pb++);
 80011a6:	3420      	adds	r4, #32
         x6 = *(px++);
 80011a8:	3120      	adds	r1, #32
      while(tapCnt > 0u)
 80011aa:	2d00      	cmp	r5, #0
 80011ac:	f47f aeda 	bne.w	8000f64 <arm_fir_f32+0x24>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8u;
 80011b0:	f00e 0507 	and.w	r5, lr, #7

      while(tapCnt > 0u)
 80011b4:	b39d      	cbz	r5, 800121e <arm_fir_f32+0x2de>
      {
         /* Read coefficients */
         c0 = *(pb++);
 80011b6:	ecf4 7a01 	vldmia	r4!, {s15}

         /* Fetch 1 state variable */
         x7 = *(px++);
 80011ba:	ecb1 7a01 	vldmia	r1!, {s14}

         /* Perform the multiply-accumulates */      
         p0 = x0 * c0;
 80011be:	ee21 1a27 	vmul.f32	s2, s2, s15
         p1 = x1 * c0;   
 80011c2:	ee24 ba27 	vmul.f32	s22, s8, s15
         p2 = x2 * c0;   
 80011c6:	ee63 aaa7 	vmul.f32	s21, s7, s15
         p3 = x3 * c0;   
 80011ca:	ee23 aa27 	vmul.f32	s20, s6, s15
         p4 = x4 * c0;   
 80011ce:	ee22 5aa7 	vmul.f32	s10, s5, s15
         p5 = x5 * c0;   
 80011d2:	ee62 5a27 	vmul.f32	s11, s4, s15
         p6 = x6 * c0;   
 80011d6:	ee21 6aa7 	vmul.f32	s12, s3, s15
         p7 = x7 * c0;   
 80011da:	ee67 7a87 	vmul.f32	s15, s15, s14
         x3 = x4;
         x4 = x5;
         x5 = x6;
         x6 = x7;
         
         acc0 += p0;
 80011de:	ee79 9a81 	vadd.f32	s19, s19, s2
         acc1 += p1;
 80011e2:	ee39 9a0b 	vadd.f32	s18, s18, s22
         acc2 += p2;
 80011e6:	ee78 8aaa 	vadd.f32	s17, s17, s21
         acc3 += p3;
 80011ea:	ee38 8a0a 	vadd.f32	s16, s16, s20
         acc4 += p4;
 80011ee:	ee30 0a05 	vadd.f32	s0, s0, s10
         acc5 += p5;
 80011f2:	ee70 0aa5 	vadd.f32	s1, s1, s11
         acc6 += p6;
 80011f6:	ee74 4a86 	vadd.f32	s9, s9, s12
         acc7 += p7;
 80011fa:	ee76 6aa7 	vadd.f32	s13, s13, s15

         /* Decrement the loop counter */
         tapCnt--;
 80011fe:	3d01      	subs	r5, #1
         x0 = x1;
 8001200:	eeb0 1a44 	vmov.f32	s2, s8
         x1 = x2;
 8001204:	eeb0 4a63 	vmov.f32	s8, s7
         x2 = x3;
 8001208:	eef0 3a43 	vmov.f32	s7, s6
         x3 = x4;
 800120c:	eeb0 3a62 	vmov.f32	s6, s5
         x4 = x5;
 8001210:	eef0 2a42 	vmov.f32	s5, s4
         x5 = x6;
 8001214:	eeb0 2a61 	vmov.f32	s4, s3
         x6 = x7;
 8001218:	eef0 1a47 	vmov.f32	s3, s14
 800121c:	e7ca      	b.n	80011b4 <arm_fir_f32+0x274>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 800121e:	3720      	adds	r7, #32

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 8001220:	edc2 9a00 	vstr	s19, [r2]
      *pDst++ = acc1;
 8001224:	ed82 9a01 	vstr	s18, [r2, #4]
      *pDst++ = acc2;
 8001228:	edc2 8a02 	vstr	s17, [r2, #8]
      *pDst++ = acc3;
 800122c:	ed82 8a03 	vstr	s16, [r2, #12]
      *pDst++ = acc4;
 8001230:	ed82 0a04 	vstr	s0, [r2, #16]
      *pDst++ = acc5;
 8001234:	edc2 0a05 	vstr	s1, [r2, #20]
      *pDst++ = acc6;
 8001238:	edc2 4a06 	vstr	s9, [r2, #24]
      *pDst++ = acc7;
 800123c:	edc2 6a07 	vstr	s13, [r2, #28]

      blkCnt--;
 8001240:	3e01      	subs	r6, #1
      *pStateCurnt++ = *pSrc++;
 8001242:	46c4      	mov	ip, r8
      *pDst++ = acc7;
 8001244:	3220      	adds	r2, #32
      *pStateCurnt++ = *pSrc++;
 8001246:	4659      	mov	r1, fp
   while(blkCnt > 0u)
 8001248:	2e00      	cmp	r6, #0
 800124a:	d03f      	beq.n	80012cc <arm_fir_f32+0x38c>
      *pStateCurnt++ = *pSrc++;
 800124c:	680c      	ldr	r4, [r1, #0]
 800124e:	f8cc 4000 	str.w	r4, [ip]
      *pStateCurnt++ = *pSrc++;
 8001252:	684c      	ldr	r4, [r1, #4]
 8001254:	f8cc 4004 	str.w	r4, [ip, #4]
      *pStateCurnt++ = *pSrc++;
 8001258:	688c      	ldr	r4, [r1, #8]
 800125a:	f8cc 4008 	str.w	r4, [ip, #8]
      *pStateCurnt++ = *pSrc++;
 800125e:	68cc      	ldr	r4, [r1, #12]
 8001260:	f8cc 400c 	str.w	r4, [ip, #12]
      *pStateCurnt++ = *pSrc++;
 8001264:	690c      	ldr	r4, [r1, #16]
 8001266:	f8cc 4010 	str.w	r4, [ip, #16]
      *pStateCurnt++ = *pSrc++;
 800126a:	694c      	ldr	r4, [r1, #20]
 800126c:	f8cc 4014 	str.w	r4, [ip, #20]
      *pStateCurnt++ = *pSrc++;
 8001270:	698c      	ldr	r4, [r1, #24]
 8001272:	f8cc 4018 	str.w	r4, [ip, #24]
      *pStateCurnt++ = *pSrc++;
 8001276:	f101 0b20 	add.w	fp, r1, #32
 800127a:	f10c 0820 	add.w	r8, ip, #32
 800127e:	69c9      	ldr	r1, [r1, #28]
 8001280:	f8cc 101c 	str.w	r1, [ip, #28]
      x0 = *px++;
 8001284:	ed97 1a00 	vldr	s2, [r7]
      x1 = *px++;
 8001288:	ed97 4a01 	vldr	s8, [r7, #4]
      x2 = *px++;
 800128c:	edd7 3a02 	vldr	s7, [r7, #8]
      x3 = *px++;
 8001290:	ed97 3a03 	vldr	s6, [r7, #12]
      x4 = *px++;
 8001294:	edd7 2a04 	vldr	s5, [r7, #16]
      x5 = *px++;
 8001298:	ed97 2a05 	vldr	s4, [r7, #20]
      x6 = *px++;
 800129c:	f107 011c 	add.w	r1, r7, #28
 80012a0:	edd7 1a06 	vldr	s3, [r7, #24]
      tapCnt = numTaps >> 3u;
 80012a4:	ea4f 05da 	mov.w	r5, sl, lsr #3
      pb = (pCoeffs);		
 80012a8:	464c      	mov	r4, r9
      acc7 = 0.0f;		
 80012aa:	eddf 6a28 	vldr	s13, [pc, #160]	; 800134c <arm_fir_f32+0x40c>
      acc6 = 0.0f;
 80012ae:	eef0 4a66 	vmov.f32	s9, s13
      acc5 = 0.0f;
 80012b2:	eef0 0a66 	vmov.f32	s1, s13
      acc4 = 0.0f;
 80012b6:	eeb0 0a66 	vmov.f32	s0, s13
      acc3 = 0.0f;
 80012ba:	eeb0 8a66 	vmov.f32	s16, s13
      acc2 = 0.0f;
 80012be:	eef0 8a66 	vmov.f32	s17, s13
      acc1 = 0.0f;
 80012c2:	eeb0 9a66 	vmov.f32	s18, s13
      acc0 = 0.0f;
 80012c6:	eef0 9a66 	vmov.f32	s19, s13
      while(tapCnt > 0u)
 80012ca:	e76e      	b.n	80011aa <arm_fir_f32+0x26a>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.  
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8u;
 80012cc:	f003 0807 	and.w	r8, r3, #7

   while(blkCnt > 0u)
 80012d0:	e019      	b.n	8001306 <arm_fir_f32+0x3c6>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 80012d2:	f851 3b04 	ldr.w	r3, [r1], #4
 80012d6:	f84c 3b04 	str.w	r3, [ip], #4
      px = pState;

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);

      i = numTaps;
 80012da:	4656      	mov	r6, sl
      pb = (pCoeffs);
 80012dc:	464d      	mov	r5, r9
      px = pState;
 80012de:	463c      	mov	r4, r7
      acc0 = 0.0f;
 80012e0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800134c <arm_fir_f32+0x40c>

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 80012e4:	edd4 7a00 	vldr	s15, [r4]
 80012e8:	3404      	adds	r4, #4
 80012ea:	edd5 6a00 	vldr	s13, [r5]
 80012ee:	3504      	adds	r5, #4
 80012f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012f4:	ee37 7a27 	vadd.f32	s14, s14, s15
         i--;

      } while(i > 0u);
 80012f8:	3e01      	subs	r6, #1
 80012fa:	d1f3      	bne.n	80012e4 <arm_fir_f32+0x3a4>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 80012fc:	eca2 7a01 	vstmia	r2!, {s14}

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 8001300:	3704      	adds	r7, #4

      blkCnt--;
 8001302:	f108 38ff 	add.w	r8, r8, #4294967295
   while(blkCnt > 0u)
 8001306:	f1b8 0f00 	cmp.w	r8, #0
 800130a:	d1e2      	bne.n	80012d2 <arm_fir_f32+0x392>
   /* Processing is complete.  
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.  
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 800130c:	6843      	ldr	r3, [r0, #4]

   tapCnt = (numTaps - 1u) >> 2u;
 800130e:	f10e 32ff 	add.w	r2, lr, #4294967295
 8001312:	0891      	lsrs	r1, r2, #2

   /* copy data */
   while(tapCnt > 0u)
 8001314:	e00a      	b.n	800132c <arm_fir_f32+0x3ec>
   {
      *pStateCurnt++ = *pState++;
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	6018      	str	r0, [r3, #0]
      *pStateCurnt++ = *pState++;
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	6058      	str	r0, [r3, #4]
      *pStateCurnt++ = *pState++;
 800131e:	68b8      	ldr	r0, [r7, #8]
 8001320:	6098      	str	r0, [r3, #8]
      *pStateCurnt++ = *pState++;
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	60d8      	str	r0, [r3, #12]

      /* Decrement the loop counter */
      tapCnt--;
 8001326:	3901      	subs	r1, #1
      *pStateCurnt++ = *pState++;
 8001328:	3310      	adds	r3, #16
 800132a:	3710      	adds	r7, #16
   while(tapCnt > 0u)
 800132c:	2900      	cmp	r1, #0
 800132e:	d1f2      	bne.n	8001316 <arm_fir_f32+0x3d6>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1u) % 0x4u;
 8001330:	f002 0203 	and.w	r2, r2, #3

   /* Copy the remaining q31_t data */
   while(tapCnt > 0u)
 8001334:	e004      	b.n	8001340 <arm_fir_f32+0x400>
   {
      *pStateCurnt++ = *pState++;
 8001336:	f857 1b04 	ldr.w	r1, [r7], #4
 800133a:	f843 1b04 	str.w	r1, [r3], #4

      /* Decrement the loop counter */
      tapCnt--;
 800133e:	3a01      	subs	r2, #1
   while(tapCnt > 0u)
 8001340:	2a00      	cmp	r2, #0
 8001342:	d1f8      	bne.n	8001336 <arm_fir_f32+0x3f6>
   }
}
 8001344:	ecbd 8b0a 	vpop	{d8-d12}
 8001348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800134c:	00000000 	.word	0x00000000

08001350 <arm_fir_init_f32>:
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize)
{
 8001350:	b538      	push	{r3, r4, r5, lr}
 8001352:	4604      	mov	r4, r0
 8001354:	461d      	mov	r5, r3
  /* Assign filter taps */
  S->numTaps = numTaps;
 8001356:	8001      	strh	r1, [r0, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8001358:	6082      	str	r2, [r0, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1u)) * sizeof(float32_t));
 800135a:	9a04      	ldr	r2, [sp, #16]
 800135c:	4411      	add	r1, r2
 800135e:	1e4a      	subs	r2, r1, #1
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f001 fe63 	bl	8003030 <memset>

  /* Assign state pointer */
  S->pState = pState;
 800136a:	6065      	str	r5, [r4, #4]

}
 800136c:	bd38      	pop	{r3, r4, r5, pc}

0800136e <arm_float_to_q15>:

void arm_float_to_q15(
  float32_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 800136e:	b410      	push	{r4}
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8001370:	0894      	lsrs	r4, r2, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8001372:	b33c      	cbz	r4, 80013c4 <arm_float_to_q15+0x56>

#else

    /* C = A * 32768 */
    /* convert from float to q15 and then store the results in the destination buffer */
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 8001374:	edd0 7a00 	vldr	s15, [r0]
 8001378:	eefe 7ae8 	vcvt.s32.f32	s15, s15, #15
 800137c:	ee17 3a90 	vmov	r3, s15
 8001380:	f303 030f 	ssat	r3, #16, r3
 8001384:	800b      	strh	r3, [r1, #0]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 8001386:	edd0 7a01 	vldr	s15, [r0, #4]
 800138a:	eefe 7ae8 	vcvt.s32.f32	s15, s15, #15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	f303 030f 	ssat	r3, #16, r3
 8001396:	804b      	strh	r3, [r1, #2]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 8001398:	edd0 7a02 	vldr	s15, [r0, #8]
 800139c:	eefe 7ae8 	vcvt.s32.f32	s15, s15, #15
 80013a0:	ee17 3a90 	vmov	r3, s15
 80013a4:	f303 030f 	ssat	r3, #16, r3
 80013a8:	808b      	strh	r3, [r1, #4]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 80013aa:	edd0 7a03 	vldr	s15, [r0, #12]
 80013ae:	eefe 7ae8 	vcvt.s32.f32	s15, s15, #15
 80013b2:	ee17 3a90 	vmov	r3, s15
 80013b6:	f303 030f 	ssat	r3, #16, r3
 80013ba:	80cb      	strh	r3, [r1, #6]

#endif /*      #ifdef ARM_MATH_ROUNDING        */

    /* Decrement the loop counter */
    blkCnt--;
 80013bc:	3c01      	subs	r4, #1
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 80013be:	3010      	adds	r0, #16
 80013c0:	3108      	adds	r1, #8
 80013c2:	e7d6      	b.n	8001372 <arm_float_to_q15+0x4>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 80013c4:	f002 0203 	and.w	r2, r2, #3

  while(blkCnt > 0u)
 80013c8:	e00a      	b.n	80013e0 <arm_float_to_q15+0x72>

#else

    /* C = A * 32768 */
    /* convert from float to q15 and then store the results in the destination buffer */
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 80013ca:	ecf0 7a01 	vldmia	r0!, {s15}
 80013ce:	eefe 7ae8 	vcvt.s32.f32	s15, s15, #15
 80013d2:	ee17 3a90 	vmov	r3, s15
 80013d6:	f303 030f 	ssat	r3, #16, r3
 80013da:	f821 3b02 	strh.w	r3, [r1], #2

#endif /*      #ifdef ARM_MATH_ROUNDING        */

    /* Decrement the loop counter */
    blkCnt--;
 80013de:	3a01      	subs	r2, #1
  while(blkCnt > 0u)
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	d1f2      	bne.n	80013ca <arm_float_to_q15+0x5c>
    blkCnt--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80013e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <init_fir_3_axes>:
/**
 * @brief init 3 FIRs, one each axis of the accelerometer
 * @return 	none.
 *
 */
void init_fir_3_axes() {
 80013ec:	b510      	push	{r4, lr}
 80013ee:	b09c      	sub	sp, #112	; 0x70
	/* FIR coefficients, calculated using fir1(25 - 1, 10/50)*/
	const float32_t firCoeff[NUM_TAPS] = { +0.0020104028f, +0.0016210204f,
 80013f0:	2264      	movs	r2, #100	; 0x64
 80013f2:	490e      	ldr	r1, [pc, #56]	; (800142c <init_fir_3_axes+0x40>)
 80013f4:	a803      	add	r0, sp, #12
 80013f6:	f001 fe0d 	bl	8003014 <memcpy>
	 * firCoeffs32: pointer to filter coefficient array
	 * firStateF32: pointer to state buffer
	 * block_size: number of samples to be processed each call
	*/
	// initialize 3 fir instances, one each axis
	arm_fir_init_f32(&S_x, NUM_TAPS, (float32_t*) &firCoeff[0], &firStateF32_x[0], BLOCK_SIZE);
 80013fa:	2419      	movs	r4, #25
 80013fc:	9400      	str	r4, [sp, #0]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <init_fir_3_axes+0x44>)
 8001400:	aa03      	add	r2, sp, #12
 8001402:	4621      	mov	r1, r4
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <init_fir_3_axes+0x48>)
 8001406:	f7ff ffa3 	bl	8001350 <arm_fir_init_f32>
	arm_fir_init_f32(&S_y, NUM_TAPS, (float32_t*) &firCoeff[0], &firStateF32_y[0], BLOCK_SIZE);
 800140a:	9400      	str	r4, [sp, #0]
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <init_fir_3_axes+0x4c>)
 800140e:	aa03      	add	r2, sp, #12
 8001410:	4621      	mov	r1, r4
 8001412:	480a      	ldr	r0, [pc, #40]	; (800143c <init_fir_3_axes+0x50>)
 8001414:	f7ff ff9c 	bl	8001350 <arm_fir_init_f32>
	arm_fir_init_f32(&S_z, NUM_TAPS, (float32_t*) &firCoeff[0], &firStateF32_z[0], BLOCK_SIZE);
 8001418:	9400      	str	r4, [sp, #0]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <init_fir_3_axes+0x54>)
 800141c:	aa03      	add	r2, sp, #12
 800141e:	4621      	mov	r1, r4
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <init_fir_3_axes+0x58>)
 8001422:	f7ff ff95 	bl	8001350 <arm_fir_init_f32>
	return;
}
 8001426:	b01c      	add	sp, #112	; 0x70
 8001428:	bd10      	pop	{r4, pc}
 800142a:	bf00      	nop
 800142c:	08006fa8 	.word	0x08006fa8
 8001430:	2000027c 	.word	0x2000027c
 8001434:	20000480 	.word	0x20000480
 8001438:	200003bc 	.word	0x200003bc
 800143c:	200003b0 	.word	0x200003b0
 8001440:	2000048c 	.word	0x2000048c
 8001444:	200003a4 	.word	0x200003a4

08001448 <lpf_fir>:
 * @param[input_samples]       *input buffer. Array of size block_size
 * @param[output_samples]      *output buffer. Array of size block_size
 * @param[S]      			   	current fir instance
 * @return 						none.
 */
void lpf_fir(float32_t *input_samples, float32_t *output_samples, arm_fir_instance_f32 S) {
 8001448:	b082      	sub	sp, #8
 800144a:	b508      	push	{r3, lr}
 800144c:	f10d 0c08 	add.w	ip, sp, #8
 8001450:	e88c 000c 	stmia.w	ip, {r2, r3}
	// apply fir
	arm_fir_f32(&S, input_samples, output_samples, BLOCK_SIZE);
 8001454:	2319      	movs	r3, #25
 8001456:	460a      	mov	r2, r1
 8001458:	4601      	mov	r1, r0
 800145a:	4660      	mov	r0, ip
 800145c:	f7ff fd70 	bl	8000f40 <arm_fir_f32>
	return;
}
 8001460:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001464:	b002      	add	sp, #8
 8001466:	4770      	bx	lr

08001468 <splice_column>:
 * @param[out] 		output array - float values
 * @param[col] 		column to keep
 * @return 			none
 */
void splice_column(int16_t in[BLOCK_SIZE][3], float32_t *out, unsigned int col) {
	for (int i = 0; i < BLOCK_SIZE; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	2b18      	cmp	r3, #24
 800146c:	dc14      	bgt.n	8001498 <splice_column+0x30>
void splice_column(int16_t in[BLOCK_SIZE][3], float32_t *out, unsigned int col) {
 800146e:	b410      	push	{r4}
		out[i] = (float32_t) in[i][col];
 8001470:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8001474:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001478:	f934 4012 	ldrsh.w	r4, [r4, r2, lsl #1]
 800147c:	ee07 4a90 	vmov	s15, r4
 8001480:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8001484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001488:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 0; i < BLOCK_SIZE; i++) {
 800148c:	3301      	adds	r3, #1
 800148e:	2b18      	cmp	r3, #24
 8001490:	ddee      	ble.n	8001470 <splice_column+0x8>
	}
	return;
}
 8001492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	4770      	bx	lr
	...

0800149c <fir_3_axes>:
void fir_3_axes(int16_t acc_data[BLOCK_SIZE][3], float32_t *output_samples_x, float32_t *output_samples_y, float32_t *output_samples_z) {
 800149c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	4604      	mov	r4, r0
 80014a4:	460f      	mov	r7, r1
 80014a6:	4616      	mov	r6, r2
 80014a8:	461d      	mov	r5, r3
	splice_column(acc_data, fir_in_x, 0);
 80014aa:	f8df a068 	ldr.w	sl, [pc, #104]	; 8001514 <fir_3_axes+0x78>
 80014ae:	2200      	movs	r2, #0
 80014b0:	4651      	mov	r1, sl
 80014b2:	f7ff ffd9 	bl	8001468 <splice_column>
	splice_column(acc_data, fir_in_y, 1);
 80014b6:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8001518 <fir_3_axes+0x7c>
 80014ba:	2201      	movs	r2, #1
 80014bc:	4649      	mov	r1, r9
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff ffd2 	bl	8001468 <splice_column>
	splice_column(acc_data, fir_in_z, 2);
 80014c4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800151c <fir_3_axes+0x80>
 80014c8:	2202      	movs	r2, #2
 80014ca:	4641      	mov	r1, r8
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff ffcb 	bl	8001468 <splice_column>
	lpf_fir(fir_in_x, output_samples_x, S_x);
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <fir_3_axes+0x6c>)
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	9200      	str	r2, [sp, #0]
 80014d8:	cb0c      	ldmia	r3, {r2, r3}
 80014da:	4639      	mov	r1, r7
 80014dc:	4650      	mov	r0, sl
 80014de:	f7ff ffb3 	bl	8001448 <lpf_fir>
	lpf_fir(fir_in_y, output_samples_y, S_y);
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <fir_3_axes+0x70>)
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	cb0c      	ldmia	r3, {r2, r3}
 80014ea:	4631      	mov	r1, r6
 80014ec:	4648      	mov	r0, r9
 80014ee:	f7ff ffab 	bl	8001448 <lpf_fir>
	lpf_fir(fir_in_z, output_samples_z, S_z);
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <fir_3_axes+0x74>)
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	cb0c      	ldmia	r3, {r2, r3}
 80014fa:	4629      	mov	r1, r5
 80014fc:	4640      	mov	r0, r8
 80014fe:	f7ff ffa3 	bl	8001448 <lpf_fir>
}
 8001502:	b002      	add	sp, #8
 8001504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001508:	20000480 	.word	0x20000480
 800150c:	200003b0 	.word	0x200003b0
 8001510:	200003a4 	.word	0x200003a4
 8001514:	20000218 	.word	0x20000218
 8001518:	20000550 	.word	0x20000550
 800151c:	20000340 	.word	0x20000340

08001520 <cal_roll>:
 * @param[in]       a_y acceleration along y axis
 * @param[in]       a_z acceleration along z axis
 * @return 			roll value - rotation along x axis.
 *
 */
float cal_roll(float a_y, float a_z) {
 8001520:	b510      	push	{r4, lr}
 8001522:	ed2d 8b02 	vpush	{d8}
 8001526:	ee10 4a10 	vmov	r4, s0
 800152a:	ee10 0a90 	vmov	r0, s1
	return atan2(a_y, a_z) * 180.0;
 800152e:	f7ff f80b 	bl	8000548 <__aeabi_f2d>
 8001532:	ec41 0b18 	vmov	d8, r0, r1
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff f806 	bl	8000548 <__aeabi_f2d>
 800153c:	eeb0 1a48 	vmov.f32	s2, s16
 8001540:	eef0 1a68 	vmov.f32	s3, s17
 8001544:	ec41 0b10 	vmov	d0, r0, r1
 8001548:	f004 faca 	bl	8005ae0 <atan2>
 800154c:	ec51 0b10 	vmov	r0, r1, d0
 8001550:	2200      	movs	r2, #0
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <cal_roll+0x48>)
 8001554:	f7ff f850 	bl	80005f8 <__aeabi_dmul>
 8001558:	f7ff fb26 	bl	8000ba8 <__aeabi_d2f>
}
 800155c:	ee00 0a10 	vmov	s0, r0
 8001560:	ecbd 8b02 	vpop	{d8}
 8001564:	bd10      	pop	{r4, pc}
 8001566:	bf00      	nop
 8001568:	40668000 	.word	0x40668000
 800156c:	00000000 	.word	0x00000000

08001570 <cal_pitch>:
 * @param[in]       a_y acceleration along y axis
 * @param[in]       a_z acceleration along z axis
 * @return 			pitch value - rotation along y axis.
 *
 */
float cal_pitch(float a_x, float a_y, float a_z) {
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001572:	ed2d 8b02 	vpush	{d8}
 8001576:	ee10 0a90 	vmov	r0, s1
 800157a:	ee11 5a10 	vmov	r5, s2
	return atan2(-a_x, sqrt(pow(a_y, 2) + pow(a_z, 2))) * 180.0;
 800157e:	eef1 7a40 	vneg.f32	s15, s0
 8001582:	ee17 4a90 	vmov	r4, s15
 8001586:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8001608 <cal_pitch+0x98>
 800158a:	f7fe ffdd 	bl	8000548 <__aeabi_f2d>
 800158e:	eeb0 1a48 	vmov.f32	s2, s16
 8001592:	eef0 1a68 	vmov.f32	s3, s17
 8001596:	ec41 0b10 	vmov	d0, r0, r1
 800159a:	f004 faa3 	bl	8005ae4 <pow>
 800159e:	ec57 6b10 	vmov	r6, r7, d0
 80015a2:	4628      	mov	r0, r5
 80015a4:	f7fe ffd0 	bl	8000548 <__aeabi_f2d>
 80015a8:	eeb0 1a48 	vmov.f32	s2, s16
 80015ac:	eef0 1a68 	vmov.f32	s3, s17
 80015b0:	ec41 0b10 	vmov	d0, r0, r1
 80015b4:	f004 fa96 	bl	8005ae4 <pow>
 80015b8:	ec53 2b10 	vmov	r2, r3, d0
 80015bc:	4630      	mov	r0, r6
 80015be:	4639      	mov	r1, r7
 80015c0:	f7fe fe64 	bl	800028c <__adddf3>
 80015c4:	ec41 0b10 	vmov	d0, r0, r1
 80015c8:	f004 fb3a 	bl	8005c40 <sqrt>
 80015cc:	eeb0 8a40 	vmov.f32	s16, s0
 80015d0:	eef0 8a60 	vmov.f32	s17, s1
 80015d4:	4620      	mov	r0, r4
 80015d6:	f7fe ffb7 	bl	8000548 <__aeabi_f2d>
 80015da:	eeb0 1a48 	vmov.f32	s2, s16
 80015de:	eef0 1a68 	vmov.f32	s3, s17
 80015e2:	ec41 0b10 	vmov	d0, r0, r1
 80015e6:	f004 fa7b 	bl	8005ae0 <atan2>
 80015ea:	ec51 0b10 	vmov	r0, r1, d0
 80015ee:	2200      	movs	r2, #0
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <cal_pitch+0xa0>)
 80015f2:	f7ff f801 	bl	80005f8 <__aeabi_dmul>
 80015f6:	f7ff fad7 	bl	8000ba8 <__aeabi_d2f>
}
 80015fa:	ee00 0a10 	vmov	s0, r0
 80015fe:	ecbd 8b02 	vpop	{d8}
 8001602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001604:	f3af 8000 	nop.w
 8001608:	00000000 	.word	0x00000000
 800160c:	40000000 	.word	0x40000000
 8001610:	40668000 	.word	0x40668000

08001614 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001616:	b08f      	sub	sp, #60	; 0x3c

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001618:	2500      	movs	r5, #0
 800161a:	950c      	str	r5, [sp, #48]	; 0x30
 800161c:	950d      	str	r5, [sp, #52]	; 0x34
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	950b      	str	r5, [sp, #44]	; 0x2c
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001620:	4b43      	ldr	r3, [pc, #268]	; (8001730 <MX_GPIO_Init+0x11c>)
 8001622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001624:	f042 0210 	orr.w	r2, r2, #16
 8001628:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800162a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800162c:	f002 0210 	and.w	r2, r2, #16
 8001630:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8001632:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001636:	f042 0204 	orr.w	r2, r2, #4
 800163a:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800163c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800163e:	f002 0204 	and.w	r2, r2, #4
 8001642:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001644:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800164c:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800164e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001650:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001654:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001656:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001662:	f002 0201 	and.w	r2, r2, #1
 8001666:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001668:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800166a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800166c:	f042 0208 	orr.w	r2, r2, #8
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800167a:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800167c:	4f2d      	ldr	r7, [pc, #180]	; (8001734 <MX_GPIO_Init+0x120>)
 800167e:	2308      	movs	r3, #8
 8001680:	61bb      	str	r3, [r7, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001682:	4e2d      	ldr	r6, [pc, #180]	; (8001738 <MX_GPIO_Init+0x124>)
 8001684:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8001688:	61b2      	str	r2, [r6, #24]

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin);

  /**/
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800168a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800168c:	2401      	movs	r4, #1
 800168e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8001690:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001692:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001694:	950a      	str	r5, [sp, #40]	; 0x28
  LL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001696:	a906      	add	r1, sp, #24
 8001698:	4638      	mov	r0, r7
 800169a:	f001 f933 	bl	8002904 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800169e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016a2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016a4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016a6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016a8:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016aa:	950a      	str	r5, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ac:	a906      	add	r1, sp, #24
 80016ae:	4630      	mov	r0, r6
 80016b0:	f001 f928 	bl	8002904 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = INT_1_Pin|INT_2_Pin;
 80016b4:	2603      	movs	r6, #3
 80016b6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80016b8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016ba:	950a      	str	r5, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016bc:	a906      	add	r1, sp, #24
 80016be:	4638      	mov	r0, r7
 80016c0:	f001 f920 	bl	8002904 <LL_GPIO_Init>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80016c4:	4a1d      	ldr	r2, [pc, #116]	; (800173c <MX_GPIO_Init+0x128>)
 80016c6:	6893      	ldr	r3, [r2, #8]
 80016c8:	f023 030f 	bic.w	r3, r3, #15
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	210f      	movs	r1, #15
 80016ce:	fa91 f1a1 	rbit	r1, r1
 80016d2:	6093      	str	r3, [r2, #8]

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80016d4:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 80016d6:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80016da:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80016de:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 80016e2:	a80c      	add	r0, sp, #48	; 0x30
 80016e4:	f001 f8a2 	bl	800282c <LL_EXTI_Init>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80016e8:	4a15      	ldr	r2, [pc, #84]	; (8001740 <MX_GPIO_Init+0x12c>)
 80016ea:	68d1      	ldr	r1, [r2, #12]
 80016ec:	fa94 f3a4 	rbit	r3, r4
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	40a3      	lsls	r3, r4
 80016f6:	fa06 f303 	lsl.w	r3, r6, r3
 80016fa:	ea21 0303 	bic.w	r3, r1, r3
 80016fe:	fa94 f1a4 	rbit	r1, r4
 8001702:	fab1 f181 	clz	r1, r1
 8001706:	40a1      	lsls	r1, r4
 8001708:	2002      	movs	r0, #2
 800170a:	fa00 f101 	lsl.w	r1, r0, r1
 800170e:	430b      	orrs	r3, r1
 8001710:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001712:	6811      	ldr	r1, [r2, #0]
 8001714:	fa94 f3a4 	rbit	r3, r4
 8001718:	fab3 f383 	clz	r3, r3
 800171c:	40a3      	lsls	r3, r4
 800171e:	409e      	lsls	r6, r3
 8001720:	ea21 0606 	bic.w	r6, r1, r6
 8001724:	fa94 f4a4 	rbit	r4, r4
 8001728:	6016      	str	r6, [r2, #0]
  LL_GPIO_SetPinPull(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin, LL_GPIO_PULL_DOWN);

  /**/
  LL_GPIO_SetPinMode(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin, LL_GPIO_MODE_INPUT);

}
 800172a:	b00f      	add	sp, #60	; 0x3c
 800172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40021000 	.word	0x40021000
 8001738:	40020c00 	.word	0x40020c00
 800173c:	40013800 	.word	0x40013800
 8001740:	40020000 	.word	0x40020000

08001744 <led_off>:
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <led_off+0x1c>)
 8001746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800174a:	619a      	str	r2, [r3, #24]
 800174c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001750:	619a      	str	r2, [r3, #24]
 8001752:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001756:	619a      	str	r2, [r3, #24]
 8001758:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800175c:	619a      	str	r2, [r3, #24]
	// reset all leds
	LL_GPIO_ResetOutputPin(GPIOD, GPIO_PIN_12);
	LL_GPIO_ResetOutputPin(GPIOD, GPIO_PIN_13);
	LL_GPIO_ResetOutputPin(GPIOD, GPIO_PIN_14);
	LL_GPIO_ResetOutputPin(GPIOD, GPIO_PIN_15);
}
 800175e:	4770      	bx	lr
 8001760:	40020c00 	.word	0x40020c00

08001764 <led_orientation>:
 * @brief 			turn on lowest led based on roll and pitch
 * @param[roll]		pitch angle
 * @param[pitch] 	roll angle
 * @return 			none
 */
void led_orientation(float32_t roll, float32_t pitch) {
 8001764:	b508      	push	{r3, lr}
 8001766:	ed2d 8b02 	vpush	{d8}
 800176a:	eeb0 8a40 	vmov.f32	s16, s0
 800176e:	eef0 8a60 	vmov.f32	s17, s1
	// reset all leds
	led_off();
 8001772:	f7ff ffe7 	bl	8001744 <led_off>

	unsigned int to_turn_on = -1;
	if(roll > 0) {
 8001776:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	dd12      	ble.n	80017a6 <led_orientation+0x42>
		// front
		to_turn_on = GPIO_PIN_13; //orange
 8001780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	} else {
		//back
		to_turn_on = GPIO_PIN_15; // blue
		roll = -roll;
	}
	if(pitch > 0) {
 8001784:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	dd10      	ble.n	80017b0 <led_orientation+0x4c>
		// may be sx
		if(pitch > -roll) {
 800178e:	eeb1 8a48 	vneg.f32	s16, s16
 8001792:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8001796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179a:	d411      	bmi.n	80017c0 <led_orientation+0x5c>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <led_orientation+0x64>)
 800179e:	6193      	str	r3, [r2, #24]
	// if pitc== o and roll == 0 no led turns on
	if (to_turn_on != -1) {
		// then set only the chosen one
		LL_GPIO_SetOutputPin(GPIOD, to_turn_on);
	}
}
 80017a0:	ecbd 8b02 	vpop	{d8}
 80017a4:	bd08      	pop	{r3, pc}
		roll = -roll;
 80017a6:	eeb1 8a48 	vneg.f32	s16, s16
		to_turn_on = GPIO_PIN_15; // blue
 80017aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ae:	e7e9      	b.n	8001784 <led_orientation+0x20>
		if(-pitch > -roll) {
 80017b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	ddf0      	ble.n	800179c <led_orientation+0x38>
			to_turn_on = GPIO_PIN_14; //red
 80017ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017be:	e7ed      	b.n	800179c <led_orientation+0x38>
			to_turn_on = GPIO_PIN_12; //green
 80017c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c4:	e7ea      	b.n	800179c <led_orientation+0x38>
 80017c6:	bf00      	nop
 80017c8:	40020c00 	.word	0x40020c00

080017cc <__io_putchar>:
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80017cc:	b2c2      	uxtb	r2, r0
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__io_putchar+0x14>)
 80017d0:	605a      	str	r2, [r3, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80017d2:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <__io_putchar+0x14>)
 80017d4:	681b      	ldr	r3, [r3, #0]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART */
LL_USART_TransmitData8(USART2, (uint8_t) ch);

/* Loop until the end of transmission */
while (LL_USART_IsActiveFlag_TC(USART2) == 0) {
 80017d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017da:	d0fa      	beq.n	80017d2 <__io_putchar+0x6>
}

return ch;
}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40004400 	.word	0x40004400

080017e4 <Acc_Config>:

void Acc_Config(void) {
 80017e4:	b500      	push	{lr}
 80017e6:	b083      	sub	sp, #12
LIS3DSH_InitTypeDef AccInitStruct;

AccInitStruct.Output_DataRate = LIS3DSH_DATARATE_25;
 80017e8:	2340      	movs	r3, #64	; 0x40
 80017ea:	f88d 3000 	strb.w	r3, [sp]
AccInitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 80017ee:	2307      	movs	r3, #7
 80017f0:	f88d 3001 	strb.w	r3, [sp, #1]
AccInitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f88d 3002 	strb.w	r3, [sp, #2]
AccInitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 80017fa:	f88d 3003 	strb.w	r3, [sp, #3]
AccInitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 80017fe:	f88d 3004 	strb.w	r3, [sp, #4]
AccInitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 8001802:	f88d 3005 	strb.w	r3, [sp, #5]

LIS3DSH_Init(&AccInitStruct);
 8001806:	4668      	mov	r0, sp
 8001808:	f000 fa0a 	bl	8001c20 <LIS3DSH_Init>
}
 800180c:	b003      	add	sp, #12
 800180e:	f85d fb04 	ldr.w	pc, [sp], #4

08001812 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001812:	b672      	cpsid	i
 */
void Error_Handler(void) {
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8001814:	e7fe      	b.n	8001814 <Error_Handler+0x2>
	...

08001818 <SystemClock_Config>:
void SystemClock_Config(void) {
 8001818:	b500      	push	{lr}
 800181a:	b095      	sub	sp, #84	; 0x54
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800181c:	2230      	movs	r2, #48	; 0x30
 800181e:	2100      	movs	r1, #0
 8001820:	a808      	add	r0, sp, #32
 8001822:	f001 fc05 	bl	8003030 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001826:	2300      	movs	r3, #0
 8001828:	9303      	str	r3, [sp, #12]
 800182a:	9304      	str	r3, [sp, #16]
 800182c:	9305      	str	r3, [sp, #20]
 800182e:	9306      	str	r3, [sp, #24]
 8001830:	9307      	str	r3, [sp, #28]
__HAL_RCC_PWR_CLK_ENABLE();
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <SystemClock_Config+0xa4>)
 8001836:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001838:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800183c:	6411      	str	r1, [r2, #64]	; 0x40
 800183e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001840:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001844:	9201      	str	r2, [sp, #4]
 8001846:	9a01      	ldr	r2, [sp, #4]
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <SystemClock_Config+0xa8>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	9b02      	ldr	r3, [sp, #8]
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800185e:	2301      	movs	r3, #1
 8001860:	9308      	str	r3, [sp, #32]
RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001866:	9309      	str	r3, [sp, #36]	; 0x24
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001868:	2302      	movs	r3, #2
 800186a:	930e      	str	r3, [sp, #56]	; 0x38
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001870:	920f      	str	r2, [sp, #60]	; 0x3c
RCC_OscInitStruct.PLL.PLLM = 8;
 8001872:	2208      	movs	r2, #8
 8001874:	9210      	str	r2, [sp, #64]	; 0x40
RCC_OscInitStruct.PLL.PLLN = 336;
 8001876:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800187a:	9211      	str	r2, [sp, #68]	; 0x44
RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800187c:	9312      	str	r3, [sp, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLQ = 4;
 800187e:	2304      	movs	r3, #4
 8001880:	9313      	str	r3, [sp, #76]	; 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001882:	a808      	add	r0, sp, #32
 8001884:	f000 fcc0 	bl	8002208 <HAL_RCC_OscConfig>
 8001888:	b998      	cbnz	r0, 80018b2 <SystemClock_Config+0x9a>
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800188a:	230f      	movs	r3, #15
 800188c:	9303      	str	r3, [sp, #12]
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188e:	2302      	movs	r3, #2
 8001890:	9304      	str	r3, [sp, #16]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	9305      	str	r3, [sp, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001896:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800189a:	9306      	str	r3, [sp, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800189c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a0:	9307      	str	r3, [sp, #28]
if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80018a2:	2105      	movs	r1, #5
 80018a4:	a803      	add	r0, sp, #12
 80018a6:	f000 ff11 	bl	80026cc <HAL_RCC_ClockConfig>
 80018aa:	b920      	cbnz	r0, 80018b6 <SystemClock_Config+0x9e>
}
 80018ac:	b015      	add	sp, #84	; 0x54
 80018ae:	f85d fb04 	ldr.w	pc, [sp], #4
	Error_Handler();
 80018b2:	f7ff ffae 	bl	8001812 <Error_Handler>
	Error_Handler();
 80018b6:	f7ff ffac 	bl	8001812 <Error_Handler>
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40007000 	.word	0x40007000

080018c4 <main>:
int main(void) {
 80018c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018c8:	b084      	sub	sp, #16
	arm_float_to_q15((float32_t*) &FFT_Input_Q15_f[0], (q15_t*) &aFFT_Input_Q15[0], FFT_Length * 2);
 80018ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018ce:	496f      	ldr	r1, [pc, #444]	; (8001a8c <main+0x1c8>)
 80018d0:	486f      	ldr	r0, [pc, #444]	; (8001a90 <main+0x1cc>)
 80018d2:	f7ff fd4c 	bl	800136e <arm_float_to_q15>
	HAL_Init();
 80018d6:	f000 fc0f 	bl	80020f8 <HAL_Init>
	SystemClock_Config();
 80018da:	f7ff ff9d 	bl	8001818 <SystemClock_Config>
	MX_GPIO_Init();
 80018de:	f7ff fe99 	bl	8001614 <MX_GPIO_Init>
	MX_TIM3_Init();
 80018e2:	f000 fb15 	bl	8001f10 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80018e6:	f000 fb5d 	bl	8001fa4 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80018ea:	f000 f905 	bl	8001af8 <MX_SPI1_Init>
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 80018ee:	4b69      	ldr	r3, [pc, #420]	; (8001a94 <main+0x1d0>)
 80018f0:	781a      	ldrb	r2, [r3, #0]
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80018fa:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <main+0x1d4>)
 80018fc:	6810      	ldr	r0, [r2, #0]
 80018fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001902:	f000 fc6b 	bl	80021dc <HAL_SYSTICK_Config>
 8001906:	b118      	cbz	r0, 8001910 <main+0x4c>
}
 8001908:	2001      	movs	r0, #1
 800190a:	b004      	add	sp, #16
 800190c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001910:	4b62      	ldr	r3, [pc, #392]	; (8001a9c <main+0x1d8>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	f042 0220 	orr.w	r2, r2, #32
 8001918:	60da      	str	r2, [r3, #12]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001920:	60da      	str	r2, [r3, #12]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001922:	4a5f      	ldr	r2, [pc, #380]	; (8001aa0 <main+0x1dc>)
 8001924:	6813      	ldr	r3, [r2, #0]
 8001926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192a:	6013      	str	r3, [r2, #0]
	Acc_Config();
 800192c:	f7ff ff5a 	bl	80017e4 <Acc_Config>
	init_fir_3_axes();
 8001930:	f7ff fd5c 	bl	80013ec <init_fir_3_axes>
	printf("Type s to start/stop streaming and d to toggle streaming mode...\r\n");
 8001934:	485b      	ldr	r0, [pc, #364]	; (8001aa4 <main+0x1e0>)
 8001936:	f002 f873 	bl	8003a20 <puts>
	stream_active = 1;
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <main+0x1e4>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
	stream_mode = 0;
 8001940:	4b5a      	ldr	r3, [pc, #360]	; (8001aac <main+0x1e8>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	e030      	b.n	80019aa <main+0xe6>
				stream_active = 1 - stream_active;
 8001948:	4a57      	ldr	r2, [pc, #348]	; (8001aa8 <main+0x1e4>)
 800194a:	7813      	ldrb	r3, [r2, #0]
 800194c:	f1c3 0301 	rsb	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	7013      	strb	r3, [r2, #0]
				if (stream_active == 1) {
 8001954:	2b01      	cmp	r3, #1
 8001956:	d003      	beq.n	8001960 <main+0x9c>
					printf("Stream OFF\r\n");
 8001958:	4855      	ldr	r0, [pc, #340]	; (8001ab0 <main+0x1ec>)
 800195a:	f002 f861 	bl	8003a20 <puts>
 800195e:	e00a      	b.n	8001976 <main+0xb2>
					printf("Stream ON\r\n");
 8001960:	4854      	ldr	r0, [pc, #336]	; (8001ab4 <main+0x1f0>)
 8001962:	f002 f85d 	bl	8003a20 <puts>
 8001966:	e006      	b.n	8001976 <main+0xb2>
					printf("Now streaming (roll, pitch) \r\n");
 8001968:	4853      	ldr	r0, [pc, #332]	; (8001ab8 <main+0x1f4>)
 800196a:	f002 f859 	bl	8003a20 <puts>
 800196e:	e002      	b.n	8001976 <main+0xb2>
				printf("Wrong command\r\n");
 8001970:	4852      	ldr	r0, [pc, #328]	; (8001abc <main+0x1f8>)
 8001972:	f002 f855 	bl	8003a20 <puts>
			dataReceived = 0;
 8001976:	4b52      	ldr	r3, [pc, #328]	; (8001ac0 <main+0x1fc>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
		if (stream_active) {
 800197c:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <main+0x1e4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b19b      	cbz	r3, 80019aa <main+0xe6>
			if (dataReady) {
 8001982:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <main+0x200>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b183      	cbz	r3, 80019aa <main+0xe6>
				LIS3DSH_ReadACC(accData[idx++]);
 8001988:	4c4f      	ldr	r4, [pc, #316]	; (8001ac8 <main+0x204>)
 800198a:	8820      	ldrh	r0, [r4, #0]
 800198c:	1c43      	adds	r3, r0, #1
 800198e:	8023      	strh	r3, [r4, #0]
 8001990:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <main+0x208>)
 8001996:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800199a:	f000 f981 	bl	8001ca0 <LIS3DSH_ReadACC>
				dataReady = 0;
 800199e:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <main+0x200>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
				if (idx == SIZE) {
 80019a4:	8823      	ldrh	r3, [r4, #0]
 80019a6:	2b19      	cmp	r3, #25
 80019a8:	d015      	beq.n	80019d6 <main+0x112>
		if (dataReceived) {
 80019aa:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <main+0x1fc>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0e4      	beq.n	800197c <main+0xb8>
			if (chRX == 's') {
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <main+0x20c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b73      	cmp	r3, #115	; 0x73
 80019b8:	d0c6      	beq.n	8001948 <main+0x84>
			} else if (chRX == 'd') {
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d1d8      	bne.n	8001970 <main+0xac>
				stream_mode = 1 - stream_mode;
 80019be:	4a3b      	ldr	r2, [pc, #236]	; (8001aac <main+0x1e8>)
 80019c0:	7813      	ldrb	r3, [r2, #0]
 80019c2:	f1c3 0301 	rsb	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	7013      	strb	r3, [r2, #0]
				if (stream_mode == 1) {
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d0cc      	beq.n	8001968 <main+0xa4>
					printf("Now streaming (x, y, z)\r\n");
 80019ce:	4841      	ldr	r0, [pc, #260]	; (8001ad4 <main+0x210>)
 80019d0:	f002 f826 	bl	8003a20 <puts>
 80019d4:	e7cf      	b.n	8001976 <main+0xb2>
					fir_3_axes(accData, fir_out_x, fir_out_y, fir_out_z);
 80019d6:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <main+0x214>)
 80019d8:	4a40      	ldr	r2, [pc, #256]	; (8001adc <main+0x218>)
 80019da:	4941      	ldr	r1, [pc, #260]	; (8001ae0 <main+0x21c>)
 80019dc:	483b      	ldr	r0, [pc, #236]	; (8001acc <main+0x208>)
 80019de:	f7ff fd5d 	bl	800149c <fir_3_axes>
					if (stream_mode == 0) {
 80019e2:	4b32      	ldr	r3, [pc, #200]	; (8001aac <main+0x1e8>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	bb0b      	cbnz	r3, 8001a2c <main+0x168>
						printf("X: %8f\tY: %9f\tZ: %9f\r\n", fir_out_x[SIZE - 1], fir_out_y[SIZE - 1], fir_out_z[SIZE - 1]);
 80019e8:	4b3c      	ldr	r3, [pc, #240]	; (8001adc <main+0x218>)
 80019ea:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 80019ec:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <main+0x214>)
 80019ee:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 80019f0:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <main+0x21c>)
 80019f2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80019f4:	f7fe fda8 	bl	8000548 <__aeabi_f2d>
 80019f8:	4604      	mov	r4, r0
 80019fa:	460d      	mov	r5, r1
 80019fc:	4638      	mov	r0, r7
 80019fe:	f7fe fda3 	bl	8000548 <__aeabi_f2d>
 8001a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a06:	4630      	mov	r0, r6
 8001a08:	f7fe fd9e 	bl	8000548 <__aeabi_f2d>
 8001a0c:	e9cd 0100 	strd	r0, r1, [sp]
 8001a10:	4622      	mov	r2, r4
 8001a12:	462b      	mov	r3, r5
 8001a14:	4833      	ldr	r0, [pc, #204]	; (8001ae4 <main+0x220>)
 8001a16:	f001 ff7d 	bl	8003914 <iprintf>
						led_off();
 8001a1a:	f7ff fe93 	bl	8001744 <led_off>
					printf("------------------------------------------------------------\r\n");
 8001a1e:	4832      	ldr	r0, [pc, #200]	; (8001ae8 <main+0x224>)
 8001a20:	f001 fffe 	bl	8003a20 <puts>
					idx = 0;
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <main+0x204>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	e7be      	b.n	80019aa <main+0xe6>
						roll = cal_roll(fir_out_y[SIZE - 1], fir_out_z[SIZE - 1]);
 8001a2c:	4e2a      	ldr	r6, [pc, #168]	; (8001ad8 <main+0x214>)
 8001a2e:	4c2b      	ldr	r4, [pc, #172]	; (8001adc <main+0x218>)
 8001a30:	edd6 0a18 	vldr	s1, [r6, #96]	; 0x60
 8001a34:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 8001a38:	f7ff fd72 	bl	8001520 <cal_roll>
 8001a3c:	4d2b      	ldr	r5, [pc, #172]	; (8001aec <main+0x228>)
 8001a3e:	ed85 0a00 	vstr	s0, [r5]
						pitch = cal_pitch(fir_out_x[SIZE - 1], fir_out_y[SIZE - 1], fir_out_z[SIZE - 1]);
 8001a42:	ed96 1a18 	vldr	s2, [r6, #96]	; 0x60
 8001a46:	edd4 0a18 	vldr	s1, [r4, #96]	; 0x60
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <main+0x21c>)
 8001a4c:	ed93 0a18 	vldr	s0, [r3, #96]	; 0x60
 8001a50:	f7ff fd8e 	bl	8001570 <cal_pitch>
 8001a54:	ee10 4a10 	vmov	r4, s0
 8001a58:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001af4 <main+0x230>
 8001a5c:	ed88 0a00 	vstr	s0, [r8]
						printf("ROLL: %8f\tPITCH: %9f\r\n", roll, pitch);
 8001a60:	6828      	ldr	r0, [r5, #0]
 8001a62:	f7fe fd71 	bl	8000548 <__aeabi_f2d>
 8001a66:	4606      	mov	r6, r0
 8001a68:	460f      	mov	r7, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7fe fd6c 	bl	8000548 <__aeabi_f2d>
 8001a70:	e9cd 0100 	strd	r0, r1, [sp]
 8001a74:	4632      	mov	r2, r6
 8001a76:	463b      	mov	r3, r7
 8001a78:	481d      	ldr	r0, [pc, #116]	; (8001af0 <main+0x22c>)
 8001a7a:	f001 ff4b 	bl	8003914 <iprintf>
						led_orientation(roll, pitch);
 8001a7e:	edd8 0a00 	vldr	s1, [r8]
 8001a82:	ed95 0a00 	vldr	s0, [r5]
 8001a86:	f7ff fe6d 	bl	8001764 <led_orientation>
 8001a8a:	e7c8      	b.n	8001a1e <main+0x15a>
 8001a8c:	2000067c 	.word	0x2000067c
 8001a90:	200007a8 	.word	0x200007a8
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000004 	.word	0x20000004
 8001a9c:	40004400 	.word	0x40004400
 8001aa0:	40013000 	.word	0x40013000
 8001aa4:	0800700c 	.word	0x0800700c
 8001aa8:	20000206 	.word	0x20000206
 8001aac:	20000207 	.word	0x20000207
 8001ab0:	0800705c 	.word	0x0800705c
 8001ab4:	08007050 	.word	0x08007050
 8001ab8:	08007068 	.word	0x08007068
 8001abc:	080070a4 	.word	0x080070a4
 8001ac0:	20000202 	.word	0x20000202
 8001ac4:	20000201 	.word	0x20000201
 8001ac8:	20000204 	.word	0x20000204
 8001acc:	20000878 	.word	0x20000878
 8001ad0:	20000200 	.word	0x20000200
 8001ad4:	08007088 	.word	0x08007088
 8001ad8:	200005b4 	.word	0x200005b4
 8001adc:	20000618 	.word	0x20000618
 8001ae0:	20000744 	.word	0x20000744
 8001ae4:	080070b4 	.word	0x080070b4
 8001ae8:	080070e4 	.word	0x080070e4
 8001aec:	20000874 	.word	0x20000874
 8001af0:	080070cc 	.word	0x080070cc
 8001af4:	20000870 	.word	0x20000870

08001af8 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001af8:	b510      	push	{r4, lr}
 8001afa:	b092      	sub	sp, #72	; 0x48

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001afc:	2228      	movs	r2, #40	; 0x28
 8001afe:	2100      	movs	r1, #0
 8001b00:	a808      	add	r0, sp, #32
 8001b02:	f001 fa95 	bl	8003030 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b06:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <MX_SPI1_Init+0x8c>)
 8001b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b12:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b16:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001b18:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001b2a:	9b00      	ldr	r3, [sp, #0]
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001b2c:	23e0      	movs	r3, #224	; 0xe0
 8001b2e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b30:	2302      	movs	r3, #2
 8001b32:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b38:	2400      	movs	r4, #0
 8001b3a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b3c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001b3e:	2305      	movs	r3, #5
 8001b40:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	a902      	add	r1, sp, #8
 8001b44:	4810      	ldr	r0, [pc, #64]	; (8001b88 <MX_SPI1_Init+0x90>)
 8001b46:	f000 fedd 	bl	8002904 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b4a:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b4c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b50:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001b52:	940a      	str	r4, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001b54:	940b      	str	r4, [sp, #44]	; 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001b56:	940c      	str	r4, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b5c:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001b5e:	2308      	movs	r3, #8
 8001b60:	930e      	str	r3, [sp, #56]	; 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001b62:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_ENABLE;
 8001b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b68:	9310      	str	r3, [sp, #64]	; 0x40
  SPI_InitStruct.CRCPoly = 10;
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	9311      	str	r3, [sp, #68]	; 0x44
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001b6e:	4c07      	ldr	r4, [pc, #28]	; (8001b8c <MX_SPI1_Init+0x94>)
 8001b70:	a908      	add	r1, sp, #32
 8001b72:	4620      	mov	r0, r4
 8001b74:	f000 ffce 	bl	8002b14 <LL_SPI_Init>
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001b78:	6863      	ldr	r3, [r4, #4]
 8001b7a:	f023 0310 	bic.w	r3, r3, #16
 8001b7e:	6063      	str	r3, [r4, #4]
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b80:	b012      	add	sp, #72	; 0x48
 8001b82:	bd10      	pop	{r4, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40013000 	.word	0x40013000

08001b90 <LIS3DSH_SendByte>:
  * @retval The received byte value
  */
static uint8_t LIS3DSH_SendByte(uint8_t byte)
{
	/* Loop while DR register in not emplty */
	LIS3DSHTimeout = LIS3DSH_FLAG_TIMEOUT;
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <LIS3DSH_SendByte+0x50>)
 8001b92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b96:	601a      	str	r2, [r3, #0]
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <LIS3DSH_SendByte+0x54>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f013 0f02 	tst.w	r3, #2
 8001ba0:	d012      	beq.n	8001bc8 <LIS3DSH_SendByte+0x38>
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <LIS3DSH_SendByte+0x54>)
 8001ba4:	7318      	strb	r0, [r3, #12]

	/* Send a Byte through the SPI peripheral */
	LL_SPI_TransmitData8(LIS3DSH_SPI, byte);

	/* Wait to receive a Byte */
	LIS3DSHTimeout = LIS3DSH_FLAG_TIMEOUT;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <LIS3DSH_SendByte+0x50>)
 8001ba8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bac:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <LIS3DSH_SendByte+0x54>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f013 0f01 	tst.w	r3, #1
 8001bb6:	d10f      	bne.n	8001bd8 <LIS3DSH_SendByte+0x48>
	while (LL_SPI_IsActiveFlag_RXNE(LIS3DSH_SPI) == RESET)
	{
	if((LIS3DSHTimeout--) == 0) return 0;
 8001bb8:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <LIS3DSH_SendByte+0x50>)
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	1e59      	subs	r1, r3, #1
 8001bbe:	6011      	str	r1, [r2, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f4      	bne.n	8001bae <LIS3DSH_SendByte+0x1e>
 8001bc4:	2000      	movs	r0, #0
	}

	/* Return the Byte read from the SPI bus */
	return (uint8_t)LL_SPI_ReceiveData8(LIS3DSH_SPI);
}
 8001bc6:	4770      	bx	lr
	if((LIS3DSHTimeout--) == 0) return 0;
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <LIS3DSH_SendByte+0x50>)
 8001bca:	6813      	ldr	r3, [r2, #0]
 8001bcc:	1e59      	subs	r1, r3, #1
 8001bce:	6011      	str	r1, [r2, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e1      	bne.n	8001b98 <LIS3DSH_SendByte+0x8>
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	4770      	bx	lr
  return (uint8_t)(READ_REG(SPIx->DR));
 8001bd8:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <LIS3DSH_SendByte+0x54>)
 8001bda:	68d8      	ldr	r0, [r3, #12]
 8001bdc:	b2c0      	uxtb	r0, r0
	return (uint8_t)LL_SPI_ReceiveData8(LIS3DSH_SPI);
 8001bde:	4770      	bx	lr
 8001be0:	20000000 	.word	0x20000000
 8001be4:	40013000 	.word	0x40013000

08001be8 <LIS3DSH_Write>:
{
 8001be8:	b538      	push	{r3, r4, r5, lr}
 8001bea:	4605      	mov	r5, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	4614      	mov	r4, r2
  if(NumByteToWrite > 0x01)
 8001bf0:	2a01      	cmp	r2, #1
 8001bf2:	d901      	bls.n	8001bf8 <LIS3DSH_Write+0x10>
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001bf4:	f041 0040 	orr.w	r0, r1, #64	; 0x40
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <LIS3DSH_Write+0x34>)
 8001bfa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bfe:	619a      	str	r2, [r3, #24]
  LIS3DSH_SendByte(WriteAddr);
 8001c00:	f7ff ffc6 	bl	8001b90 <LIS3DSH_SendByte>
  while(NumByteToWrite >= 0x01)
 8001c04:	b134      	cbz	r4, 8001c14 <LIS3DSH_Write+0x2c>
	  LIS3DSH_SendByte(*pBuffer);
 8001c06:	f815 0b01 	ldrb.w	r0, [r5], #1
 8001c0a:	f7ff ffc1 	bl	8001b90 <LIS3DSH_SendByte>
    NumByteToWrite--;
 8001c0e:	3c01      	subs	r4, #1
 8001c10:	b2a4      	uxth	r4, r4
    pBuffer++;
 8001c12:	e7f7      	b.n	8001c04 <LIS3DSH_Write+0x1c>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c14:	4b01      	ldr	r3, [pc, #4]	; (8001c1c <LIS3DSH_Write+0x34>)
 8001c16:	2208      	movs	r2, #8
 8001c18:	619a      	str	r2, [r3, #24]
}
 8001c1a:	bd38      	pop	{r3, r4, r5, pc}
 8001c1c:	40021000 	.word	0x40021000

08001c20 <LIS3DSH_Init>:
{
 8001c20:	b510      	push	{r4, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	4604      	mov	r4, r0
  ctrl = (uint8_t) (InitStruct->Output_DataRate | InitStruct->Axes_Enable);
 8001c26:	7803      	ldrb	r3, [r0, #0]
 8001c28:	7842      	ldrb	r2, [r0, #1]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f88d 3007 	strb.w	r3, [sp, #7]
  LIS3DSH_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2120      	movs	r1, #32
 8001c34:	f10d 0007 	add.w	r0, sp, #7
 8001c38:	f7ff ffd6 	bl	8001be8 <LIS3DSH_Write>
  ctrl = (uint8_t) (InitStruct->SPI_Wire | InitStruct->Self_Test | InitStruct->Full_Scale | InitStruct->Filter_BW);
 8001c3c:	78a1      	ldrb	r1, [r4, #2]
 8001c3e:	78e0      	ldrb	r0, [r4, #3]
 8001c40:	7922      	ldrb	r2, [r4, #4]
 8001c42:	7963      	ldrb	r3, [r4, #5]
 8001c44:	4301      	orrs	r1, r0
 8001c46:	430a      	orrs	r2, r1
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	f88d 3007 	strb.w	r3, [sp, #7]
  LIS3DSH_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2124      	movs	r1, #36	; 0x24
 8001c52:	f10d 0007 	add.w	r0, sp, #7
 8001c56:	f7ff ffc7 	bl	8001be8 <LIS3DSH_Write>
}
 8001c5a:	b002      	add	sp, #8
 8001c5c:	bd10      	pop	{r4, pc}
	...

08001c60 <LIS3DSH_Read>:
{
 8001c60:	b538      	push	{r3, r4, r5, lr}
 8001c62:	4605      	mov	r5, r0
 8001c64:	4614      	mov	r4, r2
  if(NumByteToRead > 0x01)
 8001c66:	2a01      	cmp	r2, #1
 8001c68:	d910      	bls.n	8001c8c <LIS3DSH_Read+0x2c>
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001c6a:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <LIS3DSH_Read+0x3c>)
 8001c70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c74:	619a      	str	r2, [r3, #24]
  LIS3DSH_SendByte(ReadAddr);
 8001c76:	f7ff ff8b 	bl	8001b90 <LIS3DSH_SendByte>
  while(NumByteToRead > 0x00)
 8001c7a:	b154      	cbz	r4, 8001c92 <LIS3DSH_Read+0x32>
    *pBuffer = LIS3DSH_SendByte(DUMMY_BYTE);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff ff87 	bl	8001b90 <LIS3DSH_SendByte>
 8001c82:	f805 0b01 	strb.w	r0, [r5], #1
    NumByteToRead--;
 8001c86:	3c01      	subs	r4, #1
 8001c88:	b2a4      	uxth	r4, r4
    pBuffer++;
 8001c8a:	e7f6      	b.n	8001c7a <LIS3DSH_Read+0x1a>
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001c8c:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 8001c90:	e7ed      	b.n	8001c6e <LIS3DSH_Read+0xe>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c92:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <LIS3DSH_Read+0x3c>)
 8001c94:	2208      	movs	r2, #8
 8001c96:	619a      	str	r2, [r3, #24]
}
 8001c98:	bd38      	pop	{r3, r4, r5, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <LIS3DSH_ReadACC>:
{
 8001ca0:	b510      	push	{r4, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	4604      	mov	r4, r0
  LIS3DSH_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2124      	movs	r1, #36	; 0x24
 8001caa:	f10d 0007 	add.w	r0, sp, #7
 8001cae:	f7ff ffd7 	bl	8001c60 <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	2128      	movs	r1, #40	; 0x28
 8001cb6:	a802      	add	r0, sp, #8
 8001cb8:	f7ff ffd2 	bl	8001c60 <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2129      	movs	r1, #41	; 0x29
 8001cc0:	f10d 0009 	add.w	r0, sp, #9
 8001cc4:	f7ff ffcc 	bl	8001c60 <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	212a      	movs	r1, #42	; 0x2a
 8001ccc:	f10d 000a 	add.w	r0, sp, #10
 8001cd0:	f7ff ffc6 	bl	8001c60 <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	212b      	movs	r1, #43	; 0x2b
 8001cd8:	f10d 000b 	add.w	r0, sp, #11
 8001cdc:	f7ff ffc0 	bl	8001c60 <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	212c      	movs	r1, #44	; 0x2c
 8001ce4:	a803      	add	r0, sp, #12
 8001ce6:	f7ff ffbb 	bl	8001c60 <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8001cea:	2201      	movs	r2, #1
 8001cec:	212d      	movs	r1, #45	; 0x2d
 8001cee:	f10d 000d 	add.w	r0, sp, #13
 8001cf2:	f7ff ffb5 	bl	8001c60 <LIS3DSH_Read>
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 8001cf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cfe:	3b08      	subs	r3, #8
 8001d00:	2b18      	cmp	r3, #24
 8001d02:	d80e      	bhi.n	8001d22 <LIS3DSH_ReadACC+0x82>
 8001d04:	e8df f003 	tbb	[pc, r3]
 8001d08:	0d0d0d1a 	.word	0x0d0d0d1a
 8001d0c:	0d0d0d0d 	.word	0x0d0d0d0d
 8001d10:	0d0d0d11 	.word	0x0d0d0d11
 8001d14:	0d0d0d0d 	.word	0x0d0d0d0d
 8001d18:	0d0d0d14 	.word	0x0d0d0d14
 8001d1c:	0d0d0d0d 	.word	0x0d0d0d0d
 8001d20:	17          	.byte	0x17
 8001d21:	00          	.byte	0x00
 8001d22:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001d80 <LIS3DSH_ReadACC+0xe0>
  for(i=0; i<3; i++)
 8001d26:	2200      	movs	r2, #0
 8001d28:	e025      	b.n	8001d76 <LIS3DSH_ReadACC+0xd6>
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001d2a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001d84 <LIS3DSH_ReadACC+0xe4>
    break;
 8001d2e:	e7fa      	b.n	8001d26 <LIS3DSH_ReadACC+0x86>
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8001d30:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d88 <LIS3DSH_ReadACC+0xe8>
    break;
 8001d34:	e7f7      	b.n	8001d26 <LIS3DSH_ReadACC+0x86>
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001d36:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d8c <LIS3DSH_ReadACC+0xec>
    break;
 8001d3a:	e7f4      	b.n	8001d26 <LIS3DSH_ReadACC+0x86>
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8001d3c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001d90 <LIS3DSH_ReadACC+0xf0>
 8001d40:	e7f1      	b.n	8001d26 <LIS3DSH_ReadACC+0x86>
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8001d42:	0051      	lsls	r1, r2, #1
 8001d44:	1c4b      	adds	r3, r1, #1
 8001d46:	a804      	add	r0, sp, #16
 8001d48:	4403      	add	r3, r0
 8001d4a:	f913 0c08 	ldrsb.w	r0, [r3, #-8]
 8001d4e:	ab04      	add	r3, sp, #16
 8001d50:	4419      	add	r1, r3
 8001d52:	f911 3c08 	ldrsb.w	r3, [r1, #-8]
 8001d56:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
    pData[i] = (int16_t)valueinfloat;
 8001d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6a:	ee17 3a90 	vmov	r3, s15
 8001d6e:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
  for(i=0; i<3; i++)
 8001d72:	3201      	adds	r2, #1
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	2a02      	cmp	r2, #2
 8001d78:	d9e3      	bls.n	8001d42 <LIS3DSH_ReadACC+0xa2>
}
 8001d7a:	b004      	add	sp, #16
 8001d7c:	bd10      	pop	{r4, pc}
 8001d7e:	bf00      	nop
 8001d80:	3d75c28f 	.word	0x3d75c28f
 8001d84:	3e3851ec 	.word	0x3e3851ec
 8001d88:	3e75c28f 	.word	0x3e75c28f
 8001d8c:	3f3ae148 	.word	0x3f3ae148
 8001d90:	3df5c28f 	.word	0x3df5c28f

08001d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d94:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2100      	movs	r1, #0
 8001d98:	9100      	str	r1, [sp, #0]
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_MspInit+0x34>)
 8001d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da2:	645a      	str	r2, [r3, #68]	; 0x44
 8001da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001da6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001daa:	9200      	str	r2, [sp, #0]
 8001dac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	9101      	str	r1, [sp, #4]
 8001db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc2:	b002      	add	sp, #8
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800

08001dcc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler>

08001dce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <HardFault_Handler>

08001dd0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler>

08001dd2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <BusFault_Handler>

08001dd4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <UsageFault_Handler>

08001dd6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd6:	4770      	bx	lr

08001dd8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd8:	4770      	bx	lr

08001dda <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dda:	4770      	bx	lr

08001ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ddc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	static uint16_t counterRead_ms = 0;

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dde:	f000 f9a5 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

    if (stream_active)
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <SysTick_Handler+0x28>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b15b      	cbz	r3, 8001e00 <SysTick_Handler+0x24>
    {
  		if (counterRead_ms++ >= READ_PERIOD_MS)
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <SysTick_Handler+0x2c>)
 8001dea:	8813      	ldrh	r3, [r2, #0]
 8001dec:	1c59      	adds	r1, r3, #1
 8001dee:	8011      	strh	r1, [r2, #0]
 8001df0:	2b09      	cmp	r3, #9
 8001df2:	d905      	bls.n	8001e00 <SysTick_Handler+0x24>
  		{
  			dataReady = 1;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <SysTick_Handler+0x30>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
  			counterRead_ms = 0;
 8001dfa:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <SysTick_Handler+0x2c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	801a      	strh	r2, [r3, #0]
  		}
  	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e00:	bd08      	pop	{r3, pc}
 8001e02:	bf00      	nop
 8001e04:	20000206 	.word	0x20000206
 8001e08:	20000208 	.word	0x20000208
 8001e0c:	20000201 	.word	0x20000201

08001e10 <USART2_IRQHandler>:
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <USART2_IRQHandler+0x1c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
{
  /* USER CODE BEGIN USART2_IRQn 0 */


	/* RX interrupt */
	if (LL_USART_IsActiveFlag_RXNE(USART2) != RESET)
 8001e14:	f013 0f20 	tst.w	r3, #32
 8001e18:	d006      	beq.n	8001e28 <USART2_IRQHandler+0x18>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <USART2_IRQHandler+0x1c>)
 8001e1c:	685a      	ldr	r2, [r3, #4]
	{
		chRX = LL_USART_ReceiveData8(USART2);
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <USART2_IRQHandler+0x20>)
 8001e20:	701a      	strb	r2, [r3, #0]
		dataReceived = 1;
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <USART2_IRQHandler+0x24>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40004400 	.word	0x40004400
 8001e30:	20000200 	.word	0x20000200
 8001e34:	20000202 	.word	0x20000202

08001e38 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001e38:	2001      	movs	r0, #1
 8001e3a:	4770      	bx	lr

08001e3c <_kill>:

int _kill(int pid, int sig)
{
 8001e3c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001e3e:	f001 f8bf 	bl	8002fc0 <__errno>
 8001e42:	2316      	movs	r3, #22
 8001e44:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001e46:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4a:	bd08      	pop	{r3, pc}

08001e4c <_exit>:

void _exit (int status)
{
 8001e4c:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e52:	f7ff fff3 	bl	8001e3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e56:	e7fe      	b.n	8001e56 <_exit+0xa>

08001e58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e58:	b570      	push	{r4, r5, r6, lr}
 8001e5a:	460c      	mov	r4, r1
 8001e5c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	2500      	movs	r5, #0
 8001e60:	42b5      	cmp	r5, r6
 8001e62:	da07      	bge.n	8001e74 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8001e64:	f3af 8000 	nop.w
 8001e68:	4621      	mov	r1, r4
 8001e6a:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001e70:	460c      	mov	r4, r1
 8001e72:	e7f5      	b.n	8001e60 <_read+0x8>
	}

return len;
}
 8001e74:	4630      	mov	r0, r6
 8001e76:	bd70      	pop	{r4, r5, r6, pc}

08001e78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e78:	b570      	push	{r4, r5, r6, lr}
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	2500      	movs	r5, #0
 8001e80:	42b5      	cmp	r5, r6
 8001e82:	da05      	bge.n	8001e90 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8001e84:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001e88:	f7ff fca0 	bl	80017cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	3501      	adds	r5, #1
 8001e8e:	e7f7      	b.n	8001e80 <_write+0x8>
	}
	return len;
}
 8001e90:	4630      	mov	r0, r6
 8001e92:	bd70      	pop	{r4, r5, r6, pc}

08001e94 <_close>:

int _close(int file)
{
	return -1;
}
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	4770      	bx	lr

08001e9a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001e9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e9e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	4770      	bx	lr

08001ea4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	4770      	bx	lr

08001ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	4770      	bx	lr

08001eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eac:	b510      	push	{r4, lr}
 8001eae:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <_sbrk+0x38>)
 8001eb2:	490d      	ldr	r1, [pc, #52]	; (8001ee8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <_sbrk+0x40>)
 8001eb6:	6800      	ldr	r0, [r0, #0]
 8001eb8:	b140      	cbz	r0, 8001ecc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eba:	480c      	ldr	r0, [pc, #48]	; (8001eec <_sbrk+0x40>)
 8001ebc:	6800      	ldr	r0, [r0, #0]
 8001ebe:	4403      	add	r3, r0
 8001ec0:	1a52      	subs	r2, r2, r1
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d806      	bhi.n	8001ed4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <_sbrk+0x40>)
 8001ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001eca:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <_sbrk+0x40>)
 8001ece:	4c08      	ldr	r4, [pc, #32]	; (8001ef0 <_sbrk+0x44>)
 8001ed0:	6004      	str	r4, [r0, #0]
 8001ed2:	e7f2      	b.n	8001eba <_sbrk+0xe>
    errno = ENOMEM;
 8001ed4:	f001 f874 	bl	8002fc0 <__errno>
 8001ed8:	230c      	movs	r3, #12
 8001eda:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	e7f3      	b.n	8001eca <_sbrk+0x1e>
 8001ee2:	bf00      	nop
 8001ee4:	20020000 	.word	0x20020000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	2000020c 	.word	0x2000020c
 8001ef0:	20000928 	.word	0x20000928

08001ef4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <SystemInit+0x18>)
 8001ef6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001efa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f06:	609a      	str	r2, [r3, #8]
#endif
}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f10:	b530      	push	{r4, r5, lr}
 8001f12:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001f14:	2400      	movs	r4, #0
 8001f16:	9409      	str	r4, [sp, #36]	; 0x24
 8001f18:	940a      	str	r4, [sp, #40]	; 0x28
 8001f1a:	940b      	str	r4, [sp, #44]	; 0x2c
 8001f1c:	940c      	str	r4, [sp, #48]	; 0x30
 8001f1e:	940d      	str	r4, [sp, #52]	; 0x34
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001f20:	2220      	movs	r2, #32
 8001f22:	4621      	mov	r1, r4
 8001f24:	a801      	add	r0, sp, #4
 8001f26:	f001 f883 	bl	8003030 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <MX_TIM3_Init+0x8c>)
 8001f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2e:	f042 0202 	orr.w	r2, r2, #2
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001f3c:	9b00      	ldr	r3, [sp, #0]
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1679;
 8001f3e:	f240 638f 	movw	r3, #1679	; 0x68f
 8001f42:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f46:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_InitStruct.Autoreload = 65535;
 8001f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f4c:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f4e:	940c      	str	r4, [sp, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001f50:	4d13      	ldr	r5, [pc, #76]	; (8001fa0 <MX_TIM3_Init+0x90>)
 8001f52:	a909      	add	r1, sp, #36	; 0x24
 8001f54:	4628      	mov	r0, r5
 8001f56:	f000 fef5 	bl	8002d44 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001f5a:	682b      	ldr	r3, [r5, #0]
 8001f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f60:	602b      	str	r3, [r5, #0]
  LL_TIM_DisableARRPreload(TIM3);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001f62:	9401      	str	r4, [sp, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001f64:	9402      	str	r4, [sp, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001f66:	9403      	str	r4, [sp, #12]
  TIM_OC_InitStruct.CompareValue = 50000;
 8001f68:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001f6c:	9304      	str	r3, [sp, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001f6e:	9405      	str	r4, [sp, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001f70:	aa01      	add	r2, sp, #4
 8001f72:	2101      	movs	r1, #1
 8001f74:	4628      	mov	r0, r5
 8001f76:	f000 ff49 	bl	8002e0c <LL_TIM_OC_Init>
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001f7a:	69ab      	ldr	r3, [r5, #24]
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	61ab      	str	r3, [r5, #24]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001f82:	686b      	ldr	r3, [r5, #4]
 8001f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f8c:	606b      	str	r3, [r5, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001f8e:	68ab      	ldr	r3, [r5, #8]
 8001f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f94:	60ab      	str	r3, [r5, #8]
  LL_TIM_DisableMasterSlaveMode(TIM3);
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f96:	b00f      	add	sp, #60	; 0x3c
 8001f98:	bd30      	pop	{r4, r5, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40000400 	.word	0x40000400

08001fa4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fa4:	b530      	push	{r4, r5, lr}
 8001fa6:	b091      	sub	sp, #68	; 0x44

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001fa8:	2400      	movs	r4, #0
 8001faa:	9409      	str	r4, [sp, #36]	; 0x24
 8001fac:	940a      	str	r4, [sp, #40]	; 0x28
 8001fae:	940b      	str	r4, [sp, #44]	; 0x2c
 8001fb0:	940c      	str	r4, [sp, #48]	; 0x30
 8001fb2:	940d      	str	r4, [sp, #52]	; 0x34
 8001fb4:	940e      	str	r4, [sp, #56]	; 0x38
 8001fb6:	940f      	str	r4, [sp, #60]	; 0x3c
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <MX_USART2_UART_Init+0xa0>)
 8001fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fbc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001fc8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001fca:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001fdc:	9b01      	ldr	r3, [sp, #4]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001fde:	250c      	movs	r5, #12
 8001fe0:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fea:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fec:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001fee:	2307      	movs	r3, #7
 8001ff0:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	eb0d 0105 	add.w	r1, sp, r5
 8001ff6:	4814      	ldr	r0, [pc, #80]	; (8002048 <MX_USART2_UART_Init+0xa4>)
 8001ff8:	f000 fc84 	bl	8002904 <LL_GPIO_Init>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <MX_USART2_UART_Init+0xa8>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_USART2_UART_Init+0xac>)
 8002002:	f883 4326 	strb.w	r4, [r3, #806]	; 0x326
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	605a      	str	r2, [r3, #4]
  NVIC_EnableIRQ(USART2_IRQn);

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800200a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800200e:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002010:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002012:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002014:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002016:	950d      	str	r5, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002018:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800201a:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 800201c:	4c0d      	ldr	r4, [pc, #52]	; (8002054 <MX_USART2_UART_Init+0xb0>)
 800201e:	a909      	add	r1, sp, #36	; 0x24
 8002020:	4620      	mov	r0, r4
 8002022:	f000 ff11 	bl	8002e48 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002026:	6923      	ldr	r3, [r4, #16]
 8002028:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800202c:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800202e:	6963      	ldr	r3, [r4, #20]
 8002030:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002034:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002036:	68e3      	ldr	r3, [r4, #12]
 8002038:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800203c:	60e3      	str	r3, [r4, #12]
  LL_USART_Enable(USART2);
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800203e:	b011      	add	sp, #68	; 0x44
 8002040:	bd30      	pop	{r4, r5, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40020000 	.word	0x40020000
 800204c:	e000ed00 	.word	0xe000ed00
 8002050:	e000e100 	.word	0xe000e100
 8002054:	40004400 	.word	0x40004400

08002058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002090 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800205c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800205e:	e003      	b.n	8002068 <LoopCopyDataInit>

08002060 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002062:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002064:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002066:	3104      	adds	r1, #4

08002068 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002068:	480b      	ldr	r0, [pc, #44]	; (8002098 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800206c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800206e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002070:	d3f6      	bcc.n	8002060 <CopyDataInit>
  ldr  r2, =_sbss
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002074:	e002      	b.n	800207c <LoopFillZerobss>

08002076 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002076:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002078:	f842 3b04 	str.w	r3, [r2], #4

0800207c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800207e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002080:	d3f9      	bcc.n	8002076 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002082:	f7ff ff37 	bl	8001ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002086:	f000 ffa1 	bl	8002fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208a:	f7ff fc1b 	bl	80018c4 <main>
  bx  lr    
 800208e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002090:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002094:	080075e0 	.word	0x080075e0
  ldr  r0, =_sdata
 8002098:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800209c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80020a0:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80020a4:	20000924 	.word	0x20000924

080020a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC_IRQHandler>
	...

080020ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ac:	b510      	push	{r4, lr}
 80020ae:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_InitTick+0x40>)
 80020b2:	7818      	ldrb	r0, [r3, #0]
 80020b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <HAL_InitTick+0x44>)
 80020be:	6810      	ldr	r0, [r2, #0]
 80020c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80020c4:	f000 f88a 	bl	80021dc <HAL_SYSTICK_Config>
 80020c8:	b968      	cbnz	r0, 80020e6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	2c0f      	cmp	r4, #15
 80020cc:	d901      	bls.n	80020d2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80020ce:	2001      	movs	r0, #1
 80020d0:	e00a      	b.n	80020e8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d2:	2200      	movs	r2, #0
 80020d4:	4621      	mov	r1, r4
 80020d6:	f04f 30ff 	mov.w	r0, #4294967295
 80020da:	f000 f84b 	bl	8002174 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_InitTick+0x48>)
 80020e0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020e2:	2000      	movs	r0, #0
 80020e4:	e000      	b.n	80020e8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80020e6:	2001      	movs	r0, #1
}
 80020e8:	bd10      	pop	{r4, pc}
 80020ea:	bf00      	nop
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20000004 	.word	0x20000004
 80020f4:	2000000c 	.word	0x2000000c

080020f8 <HAL_Init>:
{
 80020f8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_Init+0x30>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002102:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800210a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002112:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002114:	2003      	movs	r0, #3
 8002116:	f000 f81b 	bl	8002150 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800211a:	2000      	movs	r0, #0
 800211c:	f7ff ffc6 	bl	80020ac <HAL_InitTick>
  HAL_MspInit();
 8002120:	f7ff fe38 	bl	8001d94 <HAL_MspInit>
}
 8002124:	2000      	movs	r0, #0
 8002126:	bd08      	pop	{r3, pc}
 8002128:	40023c00 	.word	0x40023c00

0800212c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800212c:	4a03      	ldr	r2, [pc, #12]	; (800213c <HAL_IncTick+0x10>)
 800212e:	6811      	ldr	r1, [r2, #0]
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <HAL_IncTick+0x14>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	440b      	add	r3, r1
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000910 	.word	0x20000910
 8002140:	20000008 	.word	0x20000008

08002144 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002144:	4b01      	ldr	r3, [pc, #4]	; (800214c <HAL_GetTick+0x8>)
 8002146:	6818      	ldr	r0, [r3, #0]
}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000910 	.word	0x20000910

08002150 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002152:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002154:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002158:	041b      	lsls	r3, r3, #16
 800215a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	0200      	lsls	r0, r0, #8
 800215e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002162:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800216c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002174:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <HAL_NVIC_SetPriority+0x60>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800217e:	f1c3 0407 	rsb	r4, r3, #7
 8002182:	2c04      	cmp	r4, #4
 8002184:	bf28      	it	cs
 8002186:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002188:	1d1d      	adds	r5, r3, #4
 800218a:	2d06      	cmp	r5, #6
 800218c:	d918      	bls.n	80021c0 <HAL_NVIC_SetPriority+0x4c>
 800218e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 35ff 	mov.w	r5, #4294967295
 8002194:	fa05 f404 	lsl.w	r4, r5, r4
 8002198:	ea21 0104 	bic.w	r1, r1, r4
 800219c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800219e:	fa05 f303 	lsl.w	r3, r5, r3
 80021a2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80021a8:	2800      	cmp	r0, #0
 80021aa:	db0b      	blt.n	80021c4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	0109      	lsls	r1, r1, #4
 80021ae:	b2c9      	uxtb	r1, r1
 80021b0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80021b4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80021b8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80021bc:	bc30      	pop	{r4, r5}
 80021be:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c0:	2300      	movs	r3, #0
 80021c2:	e7e5      	b.n	8002190 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	f000 000f 	and.w	r0, r0, #15
 80021c8:	0109      	lsls	r1, r1, #4
 80021ca:	b2c9      	uxtb	r1, r1
 80021cc:	4b02      	ldr	r3, [pc, #8]	; (80021d8 <HAL_NVIC_SetPriority+0x64>)
 80021ce:	5419      	strb	r1, [r3, r0]
 80021d0:	e7f4      	b.n	80021bc <HAL_NVIC_SetPriority+0x48>
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00
 80021d8:	e000ed14 	.word	0xe000ed14

080021dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	3801      	subs	r0, #1
 80021de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80021e2:	d20a      	bcs.n	80021fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_SYSTICK_Config+0x24>)
 80021e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	4a06      	ldr	r2, [pc, #24]	; (8002204 <HAL_SYSTICK_Config+0x28>)
 80021ea:	21f0      	movs	r1, #240	; 0xf0
 80021ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	2000      	movs	r0, #0
 80021f2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002208:	2800      	cmp	r0, #0
 800220a:	f000 81df 	beq.w	80025cc <HAL_RCC_OscConfig+0x3c4>
{
 800220e:	b570      	push	{r4, r5, r6, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002214:	6803      	ldr	r3, [r0, #0]
 8002216:	f013 0f01 	tst.w	r3, #1
 800221a:	d03b      	beq.n	8002294 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800221c:	4ba6      	ldr	r3, [pc, #664]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b04      	cmp	r3, #4
 8002226:	d02c      	beq.n	8002282 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002228:	4ba3      	ldr	r3, [pc, #652]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002230:	2b08      	cmp	r3, #8
 8002232:	d021      	beq.n	8002278 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002234:	6863      	ldr	r3, [r4, #4]
 8002236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223a:	d04f      	beq.n	80022dc <HAL_RCC_OscConfig+0xd4>
 800223c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002240:	d052      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe0>
 8002242:	4b9d      	ldr	r3, [pc, #628]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002252:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002254:	6863      	ldr	r3, [r4, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d050      	beq.n	80022fc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff ff73 	bl	8002144 <HAL_GetTick>
 800225e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002260:	4b95      	ldr	r3, [pc, #596]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002268:	d114      	bne.n	8002294 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226a:	f7ff ff6b 	bl	8002144 <HAL_GetTick>
 800226e:	1b40      	subs	r0, r0, r5
 8002270:	2864      	cmp	r0, #100	; 0x64
 8002272:	d9f5      	bls.n	8002260 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002274:	2003      	movs	r0, #3
 8002276:	e1b0      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002278:	4b8f      	ldr	r3, [pc, #572]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002280:	d0d8      	beq.n	8002234 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002282:	4b8d      	ldr	r3, [pc, #564]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800228a:	d003      	beq.n	8002294 <HAL_RCC_OscConfig+0x8c>
 800228c:	6863      	ldr	r3, [r4, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 819e 	beq.w	80025d0 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	f013 0f02 	tst.w	r3, #2
 800229a:	d054      	beq.n	8002346 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229c:	4b86      	ldr	r3, [pc, #536]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f013 0f0c 	tst.w	r3, #12
 80022a4:	d03e      	beq.n	8002324 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b84      	ldr	r3, [pc, #528]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d033      	beq.n	800231a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022b2:	68e3      	ldr	r3, [r4, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d067      	beq.n	8002388 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b8:	4b80      	ldr	r3, [pc, #512]	; (80024bc <HAL_RCC_OscConfig+0x2b4>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7ff ff41 	bl	8002144 <HAL_GetTick>
 80022c2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c4:	4b7c      	ldr	r3, [pc, #496]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f013 0f02 	tst.w	r3, #2
 80022cc:	d153      	bne.n	8002376 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff ff39 	bl	8002144 <HAL_GetTick>
 80022d2:	1b40      	subs	r0, r0, r5
 80022d4:	2802      	cmp	r0, #2
 80022d6:	d9f5      	bls.n	80022c4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80022d8:	2003      	movs	r0, #3
 80022da:	e17e      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022dc:	4a76      	ldr	r2, [pc, #472]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 80022de:	6813      	ldr	r3, [r2, #0]
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e7b5      	b.n	8002254 <HAL_RCC_OscConfig+0x4c>
 80022e8:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e7ab      	b.n	8002254 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80022fc:	f7ff ff22 	bl	8002144 <HAL_GetTick>
 8002300:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	4b6d      	ldr	r3, [pc, #436]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800230a:	d0c3      	beq.n	8002294 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff ff1a 	bl	8002144 <HAL_GetTick>
 8002310:	1b40      	subs	r0, r0, r5
 8002312:	2864      	cmp	r0, #100	; 0x64
 8002314:	d9f5      	bls.n	8002302 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002316:	2003      	movs	r0, #3
 8002318:	e15f      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231a:	4b67      	ldr	r3, [pc, #412]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002322:	d1c6      	bne.n	80022b2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002324:	4b64      	ldr	r3, [pc, #400]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f013 0f02 	tst.w	r3, #2
 800232c:	d003      	beq.n	8002336 <HAL_RCC_OscConfig+0x12e>
 800232e:	68e3      	ldr	r3, [r4, #12]
 8002330:	2b01      	cmp	r3, #1
 8002332:	f040 814f 	bne.w	80025d4 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002336:	4a60      	ldr	r2, [pc, #384]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800233e:	6921      	ldr	r1, [r4, #16]
 8002340:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002344:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	f013 0f08 	tst.w	r3, #8
 800234c:	d040      	beq.n	80023d0 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800234e:	6963      	ldr	r3, [r4, #20]
 8002350:	b363      	cbz	r3, 80023ac <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b5b      	ldr	r3, [pc, #364]	; (80024c0 <HAL_RCC_OscConfig+0x2b8>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7ff fef4 	bl	8002144 <HAL_GetTick>
 800235c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	4b56      	ldr	r3, [pc, #344]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002362:	f013 0f02 	tst.w	r3, #2
 8002366:	d133      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002368:	f7ff feec 	bl	8002144 <HAL_GetTick>
 800236c:	1b40      	subs	r0, r0, r5
 800236e:	2802      	cmp	r0, #2
 8002370:	d9f5      	bls.n	800235e <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8002372:	2003      	movs	r0, #3
 8002374:	e131      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4a50      	ldr	r2, [pc, #320]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002378:	6813      	ldr	r3, [r2, #0]
 800237a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800237e:	6921      	ldr	r1, [r4, #16]
 8002380:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e7de      	b.n	8002346 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002388:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <HAL_RCC_OscConfig+0x2b4>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800238e:	f7ff fed9 	bl	8002144 <HAL_GetTick>
 8002392:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002394:	4b48      	ldr	r3, [pc, #288]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f013 0f02 	tst.w	r3, #2
 800239c:	d0d3      	beq.n	8002346 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239e:	f7ff fed1 	bl	8002144 <HAL_GetTick>
 80023a2:	1b40      	subs	r0, r0, r5
 80023a4:	2802      	cmp	r0, #2
 80023a6:	d9f5      	bls.n	8002394 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80023a8:	2003      	movs	r0, #3
 80023aa:	e116      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ac:	4b44      	ldr	r3, [pc, #272]	; (80024c0 <HAL_RCC_OscConfig+0x2b8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7ff fec7 	bl	8002144 <HAL_GetTick>
 80023b6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 80023ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023bc:	f013 0f02 	tst.w	r3, #2
 80023c0:	d006      	beq.n	80023d0 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c2:	f7ff febf 	bl	8002144 <HAL_GetTick>
 80023c6:	1b40      	subs	r0, r0, r5
 80023c8:	2802      	cmp	r0, #2
 80023ca:	d9f5      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80023cc:	2003      	movs	r0, #3
 80023ce:	e104      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	f013 0f04 	tst.w	r3, #4
 80023d6:	d078      	beq.n	80024ca <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d8:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80023e0:	d10d      	bne.n	80023fe <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 80023e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80023fa:	2501      	movs	r5, #1
 80023fc:	e000      	b.n	8002400 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 80023fe:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_RCC_OscConfig+0x2bc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002408:	d021      	beq.n	800244e <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240a:	68a3      	ldr	r3, [r4, #8]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d032      	beq.n	8002476 <HAL_RCC_OscConfig+0x26e>
 8002410:	2b05      	cmp	r3, #5
 8002412:	d036      	beq.n	8002482 <HAL_RCC_OscConfig+0x27a>
 8002414:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002418:	f022 0201 	bic.w	r2, r2, #1
 800241c:	671a      	str	r2, [r3, #112]	; 0x70
 800241e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002420:	f022 0204 	bic.w	r2, r2, #4
 8002424:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002426:	68a3      	ldr	r3, [r4, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d034      	beq.n	8002496 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7ff fe8a 	bl	8002144 <HAL_GetTick>
 8002430:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	f013 0f02 	tst.w	r3, #2
 800243a:	d145      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7ff fe82 	bl	8002144 <HAL_GetTick>
 8002440:	1b80      	subs	r0, r0, r6
 8002442:	f241 3388 	movw	r3, #5000	; 0x1388
 8002446:	4298      	cmp	r0, r3
 8002448:	d9f3      	bls.n	8002432 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800244a:	2003      	movs	r0, #3
 800244c:	e0c5      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <HAL_RCC_OscConfig+0x2bc>)
 8002450:	6813      	ldr	r3, [r2, #0]
 8002452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002456:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002458:	f7ff fe74 	bl	8002144 <HAL_GetTick>
 800245c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_OscConfig+0x2bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002466:	d1d0      	bne.n	800240a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002468:	f7ff fe6c 	bl	8002144 <HAL_GetTick>
 800246c:	1b80      	subs	r0, r0, r6
 800246e:	2802      	cmp	r0, #2
 8002470:	d9f5      	bls.n	800245e <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8002472:	2003      	movs	r0, #3
 8002474:	e0b1      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002476:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002478:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
 8002480:	e7d1      	b.n	8002426 <HAL_RCC_OscConfig+0x21e>
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 8002484:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002486:	f042 0204 	orr.w	r2, r2, #4
 800248a:	671a      	str	r2, [r3, #112]	; 0x70
 800248c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	671a      	str	r2, [r3, #112]	; 0x70
 8002494:	e7c7      	b.n	8002426 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002496:	f7ff fe55 	bl	8002144 <HAL_GetTick>
 800249a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_OscConfig+0x2b0>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	f013 0f02 	tst.w	r3, #2
 80024a4:	d010      	beq.n	80024c8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7ff fe4d 	bl	8002144 <HAL_GetTick>
 80024aa:	1b80      	subs	r0, r0, r6
 80024ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80024b0:	4298      	cmp	r0, r3
 80024b2:	d9f3      	bls.n	800249c <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80024b4:	2003      	movs	r0, #3
 80024b6:	e090      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
 80024b8:	40023800 	.word	0x40023800
 80024bc:	42470000 	.word	0x42470000
 80024c0:	42470e80 	.word	0x42470e80
 80024c4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c8:	b9ed      	cbnz	r5, 8002506 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	69a3      	ldr	r3, [r4, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8083 	beq.w	80025d8 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d2:	4a49      	ldr	r2, [pc, #292]	; (80025f8 <HAL_RCC_OscConfig+0x3f0>)
 80024d4:	6892      	ldr	r2, [r2, #8]
 80024d6:	f002 020c 	and.w	r2, r2, #12
 80024da:	2a08      	cmp	r2, #8
 80024dc:	d051      	beq.n	8002582 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d017      	beq.n	8002512 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b46      	ldr	r3, [pc, #280]	; (80025fc <HAL_RCC_OscConfig+0x3f4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7ff fe2c 	bl	8002144 <HAL_GetTick>
 80024ec:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	4b42      	ldr	r3, [pc, #264]	; (80025f8 <HAL_RCC_OscConfig+0x3f0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024f6:	d042      	beq.n	800257e <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f8:	f7ff fe24 	bl	8002144 <HAL_GetTick>
 80024fc:	1b00      	subs	r0, r0, r4
 80024fe:	2802      	cmp	r0, #2
 8002500:	d9f5      	bls.n	80024ee <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002502:	2003      	movs	r0, #3
 8002504:	e069      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4a3c      	ldr	r2, [pc, #240]	; (80025f8 <HAL_RCC_OscConfig+0x3f0>)
 8002508:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800250a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250e:	6413      	str	r3, [r2, #64]	; 0x40
 8002510:	e7db      	b.n	80024ca <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b3a      	ldr	r3, [pc, #232]	; (80025fc <HAL_RCC_OscConfig+0x3f4>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002518:	f7ff fe14 	bl	8002144 <HAL_GetTick>
 800251c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_RCC_OscConfig+0x3f0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002526:	d006      	beq.n	8002536 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002528:	f7ff fe0c 	bl	8002144 <HAL_GetTick>
 800252c:	1b40      	subs	r0, r0, r5
 800252e:	2802      	cmp	r0, #2
 8002530:	d9f5      	bls.n	800251e <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8002532:	2003      	movs	r0, #3
 8002534:	e051      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002536:	69e3      	ldr	r3, [r4, #28]
 8002538:	6a22      	ldr	r2, [r4, #32]
 800253a:	4313      	orrs	r3, r2
 800253c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800253e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002542:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002544:	0852      	lsrs	r2, r2, #1
 8002546:	3a01      	subs	r2, #1
 8002548:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800254c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800254e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002552:	4a29      	ldr	r2, [pc, #164]	; (80025f8 <HAL_RCC_OscConfig+0x3f0>)
 8002554:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <HAL_RCC_OscConfig+0x3f4>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800255c:	f7ff fdf2 	bl	8002144 <HAL_GetTick>
 8002560:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <HAL_RCC_OscConfig+0x3f0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7ff fdea 	bl	8002144 <HAL_GetTick>
 8002570:	1b00      	subs	r0, r0, r4
 8002572:	2802      	cmp	r0, #2
 8002574:	d9f5      	bls.n	8002562 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002576:	2003      	movs	r0, #3
 8002578:	e02f      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800257a:	2000      	movs	r0, #0
 800257c:	e02d      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
 800257e:	2000      	movs	r0, #0
 8002580:	e02b      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002582:	2b01      	cmp	r3, #1
 8002584:	d02b      	beq.n	80025de <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_RCC_OscConfig+0x3f0>)
 8002588:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800258e:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002590:	4291      	cmp	r1, r2
 8002592:	d126      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002594:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002598:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	428a      	cmp	r2, r1
 800259c:	d123      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800259e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80025a4:	401a      	ands	r2, r3
 80025a6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80025aa:	d11e      	bne.n	80025ea <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ac:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80025b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025b2:	0852      	lsrs	r2, r2, #1
 80025b4:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80025ba:	d118      	bne.n	80025ee <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025bc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80025c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80025c6:	d114      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80025c8:	2000      	movs	r0, #0
 80025ca:	e006      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
}
 80025ce:	4770      	bx	lr
        return HAL_ERROR;
 80025d0:	2001      	movs	r0, #1
 80025d2:	e002      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 80025d4:	2001      	movs	r0, #1
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 80025d8:	2000      	movs	r0, #0
}
 80025da:	b002      	add	sp, #8
 80025dc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80025de:	2001      	movs	r0, #1
 80025e0:	e7fb      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 80025e2:	2001      	movs	r0, #1
 80025e4:	e7f9      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
 80025e6:	2001      	movs	r0, #1
 80025e8:	e7f7      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
 80025ea:	2001      	movs	r0, #1
 80025ec:	e7f5      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
 80025ee:	2001      	movs	r0, #1
 80025f0:	e7f3      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
 80025f2:	2001      	movs	r0, #1
 80025f4:	e7f1      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	42470060 	.word	0x42470060

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002602:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b04      	cmp	r3, #4
 800260c:	d053      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0xb6>
 800260e:	2b08      	cmp	r3, #8
 8002610:	d153      	bne.n	80026ba <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002612:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002620:	d028      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800262a:	0158      	lsls	r0, r3, #5
 800262c:	2100      	movs	r1, #0
 800262e:	1ac0      	subs	r0, r0, r3
 8002630:	f161 0100 	sbc.w	r1, r1, #0
 8002634:	018e      	lsls	r6, r1, #6
 8002636:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 800263a:	0187      	lsls	r7, r0, #6
 800263c:	1a3c      	subs	r4, r7, r0
 800263e:	eb66 0501 	sbc.w	r5, r6, r1
 8002642:	00e9      	lsls	r1, r5, #3
 8002644:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002648:	00e0      	lsls	r0, r4, #3
 800264a:	18c0      	adds	r0, r0, r3
 800264c:	f141 0100 	adc.w	r1, r1, #0
 8002650:	024b      	lsls	r3, r1, #9
 8002652:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002656:	0244      	lsls	r4, r0, #9
 8002658:	4620      	mov	r0, r4
 800265a:	4619      	mov	r1, r3
 800265c:	2300      	movs	r3, #0
 800265e:	f7fe faf3 	bl	8000c48 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002662:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800266a:	3301      	adds	r3, #1
 800266c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800266e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002672:	e023      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800267c:	015c      	lsls	r4, r3, #5
 800267e:	2500      	movs	r5, #0
 8002680:	1ae4      	subs	r4, r4, r3
 8002682:	f165 0500 	sbc.w	r5, r5, #0
 8002686:	01ae      	lsls	r6, r5, #6
 8002688:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 800268c:	01a7      	lsls	r7, r4, #6
 800268e:	1b38      	subs	r0, r7, r4
 8002690:	eb66 0105 	sbc.w	r1, r6, r5
 8002694:	00cc      	lsls	r4, r1, #3
 8002696:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 800269a:	00c5      	lsls	r5, r0, #3
 800269c:	18e8      	adds	r0, r5, r3
 800269e:	f144 0100 	adc.w	r1, r4, #0
 80026a2:	028b      	lsls	r3, r1, #10
 80026a4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80026a8:	0284      	lsls	r4, r0, #10
 80026aa:	4620      	mov	r0, r4
 80026ac:	4619      	mov	r1, r3
 80026ae:	2300      	movs	r3, #0
 80026b0:	f7fe faca 	bl	8000c48 <__aeabi_uldivmod>
 80026b4:	e7d5      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 80026b6:	4803      	ldr	r0, [pc, #12]	; (80026c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026b8:	e000      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ba:	4803      	ldr	r0, [pc, #12]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80026bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	007a1200 	.word	0x007a1200
 80026c8:	00f42400 	.word	0x00f42400

080026cc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80026cc:	2800      	cmp	r0, #0
 80026ce:	f000 809b 	beq.w	8002808 <HAL_RCC_ClockConfig+0x13c>
{
 80026d2:	b570      	push	{r4, r5, r6, lr}
 80026d4:	460d      	mov	r5, r1
 80026d6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d8:	4b4f      	ldr	r3, [pc, #316]	; (8002818 <HAL_RCC_ClockConfig+0x14c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	428b      	cmp	r3, r1
 80026e2:	d208      	bcs.n	80026f6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e4:	b2cb      	uxtb	r3, r1
 80026e6:	4a4c      	ldr	r2, [pc, #304]	; (8002818 <HAL_RCC_ClockConfig+0x14c>)
 80026e8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	6813      	ldr	r3, [r2, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	428b      	cmp	r3, r1
 80026f2:	f040 808b 	bne.w	800280c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	f013 0f02 	tst.w	r3, #2
 80026fc:	d017      	beq.n	800272e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fe:	f013 0f04 	tst.w	r3, #4
 8002702:	d004      	beq.n	800270e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4a45      	ldr	r2, [pc, #276]	; (800281c <HAL_RCC_ClockConfig+0x150>)
 8002706:	6893      	ldr	r3, [r2, #8]
 8002708:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800270c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	f013 0f08 	tst.w	r3, #8
 8002714:	d004      	beq.n	8002720 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002716:	4a41      	ldr	r2, [pc, #260]	; (800281c <HAL_RCC_ClockConfig+0x150>)
 8002718:	6893      	ldr	r3, [r2, #8]
 800271a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800271e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002720:	4a3e      	ldr	r2, [pc, #248]	; (800281c <HAL_RCC_ClockConfig+0x150>)
 8002722:	6893      	ldr	r3, [r2, #8]
 8002724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002728:	68a1      	ldr	r1, [r4, #8]
 800272a:	430b      	orrs	r3, r1
 800272c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	f013 0f01 	tst.w	r3, #1
 8002734:	d032      	beq.n	800279c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002736:	6863      	ldr	r3, [r4, #4]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d021      	beq.n	8002780 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273c:	1e9a      	subs	r2, r3, #2
 800273e:	2a01      	cmp	r2, #1
 8002740:	d925      	bls.n	800278e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4a36      	ldr	r2, [pc, #216]	; (800281c <HAL_RCC_ClockConfig+0x150>)
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	f012 0f02 	tst.w	r2, #2
 800274a:	d061      	beq.n	8002810 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274c:	4933      	ldr	r1, [pc, #204]	; (800281c <HAL_RCC_ClockConfig+0x150>)
 800274e:	688a      	ldr	r2, [r1, #8]
 8002750:	f022 0203 	bic.w	r2, r2, #3
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002758:	f7ff fcf4 	bl	8002144 <HAL_GetTick>
 800275c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b2f      	ldr	r3, [pc, #188]	; (800281c <HAL_RCC_ClockConfig+0x150>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	6862      	ldr	r2, [r4, #4]
 8002768:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800276c:	d016      	beq.n	800279c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276e:	f7ff fce9 	bl	8002144 <HAL_GetTick>
 8002772:	1b80      	subs	r0, r0, r6
 8002774:	f241 3388 	movw	r3, #5000	; 0x1388
 8002778:	4298      	cmp	r0, r3
 800277a:	d9f0      	bls.n	800275e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800277c:	2003      	movs	r0, #3
 800277e:	e042      	b.n	8002806 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002780:	4a26      	ldr	r2, [pc, #152]	; (800281c <HAL_RCC_ClockConfig+0x150>)
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002788:	d1e0      	bne.n	800274c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
 800278c:	e03b      	b.n	8002806 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4a23      	ldr	r2, [pc, #140]	; (800281c <HAL_RCC_ClockConfig+0x150>)
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002796:	d1d9      	bne.n	800274c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002798:	2001      	movs	r0, #1
 800279a:	e034      	b.n	8002806 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_RCC_ClockConfig+0x14c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	42ab      	cmp	r3, r5
 80027a6:	d907      	bls.n	80027b8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a8:	b2ea      	uxtb	r2, r5
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_RCC_ClockConfig+0x14c>)
 80027ac:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	42ab      	cmp	r3, r5
 80027b6:	d12d      	bne.n	8002814 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	f013 0f04 	tst.w	r3, #4
 80027be:	d006      	beq.n	80027ce <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c0:	4a16      	ldr	r2, [pc, #88]	; (800281c <HAL_RCC_ClockConfig+0x150>)
 80027c2:	6893      	ldr	r3, [r2, #8]
 80027c4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80027c8:	68e1      	ldr	r1, [r4, #12]
 80027ca:	430b      	orrs	r3, r1
 80027cc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	f013 0f08 	tst.w	r3, #8
 80027d4:	d007      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d6:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_RCC_ClockConfig+0x150>)
 80027d8:	6893      	ldr	r3, [r2, #8]
 80027da:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80027de:	6921      	ldr	r1, [r4, #16]
 80027e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027e4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027e6:	f7ff ff0b 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_RCC_ClockConfig+0x150>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x154>)
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	40d8      	lsrs	r0, r3
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x158>)
 80027fa:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_RCC_ClockConfig+0x15c>)
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	f7ff fc54 	bl	80020ac <HAL_InitTick>
  return HAL_OK;
 8002804:	2000      	movs	r0, #0
}
 8002806:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002808:	2001      	movs	r0, #1
}
 800280a:	4770      	bx	lr
      return HAL_ERROR;
 800280c:	2001      	movs	r0, #1
 800280e:	e7fa      	b.n	8002806 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002810:	2001      	movs	r0, #1
 8002812:	e7f8      	b.n	8002806 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002814:	2001      	movs	r0, #1
 8002816:	e7f6      	b.n	8002806 <HAL_RCC_ClockConfig+0x13a>
 8002818:	40023c00 	.word	0x40023c00
 800281c:	40023800 	.word	0x40023800
 8002820:	08007124 	.word	0x08007124
 8002824:	20000004 	.word	0x20000004
 8002828:	2000000c 	.word	0x2000000c

0800282c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800282c:	b410      	push	{r4}
 800282e:	4603      	mov	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002830:	7900      	ldrb	r0, [r0, #4]
 8002832:	2800      	cmp	r0, #0
 8002834:	d053      	beq.n	80028de <LL_EXTI_Init+0xb2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	2a00      	cmp	r2, #0
 800283a:	d05e      	beq.n	80028fa <LL_EXTI_Init+0xce>
    {
      switch (EXTI_InitStruct->Mode)
 800283c:	7958      	ldrb	r0, [r3, #5]
 800283e:	2801      	cmp	r0, #1
 8002840:	d018      	beq.n	8002874 <LL_EXTI_Init+0x48>
 8002842:	2802      	cmp	r0, #2
 8002844:	d021      	beq.n	800288a <LL_EXTI_Init+0x5e>
 8002846:	b158      	cbz	r0, 8002860 <LL_EXTI_Init+0x34>
 8002848:	2001      	movs	r0, #1
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800284a:	799a      	ldrb	r2, [r3, #6]
 800284c:	2a00      	cmp	r2, #0
 800284e:	d051      	beq.n	80028f4 <LL_EXTI_Init+0xc8>
      {
        switch (EXTI_InitStruct->Trigger)
 8002850:	2a02      	cmp	r2, #2
 8002852:	d02f      	beq.n	80028b4 <LL_EXTI_Init+0x88>
 8002854:	2a03      	cmp	r2, #3
 8002856:	d038      	beq.n	80028ca <LL_EXTI_Init+0x9e>
 8002858:	2a01      	cmp	r2, #1
 800285a:	d020      	beq.n	800289e <LL_EXTI_Init+0x72>
 800285c:	2001      	movs	r0, #1
 800285e:	e049      	b.n	80028f4 <LL_EXTI_Init+0xc8>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002860:	4927      	ldr	r1, [pc, #156]	; (8002900 <LL_EXTI_Init+0xd4>)
 8002862:	684c      	ldr	r4, [r1, #4]
 8002864:	ea24 0202 	bic.w	r2, r4, r2
 8002868:	604a      	str	r2, [r1, #4]
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800286a:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->IMR, ExtiLine);
 800286c:	680c      	ldr	r4, [r1, #0]
 800286e:	4322      	orrs	r2, r4
 8002870:	600a      	str	r2, [r1, #0]
}
 8002872:	e7ea      	b.n	800284a <LL_EXTI_Init+0x1e>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002874:	4922      	ldr	r1, [pc, #136]	; (8002900 <LL_EXTI_Init+0xd4>)
 8002876:	6808      	ldr	r0, [r1, #0]
 8002878:	ea20 0202 	bic.w	r2, r0, r2
 800287c:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800287e:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002880:	6848      	ldr	r0, [r1, #4]
 8002882:	4302      	orrs	r2, r0
 8002884:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8002886:	2000      	movs	r0, #0
}
 8002888:	e7df      	b.n	800284a <LL_EXTI_Init+0x1e>
  SET_BIT(EXTI->IMR, ExtiLine);
 800288a:	491d      	ldr	r1, [pc, #116]	; (8002900 <LL_EXTI_Init+0xd4>)
 800288c:	6808      	ldr	r0, [r1, #0]
 800288e:	4302      	orrs	r2, r0
 8002890:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002892:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002894:	6848      	ldr	r0, [r1, #4]
 8002896:	4302      	orrs	r2, r0
 8002898:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 800289a:	2000      	movs	r0, #0
}
 800289c:	e7d5      	b.n	800284a <LL_EXTI_Init+0x1e>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800289e:	681c      	ldr	r4, [r3, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80028a0:	4a17      	ldr	r2, [pc, #92]	; (8002900 <LL_EXTI_Init+0xd4>)
 80028a2:	68d1      	ldr	r1, [r2, #12]
 80028a4:	ea21 0104 	bic.w	r1, r1, r4
 80028a8:	60d1      	str	r1, [r2, #12]
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028aa:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80028ac:	6891      	ldr	r1, [r2, #8]
 80028ae:	430b      	orrs	r3, r1
 80028b0:	6093      	str	r3, [r2, #8]
}
 80028b2:	e01f      	b.n	80028f4 <LL_EXTI_Init+0xc8>
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028b4:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <LL_EXTI_Init+0xd4>)
 80028b8:	6891      	ldr	r1, [r2, #8]
 80028ba:	ea21 0104 	bic.w	r1, r1, r4
 80028be:	6091      	str	r1, [r2, #8]
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028c0:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80028c2:	68d1      	ldr	r1, [r2, #12]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	e014      	b.n	80028f4 <LL_EXTI_Init+0xc8>
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028ca:	6819      	ldr	r1, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80028cc:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <LL_EXTI_Init+0xd4>)
 80028ce:	6894      	ldr	r4, [r2, #8]
 80028d0:	4321      	orrs	r1, r4
 80028d2:	6091      	str	r1, [r2, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028d4:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80028d6:	68d1      	ldr	r1, [r2, #12]
 80028d8:	430b      	orrs	r3, r1
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	e00a      	b.n	80028f4 <LL_EXTI_Init+0xc8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80028de:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80028e0:	4a07      	ldr	r2, [pc, #28]	; (8002900 <LL_EXTI_Init+0xd4>)
 80028e2:	6811      	ldr	r1, [r2, #0]
 80028e4:	ea21 0104 	bic.w	r1, r1, r4
 80028e8:	6011      	str	r1, [r2, #0]
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80028ea:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80028ec:	6853      	ldr	r3, [r2, #4]
 80028ee:	ea23 0301 	bic.w	r3, r3, r1
 80028f2:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 80028f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028f8:	4770      	bx	lr
  ErrorStatus status = SUCCESS;
 80028fa:	2000      	movs	r0, #0
 80028fc:	e7fa      	b.n	80028f4 <LL_EXTI_Init+0xc8>
 80028fe:	bf00      	nop
 8002900:	40013c00 	.word	0x40013c00

08002904 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002904:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002906:	680c      	ldr	r4, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	fa94 f4a4 	rbit	r4, r4
 800290c:	fab4 f484 	clz	r4, r4
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002910:	e04a      	b.n	80029a8 <LL_GPIO_Init+0xa4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002912:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002914:	6882      	ldr	r2, [r0, #8]
 8002916:	fa93 f5a3 	rbit	r5, r3
 800291a:	fab5 f585 	clz	r5, r5
 800291e:	006d      	lsls	r5, r5, #1
 8002920:	2703      	movs	r7, #3
 8002922:	fa07 f505 	lsl.w	r5, r7, r5
 8002926:	ea22 0205 	bic.w	r2, r2, r5
 800292a:	fa93 f5a3 	rbit	r5, r3
 800292e:	fab5 f585 	clz	r5, r5
 8002932:	006d      	lsls	r5, r5, #1
 8002934:	fa06 f505 	lsl.w	r5, r6, r5
 8002938:	432a      	orrs	r2, r5
 800293a:	6082      	str	r2, [r0, #8]
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800293c:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800293e:	6842      	ldr	r2, [r0, #4]
 8002940:	ea22 0203 	bic.w	r2, r2, r3
 8002944:	fb03 f505 	mul.w	r5, r3, r5
 8002948:	432a      	orrs	r2, r5
 800294a:	6042      	str	r2, [r0, #4]
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800294c:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800294e:	68c2      	ldr	r2, [r0, #12]
 8002950:	fa93 f5a3 	rbit	r5, r3
 8002954:	fab5 f585 	clz	r5, r5
 8002958:	006d      	lsls	r5, r5, #1
 800295a:	2703      	movs	r7, #3
 800295c:	fa07 f505 	lsl.w	r5, r7, r5
 8002960:	ea22 0205 	bic.w	r2, r2, r5
 8002964:	fa93 f5a3 	rbit	r5, r3
 8002968:	fab5 f585 	clz	r5, r5
 800296c:	006d      	lsls	r5, r5, #1
 800296e:	fa06 f505 	lsl.w	r5, r6, r5
 8002972:	432a      	orrs	r2, r5
 8002974:	60c2      	str	r2, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002976:	684a      	ldr	r2, [r1, #4]
 8002978:	2a02      	cmp	r2, #2
 800297a:	d022      	beq.n	80029c2 <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800297c:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800297e:	6805      	ldr	r5, [r0, #0]
 8002980:	fa93 f6a3 	rbit	r6, r3
 8002984:	fab6 f686 	clz	r6, r6
 8002988:	0076      	lsls	r6, r6, #1
 800298a:	2703      	movs	r7, #3
 800298c:	fa07 f606 	lsl.w	r6, r7, r6
 8002990:	ea25 0506 	bic.w	r5, r5, r6
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	432b      	orrs	r3, r5
 80029a4:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 80029a6:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80029a8:	680b      	ldr	r3, [r1, #0]
 80029aa:	fa33 f204 	lsrs.w	r2, r3, r4
 80029ae:	d03c      	beq.n	8002a2a <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80029b0:	2201      	movs	r2, #1
 80029b2:	40a2      	lsls	r2, r4
    if (currentpin)
 80029b4:	4013      	ands	r3, r2
 80029b6:	d0f6      	beq.n	80029a6 <LL_GPIO_Init+0xa2>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80029b8:	684a      	ldr	r2, [r1, #4]
 80029ba:	3a01      	subs	r2, #1
 80029bc:	2a01      	cmp	r2, #1
 80029be:	d8c5      	bhi.n	800294c <LL_GPIO_Init+0x48>
 80029c0:	e7a7      	b.n	8002912 <LL_GPIO_Init+0xe>
 80029c2:	fa93 f2a3 	rbit	r2, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80029c6:	fab2 f282 	clz	r2, r2
 80029ca:	2a07      	cmp	r2, #7
 80029cc:	d815      	bhi.n	80029fa <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80029ce:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80029d0:	6a02      	ldr	r2, [r0, #32]
 80029d2:	fa93 f5a3 	rbit	r5, r3
 80029d6:	fab5 f585 	clz	r5, r5
 80029da:	00ad      	lsls	r5, r5, #2
 80029dc:	270f      	movs	r7, #15
 80029de:	fa07 f505 	lsl.w	r5, r7, r5
 80029e2:	ea22 0205 	bic.w	r2, r2, r5
 80029e6:	fa93 f5a3 	rbit	r5, r3
 80029ea:	fab5 f585 	clz	r5, r5
 80029ee:	00ad      	lsls	r5, r5, #2
 80029f0:	fa06 f505 	lsl.w	r5, r6, r5
 80029f4:	432a      	orrs	r2, r5
 80029f6:	6202      	str	r2, [r0, #32]
}
 80029f8:	e7c0      	b.n	800297c <LL_GPIO_Init+0x78>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80029fa:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80029fc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80029fe:	0a1a      	lsrs	r2, r3, #8
 8002a00:	fa92 f7a2 	rbit	r7, r2
 8002a04:	fab7 f787 	clz	r7, r7
 8002a08:	00bf      	lsls	r7, r7, #2
 8002a0a:	f04f 0c0f 	mov.w	ip, #15
 8002a0e:	fa0c f707 	lsl.w	r7, ip, r7
 8002a12:	ea26 0607 	bic.w	r6, r6, r7
 8002a16:	fa92 f2a2 	rbit	r2, r2
 8002a1a:	fab2 f282 	clz	r2, r2
 8002a1e:	0092      	lsls	r2, r2, #2
 8002a20:	fa05 f202 	lsl.w	r2, r5, r2
 8002a24:	4332      	orrs	r2, r6
 8002a26:	6242      	str	r2, [r0, #36]	; 0x24
}
 8002a28:	e7a8      	b.n	800297c <LL_GPIO_Init+0x78>
  }

  return (SUCCESS);
}
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002a2e:	4770      	bx	lr

08002a30 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <RCC_GetHCLKClockFreq+0x10>)
 8002a32:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002a34:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a38:	4a02      	ldr	r2, [pc, #8]	; (8002a44 <RCC_GetHCLKClockFreq+0x14>)
 8002a3a:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a3c:	40d8      	lsrs	r0, r3
 8002a3e:	4770      	bx	lr
 8002a40:	40023800 	.word	0x40023800
 8002a44:	08007124 	.word	0x08007124

08002a48 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <RCC_GetPCLK1ClockFreq+0x10>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002a4c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002a50:	4a02      	ldr	r2, [pc, #8]	; (8002a5c <RCC_GetPCLK1ClockFreq+0x14>)
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a54:	40d8      	lsrs	r0, r3
 8002a56:	4770      	bx	lr
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	08007134 	.word	0x08007134

08002a60 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <RCC_GetPCLK2ClockFreq+0x10>)
 8002a62:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002a64:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002a68:	4a02      	ldr	r2, [pc, #8]	; (8002a74 <RCC_GetPCLK2ClockFreq+0x14>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a6c:	40d8      	lsrs	r0, r3
 8002a6e:	4770      	bx	lr
 8002a70:	40023800 	.word	0x40023800
 8002a74:	08007134 	.word	0x08007134

08002a78 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002a80:	b923      	cbnz	r3, 8002a8c <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002a84:	2808      	cmp	r0, #8
 8002a86:	d003      	beq.n	8002a90 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002a88:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8002a8a:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8002a8e:	e7f9      	b.n	8002a84 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002a90:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8002a92:	6850      	ldr	r0, [r2, #4]
 8002a94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002a98:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a9c:	6850      	ldr	r0, [r2, #4]
 8002a9e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002aa2:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002aa6:	6853      	ldr	r3, [r2, #4]
 8002aa8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002aac:	3301      	adds	r3, #1
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	00f42400 	.word	0x00f42400
 8002ac0:	007a1200 	.word	0x007a1200

08002ac4 <RCC_GetSystemClockFreq>:
{
 8002ac4:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <RCC_GetSystemClockFreq+0x24>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d005      	beq.n	8002ade <RCC_GetSystemClockFreq+0x1a>
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d105      	bne.n	8002ae2 <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002ad6:	2008      	movs	r0, #8
 8002ad8:	f7ff ffce 	bl	8002a78 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8002adc:	e002      	b.n	8002ae4 <RCC_GetSystemClockFreq+0x20>
      frequency = HSE_VALUE;
 8002ade:	4803      	ldr	r0, [pc, #12]	; (8002aec <RCC_GetSystemClockFreq+0x28>)
 8002ae0:	e000      	b.n	8002ae4 <RCC_GetSystemClockFreq+0x20>
  switch (LL_RCC_GetSysClkSource())
 8002ae2:	4803      	ldr	r0, [pc, #12]	; (8002af0 <RCC_GetSystemClockFreq+0x2c>)
}
 8002ae4:	bd08      	pop	{r3, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	007a1200 	.word	0x007a1200
 8002af0:	00f42400 	.word	0x00f42400

08002af4 <LL_RCC_GetSystemClocksFreq>:
{
 8002af4:	b510      	push	{r4, lr}
 8002af6:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002af8:	f7ff ffe4 	bl	8002ac4 <RCC_GetSystemClockFreq>
 8002afc:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002afe:	f7ff ff97 	bl	8002a30 <RCC_GetHCLKClockFreq>
 8002b02:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002b04:	f7ff ffa0 	bl	8002a48 <RCC_GetPCLK1ClockFreq>
 8002b08:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002b0a:	6860      	ldr	r0, [r4, #4]
 8002b0c:	f7ff ffa8 	bl	8002a60 <RCC_GetPCLK2ClockFreq>
 8002b10:	60e0      	str	r0, [r4, #12]
}
 8002b12:	bd10      	pop	{r4, pc}

08002b14 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002b14:	4602      	mov	r2, r0
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002b16:	6803      	ldr	r3, [r0, #0]
 8002b18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b1c:	d12e      	bne.n	8002b7c <LL_SPI_Init+0x68>
 8002b1e:	b410      	push	{r4}
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002b20:	6800      	ldr	r0, [r0, #0]
 8002b22:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 8002b26:	f020 00bf 	bic.w	r0, r0, #191	; 0xbf
 8002b2a:	680b      	ldr	r3, [r1, #0]
 8002b2c:	684c      	ldr	r4, [r1, #4]
 8002b2e:	4323      	orrs	r3, r4
 8002b30:	688c      	ldr	r4, [r1, #8]
 8002b32:	4323      	orrs	r3, r4
 8002b34:	68cc      	ldr	r4, [r1, #12]
 8002b36:	4323      	orrs	r3, r4
 8002b38:	690c      	ldr	r4, [r1, #16]
 8002b3a:	4323      	orrs	r3, r4
 8002b3c:	694c      	ldr	r4, [r1, #20]
 8002b3e:	4323      	orrs	r3, r4
 8002b40:	698c      	ldr	r4, [r1, #24]
 8002b42:	4323      	orrs	r3, r4
 8002b44:	69cc      	ldr	r4, [r1, #28]
 8002b46:	4323      	orrs	r3, r4
 8002b48:	6a0c      	ldr	r4, [r1, #32]
 8002b4a:	4323      	orrs	r3, r4
 8002b4c:	4303      	orrs	r3, r0
 8002b4e:	6013      	str	r3, [r2, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002b50:	6853      	ldr	r3, [r2, #4]
 8002b52:	f023 0304 	bic.w	r3, r3, #4
 8002b56:	8ac8      	ldrh	r0, [r1, #22]
 8002b58:	4303      	orrs	r3, r0
 8002b5a:	6053      	str	r3, [r2, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002b5c:	6a0b      	ldr	r3, [r1, #32]
 8002b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b62:	d007      	beq.n	8002b74 <LL_SPI_Init+0x60>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8002b64:	2000      	movs	r0, #0
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b66:	69d3      	ldr	r3, [r2, #28]
 8002b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b6c:	61d3      	str	r3, [r2, #28]
  return status;
}
 8002b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b72:	4770      	bx	lr
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002b74:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 8002b76:	6113      	str	r3, [r2, #16]
    status = SUCCESS;
 8002b78:	2000      	movs	r0, #0
}
 8002b7a:	e7f4      	b.n	8002b66 <LL_SPI_Init+0x52>
  ErrorStatus status = ERROR;
 8002b7c:	2001      	movs	r0, #1
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b7e:	69d3      	ldr	r3, [r2, #28]
 8002b80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b84:	61d3      	str	r3, [r2, #28]
}
 8002b86:	4770      	bx	lr

08002b88 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b88:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002b8a:	6a03      	ldr	r3, [r0, #32]
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b92:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b94:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002b96:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002b98:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002b9c:	680d      	ldr	r5, [r1, #0]
 8002b9e:	432c      	orrs	r4, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002ba0:	f023 0302 	bic.w	r3, r3, #2
 8002ba4:	690d      	ldr	r5, [r1, #16]
 8002ba6:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	684d      	ldr	r5, [r1, #4]
 8002bae:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb0:	4d10      	ldr	r5, [pc, #64]	; (8002bf4 <OC1Config+0x6c>)
 8002bb2:	42a8      	cmp	r0, r5
 8002bb4:	d003      	beq.n	8002bbe <OC1Config+0x36>
 8002bb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002bba:	42a8      	cmp	r0, r5
 8002bbc:	d112      	bne.n	8002be4 <OC1Config+0x5c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002bbe:	f023 0308 	bic.w	r3, r3, #8
 8002bc2:	694d      	ldr	r5, [r1, #20]
 8002bc4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	688d      	ldr	r5, [r1, #8]
 8002bce:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd6:	698d      	ldr	r5, [r1, #24]
 8002bd8:	432a      	orrs	r2, r5

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002bda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bde:	69cd      	ldr	r5, [r1, #28]
 8002be0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002be4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002be6:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002be8:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002bea:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002bec:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8002bee:	2000      	movs	r0, #0
 8002bf0:	bc30      	pop	{r4, r5}
 8002bf2:	4770      	bx	lr
 8002bf4:	40010000 	.word	0x40010000

08002bf8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002bf8:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002bfa:	6a03      	ldr	r3, [r0, #32]
 8002bfc:	f023 0310 	bic.w	r3, r3, #16
 8002c00:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c02:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c04:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002c06:	6984      	ldr	r4, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002c08:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8002c0c:	680d      	ldr	r5, [r1, #0]
 8002c0e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002c12:	f023 0320 	bic.w	r3, r3, #32
 8002c16:	690d      	ldr	r5, [r1, #16]
 8002c18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002c1c:	f023 0310 	bic.w	r3, r3, #16
 8002c20:	684d      	ldr	r5, [r1, #4]
 8002c22:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c26:	4d11      	ldr	r5, [pc, #68]	; (8002c6c <OC2Config+0x74>)
 8002c28:	42a8      	cmp	r0, r5
 8002c2a:	d003      	beq.n	8002c34 <OC2Config+0x3c>
 8002c2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c30:	42a8      	cmp	r0, r5
 8002c32:	d113      	bne.n	8002c5c <OC2Config+0x64>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c38:	694d      	ldr	r5, [r1, #20]
 8002c3a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c42:	688d      	ldr	r5, [r1, #8]
 8002c44:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4c:	698d      	ldr	r5, [r1, #24]
 8002c4e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c56:	69cd      	ldr	r5, [r1, #28]
 8002c58:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c5c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c5e:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002c60:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c62:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c64:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8002c66:	2000      	movs	r0, #0
 8002c68:	bc30      	pop	{r4, r5}
 8002c6a:	4770      	bx	lr
 8002c6c:	40010000 	.word	0x40010000

08002c70 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c70:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002c72:	6a03      	ldr	r3, [r0, #32]
 8002c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c78:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c7a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c7c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c7e:	69c4      	ldr	r4, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002c80:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8002c84:	680d      	ldr	r5, [r1, #0]
 8002c86:	432c      	orrs	r4, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c8c:	690d      	ldr	r5, [r1, #16]
 8002c8e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c96:	684d      	ldr	r5, [r1, #4]
 8002c98:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9c:	4d11      	ldr	r5, [pc, #68]	; (8002ce4 <OC3Config+0x74>)
 8002c9e:	42a8      	cmp	r0, r5
 8002ca0:	d003      	beq.n	8002caa <OC3Config+0x3a>
 8002ca2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ca6:	42a8      	cmp	r0, r5
 8002ca8:	d113      	bne.n	8002cd2 <OC3Config+0x62>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cae:	694d      	ldr	r5, [r1, #20]
 8002cb0:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002cb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cb8:	688d      	ldr	r5, [r1, #8]
 8002cba:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002cbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cc2:	698d      	ldr	r5, [r1, #24]
 8002cc4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002cc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ccc:	69cd      	ldr	r5, [r1, #28]
 8002cce:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002cd2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002cd4:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002cd6:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002cd8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002cda:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8002cdc:	2000      	movs	r0, #0
 8002cde:	bc30      	pop	{r4, r5}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40010000 	.word	0x40010000

08002ce8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ce8:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002cea:	6a03      	ldr	r3, [r0, #32]
 8002cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cf0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002cf2:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002cf4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002cf6:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002cf8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8002cfc:	680d      	ldr	r5, [r1, #0]
 8002cfe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d06:	690d      	ldr	r5, [r1, #16]
 8002d08:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d10:	684d      	ldr	r5, [r1, #4]
 8002d12:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d16:	4d0a      	ldr	r5, [pc, #40]	; (8002d40 <OC4Config+0x58>)
 8002d18:	42a8      	cmp	r0, r5
 8002d1a:	d003      	beq.n	8002d24 <OC4Config+0x3c>
 8002d1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d20:	42a8      	cmp	r0, r5
 8002d22:	d104      	bne.n	8002d2e <OC4Config+0x46>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002d24:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8002d28:	698d      	ldr	r5, [r1, #24]
 8002d2a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d2e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002d30:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002d32:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002d34:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d36:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8002d38:	2000      	movs	r0, #0
 8002d3a:	bc30      	pop	{r4, r5}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40010000 	.word	0x40010000

08002d44 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002d44:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d46:	4a30      	ldr	r2, [pc, #192]	; (8002e08 <LL_TIM_Init+0xc4>)
 8002d48:	4290      	cmp	r0, r2
 8002d4a:	d012      	beq.n	8002d72 <LL_TIM_Init+0x2e>
 8002d4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d50:	d00f      	beq.n	8002d72 <LL_TIM_Init+0x2e>
 8002d52:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d56:	4290      	cmp	r0, r2
 8002d58:	d00b      	beq.n	8002d72 <LL_TIM_Init+0x2e>
 8002d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d5e:	4290      	cmp	r0, r2
 8002d60:	d007      	beq.n	8002d72 <LL_TIM_Init+0x2e>
 8002d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d66:	4290      	cmp	r0, r2
 8002d68:	d003      	beq.n	8002d72 <LL_TIM_Init+0x2e>
 8002d6a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002d6e:	4290      	cmp	r0, r2
 8002d70:	d103      	bne.n	8002d7a <LL_TIM_Init+0x36>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d76:	684a      	ldr	r2, [r1, #4]
 8002d78:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d7a:	4a23      	ldr	r2, [pc, #140]	; (8002e08 <LL_TIM_Init+0xc4>)
 8002d7c:	4290      	cmp	r0, r2
 8002d7e:	d02a      	beq.n	8002dd6 <LL_TIM_Init+0x92>
 8002d80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d84:	d027      	beq.n	8002dd6 <LL_TIM_Init+0x92>
 8002d86:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d8a:	4290      	cmp	r0, r2
 8002d8c:	d023      	beq.n	8002dd6 <LL_TIM_Init+0x92>
 8002d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d92:	4290      	cmp	r0, r2
 8002d94:	d01f      	beq.n	8002dd6 <LL_TIM_Init+0x92>
 8002d96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d9a:	4290      	cmp	r0, r2
 8002d9c:	d01b      	beq.n	8002dd6 <LL_TIM_Init+0x92>
 8002d9e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002da2:	4290      	cmp	r0, r2
 8002da4:	d017      	beq.n	8002dd6 <LL_TIM_Init+0x92>
 8002da6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002daa:	4290      	cmp	r0, r2
 8002dac:	d013      	beq.n	8002dd6 <LL_TIM_Init+0x92>
 8002dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002db2:	4290      	cmp	r0, r2
 8002db4:	d00f      	beq.n	8002dd6 <LL_TIM_Init+0x92>
 8002db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dba:	4290      	cmp	r0, r2
 8002dbc:	d00b      	beq.n	8002dd6 <LL_TIM_Init+0x92>
 8002dbe:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002dc2:	4290      	cmp	r0, r2
 8002dc4:	d007      	beq.n	8002dd6 <LL_TIM_Init+0x92>
 8002dc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dca:	4290      	cmp	r0, r2
 8002dcc:	d003      	beq.n	8002dd6 <LL_TIM_Init+0x92>
 8002dce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dd2:	4290      	cmp	r0, r2
 8002dd4:	d103      	bne.n	8002dde <LL_TIM_Init+0x9a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dda:	68ca      	ldr	r2, [r1, #12]
 8002ddc:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002dde:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002de0:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002de2:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002de4:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002de6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de8:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <LL_TIM_Init+0xc4>)
 8002dea:	4298      	cmp	r0, r3
 8002dec:	d003      	beq.n	8002df6 <LL_TIM_Init+0xb2>
 8002dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002df2:	4298      	cmp	r0, r3
 8002df4:	d101      	bne.n	8002dfa <LL_TIM_Init+0xb6>
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002df6:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002df8:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002dfa:	6943      	ldr	r3, [r0, #20]
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6143      	str	r3, [r0, #20]
}
 8002e02:	2000      	movs	r0, #0
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40010000 	.word	0x40010000

08002e0c <LL_TIM_OC_Init>:
{
 8002e0c:	b508      	push	{r3, lr}
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4611      	mov	r1, r2
  switch (Channel)
 8002e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e16:	d014      	beq.n	8002e42 <LL_TIM_OC_Init+0x36>
 8002e18:	d808      	bhi.n	8002e2c <LL_TIM_OC_Init+0x20>
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d00e      	beq.n	8002e3c <LL_TIM_OC_Init+0x30>
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d102      	bne.n	8002e28 <LL_TIM_OC_Init+0x1c>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002e22:	f7ff fee9 	bl	8002bf8 <OC2Config>
      break;
 8002e26:	e008      	b.n	8002e3a <LL_TIM_OC_Init+0x2e>
  switch (Channel)
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e006      	b.n	8002e3a <LL_TIM_OC_Init+0x2e>
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e30:	d102      	bne.n	8002e38 <LL_TIM_OC_Init+0x2c>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002e32:	f7ff ff59 	bl	8002ce8 <OC4Config>
      break;
 8002e36:	e000      	b.n	8002e3a <LL_TIM_OC_Init+0x2e>
  switch (Channel)
 8002e38:	2001      	movs	r0, #1
}
 8002e3a:	bd08      	pop	{r3, pc}
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002e3c:	f7ff fea4 	bl	8002b88 <OC1Config>
      break;
 8002e40:	e7fb      	b.n	8002e3a <LL_TIM_OC_Init+0x2e>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002e42:	f7ff ff15 	bl	8002c70 <OC3Config>
      break;
 8002e46:	e7f8      	b.n	8002e3a <LL_TIM_OC_Init+0x2e>

08002e48 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002e48:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002e4a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002e4e:	d001      	beq.n	8002e54 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8002e50:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8002e52:	4770      	bx	lr
{
 8002e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e56:	b085      	sub	sp, #20
 8002e58:	4604      	mov	r4, r0
 8002e5a:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8002e5c:	68c3      	ldr	r3, [r0, #12]
 8002e5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e62:	f023 030c 	bic.w	r3, r3, #12
 8002e66:	684a      	ldr	r2, [r1, #4]
 8002e68:	68c9      	ldr	r1, [r1, #12]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	6929      	ldr	r1, [r5, #16]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	69a9      	ldr	r1, [r5, #24]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002e78:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002e7a:	6902      	ldr	r2, [r0, #16]
 8002e7c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e80:	4313      	orrs	r3, r2
 8002e82:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002e84:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002e86:	6942      	ldr	r2, [r0, #20]
 8002e88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002e90:	4668      	mov	r0, sp
 8002e92:	f7ff fe2f 	bl	8002af4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002e96:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <LL_USART_Init+0x15c>)
 8002e98:	429c      	cmp	r4, r3
 8002e9a:	d010      	beq.n	8002ebe <LL_USART_Init+0x76>
    else if (USARTx == USART2)
 8002e9c:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <LL_USART_Init+0x160>)
 8002e9e:	429c      	cmp	r4, r3
 8002ea0:	d014      	beq.n	8002ecc <LL_USART_Init+0x84>
    else if (USARTx == USART3)
 8002ea2:	4b42      	ldr	r3, [pc, #264]	; (8002fac <LL_USART_Init+0x164>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	d013      	beq.n	8002ed0 <LL_USART_Init+0x88>
    else if (USARTx == USART6)
 8002ea8:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <LL_USART_Init+0x168>)
 8002eaa:	429c      	cmp	r4, r3
 8002eac:	d012      	beq.n	8002ed4 <LL_USART_Init+0x8c>
    else if (USARTx == UART4)
 8002eae:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <LL_USART_Init+0x16c>)
 8002eb0:	429c      	cmp	r4, r3
 8002eb2:	d011      	beq.n	8002ed8 <LL_USART_Init+0x90>
    else if (USARTx == UART5)
 8002eb4:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <LL_USART_Init+0x170>)
 8002eb6:	429c      	cmp	r4, r3
 8002eb8:	d010      	beq.n	8002edc <LL_USART_Init+0x94>
  ErrorStatus status = ERROR;
 8002eba:	2001      	movs	r0, #1
 8002ebc:	e070      	b.n	8002fa0 <LL_USART_Init+0x158>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002ebe:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d06c      	beq.n	8002f9e <LL_USART_Init+0x156>
        && (USART_InitStruct->BaudRate != 0U))
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	b95b      	cbnz	r3, 8002ee0 <LL_USART_Init+0x98>
  ErrorStatus status = ERROR;
 8002ec8:	2001      	movs	r0, #1
 8002eca:	e069      	b.n	8002fa0 <LL_USART_Init+0x158>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002ecc:	9802      	ldr	r0, [sp, #8]
 8002ece:	e7f7      	b.n	8002ec0 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002ed0:	9802      	ldr	r0, [sp, #8]
 8002ed2:	e7f5      	b.n	8002ec0 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002ed4:	9803      	ldr	r0, [sp, #12]
 8002ed6:	e7f3      	b.n	8002ec0 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002ed8:	9802      	ldr	r0, [sp, #8]
 8002eda:	e7f1      	b.n	8002ec0 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002edc:	9802      	ldr	r0, [sp, #8]
 8002ede:	e7ef      	b.n	8002ec0 <LL_USART_Init+0x78>
      LL_USART_SetBaudRate(USARTx,
 8002ee0:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002ee2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002ee6:	d02c      	beq.n	8002f42 <LL_USART_Init+0xfa>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002ee8:	2600      	movs	r6, #0
 8002eea:	1805      	adds	r5, r0, r0
 8002eec:	eb46 0106 	adc.w	r1, r6, r6
 8002ef0:	182d      	adds	r5, r5, r0
 8002ef2:	eb46 0101 	adc.w	r1, r6, r1
 8002ef6:	00ca      	lsls	r2, r1, #3
 8002ef8:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8002efc:	00ef      	lsls	r7, r5, #3
 8002efe:	4611      	mov	r1, r2
 8002f00:	009a      	lsls	r2, r3, #2
 8002f02:	0f9b      	lsrs	r3, r3, #30
 8002f04:	1838      	adds	r0, r7, r0
 8002f06:	eb46 0101 	adc.w	r1, r6, r1
 8002f0a:	f7fd fe9d 	bl	8000c48 <__aeabi_uldivmod>
 8002f0e:	492b      	ldr	r1, [pc, #172]	; (8002fbc <LL_USART_Init+0x174>)
 8002f10:	fba1 3200 	umull	r3, r2, r1, r0
 8002f14:	0953      	lsrs	r3, r2, #5
 8002f16:	011a      	lsls	r2, r3, #4
 8002f18:	b292      	uxth	r2, r2
 8002f1a:	2564      	movs	r5, #100	; 0x64
 8002f1c:	fb05 0313 	mls	r3, r5, r3, r0
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	3332      	adds	r3, #50	; 0x32
 8002f24:	fba1 1303 	umull	r1, r3, r1, r3
 8002f28:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8002f2c:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8002f30:	440a      	add	r2, r1
 8002f32:	b292      	uxth	r2, r2
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	4413      	add	r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8002f3e:	2000      	movs	r0, #0
}
 8002f40:	e02e      	b.n	8002fa0 <LL_USART_Init+0x158>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002f42:	2600      	movs	r6, #0
 8002f44:	1805      	adds	r5, r0, r0
 8002f46:	eb46 0106 	adc.w	r1, r6, r6
 8002f4a:	182d      	adds	r5, r5, r0
 8002f4c:	eb46 0101 	adc.w	r1, r6, r1
 8002f50:	00ca      	lsls	r2, r1, #3
 8002f52:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8002f56:	00ef      	lsls	r7, r5, #3
 8002f58:	4611      	mov	r1, r2
 8002f5a:	18da      	adds	r2, r3, r3
 8002f5c:	eb46 0306 	adc.w	r3, r6, r6
 8002f60:	1838      	adds	r0, r7, r0
 8002f62:	eb46 0101 	adc.w	r1, r6, r1
 8002f66:	f7fd fe6f 	bl	8000c48 <__aeabi_uldivmod>
 8002f6a:	4914      	ldr	r1, [pc, #80]	; (8002fbc <LL_USART_Init+0x174>)
 8002f6c:	fba1 3200 	umull	r3, r2, r1, r0
 8002f70:	0953      	lsrs	r3, r2, #5
 8002f72:	011a      	lsls	r2, r3, #4
 8002f74:	b292      	uxth	r2, r2
 8002f76:	2564      	movs	r5, #100	; 0x64
 8002f78:	fb05 0313 	mls	r3, r5, r3, r0
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	3332      	adds	r3, #50	; 0x32
 8002f80:	fba1 1303 	umull	r1, r3, r1, r3
 8002f84:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8002f88:	0059      	lsls	r1, r3, #1
 8002f8a:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 8002f8e:	440a      	add	r2, r1
 8002f90:	b292      	uxth	r2, r2
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	4413      	add	r3, r2
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	60a3      	str	r3, [r4, #8]
 8002f9c:	e7cf      	b.n	8002f3e <LL_USART_Init+0xf6>
  ErrorStatus status = ERROR;
 8002f9e:	2001      	movs	r0, #1
}
 8002fa0:	b005      	add	sp, #20
 8002fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa4:	40011000 	.word	0x40011000
 8002fa8:	40004400 	.word	0x40004400
 8002fac:	40004800 	.word	0x40004800
 8002fb0:	40011400 	.word	0x40011400
 8002fb4:	40004c00 	.word	0x40004c00
 8002fb8:	40005000 	.word	0x40005000
 8002fbc:	51eb851f 	.word	0x51eb851f

08002fc0 <__errno>:
 8002fc0:	4b01      	ldr	r3, [pc, #4]	; (8002fc8 <__errno+0x8>)
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000010 	.word	0x20000010

08002fcc <__libc_init_array>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	4d0d      	ldr	r5, [pc, #52]	; (8003004 <__libc_init_array+0x38>)
 8002fd0:	4c0d      	ldr	r4, [pc, #52]	; (8003008 <__libc_init_array+0x3c>)
 8002fd2:	1b64      	subs	r4, r4, r5
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	42a6      	cmp	r6, r4
 8002fda:	d109      	bne.n	8002ff0 <__libc_init_array+0x24>
 8002fdc:	4d0b      	ldr	r5, [pc, #44]	; (800300c <__libc_init_array+0x40>)
 8002fde:	4c0c      	ldr	r4, [pc, #48]	; (8003010 <__libc_init_array+0x44>)
 8002fe0:	f003 ffd4 	bl	8006f8c <_init>
 8002fe4:	1b64      	subs	r4, r4, r5
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	2600      	movs	r6, #0
 8002fea:	42a6      	cmp	r6, r4
 8002fec:	d105      	bne.n	8002ffa <__libc_init_array+0x2e>
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff4:	4798      	blx	r3
 8002ff6:	3601      	adds	r6, #1
 8002ff8:	e7ee      	b.n	8002fd8 <__libc_init_array+0xc>
 8002ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffe:	4798      	blx	r3
 8003000:	3601      	adds	r6, #1
 8003002:	e7f2      	b.n	8002fea <__libc_init_array+0x1e>
 8003004:	080075d8 	.word	0x080075d8
 8003008:	080075d8 	.word	0x080075d8
 800300c:	080075d8 	.word	0x080075d8
 8003010:	080075dc 	.word	0x080075dc

08003014 <memcpy>:
 8003014:	440a      	add	r2, r1
 8003016:	4291      	cmp	r1, r2
 8003018:	f100 33ff 	add.w	r3, r0, #4294967295
 800301c:	d100      	bne.n	8003020 <memcpy+0xc>
 800301e:	4770      	bx	lr
 8003020:	b510      	push	{r4, lr}
 8003022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800302a:	4291      	cmp	r1, r2
 800302c:	d1f9      	bne.n	8003022 <memcpy+0xe>
 800302e:	bd10      	pop	{r4, pc}

08003030 <memset>:
 8003030:	4402      	add	r2, r0
 8003032:	4603      	mov	r3, r0
 8003034:	4293      	cmp	r3, r2
 8003036:	d100      	bne.n	800303a <memset+0xa>
 8003038:	4770      	bx	lr
 800303a:	f803 1b01 	strb.w	r1, [r3], #1
 800303e:	e7f9      	b.n	8003034 <memset+0x4>

08003040 <__cvt>:
 8003040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003044:	ec55 4b10 	vmov	r4, r5, d0
 8003048:	2d00      	cmp	r5, #0
 800304a:	460e      	mov	r6, r1
 800304c:	4619      	mov	r1, r3
 800304e:	462b      	mov	r3, r5
 8003050:	bfbb      	ittet	lt
 8003052:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003056:	461d      	movlt	r5, r3
 8003058:	2300      	movge	r3, #0
 800305a:	232d      	movlt	r3, #45	; 0x2d
 800305c:	700b      	strb	r3, [r1, #0]
 800305e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003060:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003064:	4691      	mov	r9, r2
 8003066:	f023 0820 	bic.w	r8, r3, #32
 800306a:	bfbc      	itt	lt
 800306c:	4622      	movlt	r2, r4
 800306e:	4614      	movlt	r4, r2
 8003070:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003074:	d005      	beq.n	8003082 <__cvt+0x42>
 8003076:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800307a:	d100      	bne.n	800307e <__cvt+0x3e>
 800307c:	3601      	adds	r6, #1
 800307e:	2102      	movs	r1, #2
 8003080:	e000      	b.n	8003084 <__cvt+0x44>
 8003082:	2103      	movs	r1, #3
 8003084:	ab03      	add	r3, sp, #12
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	ab02      	add	r3, sp, #8
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	ec45 4b10 	vmov	d0, r4, r5
 8003090:	4653      	mov	r3, sl
 8003092:	4632      	mov	r2, r6
 8003094:	f000 fe18 	bl	8003cc8 <_dtoa_r>
 8003098:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800309c:	4607      	mov	r7, r0
 800309e:	d102      	bne.n	80030a6 <__cvt+0x66>
 80030a0:	f019 0f01 	tst.w	r9, #1
 80030a4:	d022      	beq.n	80030ec <__cvt+0xac>
 80030a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80030aa:	eb07 0906 	add.w	r9, r7, r6
 80030ae:	d110      	bne.n	80030d2 <__cvt+0x92>
 80030b0:	783b      	ldrb	r3, [r7, #0]
 80030b2:	2b30      	cmp	r3, #48	; 0x30
 80030b4:	d10a      	bne.n	80030cc <__cvt+0x8c>
 80030b6:	2200      	movs	r2, #0
 80030b8:	2300      	movs	r3, #0
 80030ba:	4620      	mov	r0, r4
 80030bc:	4629      	mov	r1, r5
 80030be:	f7fd fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 80030c2:	b918      	cbnz	r0, 80030cc <__cvt+0x8c>
 80030c4:	f1c6 0601 	rsb	r6, r6, #1
 80030c8:	f8ca 6000 	str.w	r6, [sl]
 80030cc:	f8da 3000 	ldr.w	r3, [sl]
 80030d0:	4499      	add	r9, r3
 80030d2:	2200      	movs	r2, #0
 80030d4:	2300      	movs	r3, #0
 80030d6:	4620      	mov	r0, r4
 80030d8:	4629      	mov	r1, r5
 80030da:	f7fd fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80030de:	b108      	cbz	r0, 80030e4 <__cvt+0xa4>
 80030e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80030e4:	2230      	movs	r2, #48	; 0x30
 80030e6:	9b03      	ldr	r3, [sp, #12]
 80030e8:	454b      	cmp	r3, r9
 80030ea:	d307      	bcc.n	80030fc <__cvt+0xbc>
 80030ec:	9b03      	ldr	r3, [sp, #12]
 80030ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030f0:	1bdb      	subs	r3, r3, r7
 80030f2:	4638      	mov	r0, r7
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	b004      	add	sp, #16
 80030f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030fc:	1c59      	adds	r1, r3, #1
 80030fe:	9103      	str	r1, [sp, #12]
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e7f0      	b.n	80030e6 <__cvt+0xa6>

08003104 <__exponent>:
 8003104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003106:	4603      	mov	r3, r0
 8003108:	2900      	cmp	r1, #0
 800310a:	bfb8      	it	lt
 800310c:	4249      	neglt	r1, r1
 800310e:	f803 2b02 	strb.w	r2, [r3], #2
 8003112:	bfb4      	ite	lt
 8003114:	222d      	movlt	r2, #45	; 0x2d
 8003116:	222b      	movge	r2, #43	; 0x2b
 8003118:	2909      	cmp	r1, #9
 800311a:	7042      	strb	r2, [r0, #1]
 800311c:	dd2a      	ble.n	8003174 <__exponent+0x70>
 800311e:	f10d 0407 	add.w	r4, sp, #7
 8003122:	46a4      	mov	ip, r4
 8003124:	270a      	movs	r7, #10
 8003126:	46a6      	mov	lr, r4
 8003128:	460a      	mov	r2, r1
 800312a:	fb91 f6f7 	sdiv	r6, r1, r7
 800312e:	fb07 1516 	mls	r5, r7, r6, r1
 8003132:	3530      	adds	r5, #48	; 0x30
 8003134:	2a63      	cmp	r2, #99	; 0x63
 8003136:	f104 34ff 	add.w	r4, r4, #4294967295
 800313a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800313e:	4631      	mov	r1, r6
 8003140:	dcf1      	bgt.n	8003126 <__exponent+0x22>
 8003142:	3130      	adds	r1, #48	; 0x30
 8003144:	f1ae 0502 	sub.w	r5, lr, #2
 8003148:	f804 1c01 	strb.w	r1, [r4, #-1]
 800314c:	1c44      	adds	r4, r0, #1
 800314e:	4629      	mov	r1, r5
 8003150:	4561      	cmp	r1, ip
 8003152:	d30a      	bcc.n	800316a <__exponent+0x66>
 8003154:	f10d 0209 	add.w	r2, sp, #9
 8003158:	eba2 020e 	sub.w	r2, r2, lr
 800315c:	4565      	cmp	r5, ip
 800315e:	bf88      	it	hi
 8003160:	2200      	movhi	r2, #0
 8003162:	4413      	add	r3, r2
 8003164:	1a18      	subs	r0, r3, r0
 8003166:	b003      	add	sp, #12
 8003168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800316a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800316e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003172:	e7ed      	b.n	8003150 <__exponent+0x4c>
 8003174:	2330      	movs	r3, #48	; 0x30
 8003176:	3130      	adds	r1, #48	; 0x30
 8003178:	7083      	strb	r3, [r0, #2]
 800317a:	70c1      	strb	r1, [r0, #3]
 800317c:	1d03      	adds	r3, r0, #4
 800317e:	e7f1      	b.n	8003164 <__exponent+0x60>

08003180 <_printf_float>:
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	ed2d 8b02 	vpush	{d8}
 8003188:	b08d      	sub	sp, #52	; 0x34
 800318a:	460c      	mov	r4, r1
 800318c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003190:	4616      	mov	r6, r2
 8003192:	461f      	mov	r7, r3
 8003194:	4605      	mov	r5, r0
 8003196:	f001 fd3b 	bl	8004c10 <_localeconv_r>
 800319a:	f8d0 a000 	ldr.w	sl, [r0]
 800319e:	4650      	mov	r0, sl
 80031a0:	f7fd f816 	bl	80001d0 <strlen>
 80031a4:	2300      	movs	r3, #0
 80031a6:	930a      	str	r3, [sp, #40]	; 0x28
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	9305      	str	r3, [sp, #20]
 80031ac:	f8d8 3000 	ldr.w	r3, [r8]
 80031b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80031b4:	3307      	adds	r3, #7
 80031b6:	f023 0307 	bic.w	r3, r3, #7
 80031ba:	f103 0208 	add.w	r2, r3, #8
 80031be:	f8c8 2000 	str.w	r2, [r8]
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80031ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80031ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80031d2:	9307      	str	r3, [sp, #28]
 80031d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80031d8:	ee08 0a10 	vmov	s16, r0
 80031dc:	4b9f      	ldr	r3, [pc, #636]	; (800345c <_printf_float+0x2dc>)
 80031de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295
 80031e6:	f7fd fca1 	bl	8000b2c <__aeabi_dcmpun>
 80031ea:	bb88      	cbnz	r0, 8003250 <_printf_float+0xd0>
 80031ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031f0:	4b9a      	ldr	r3, [pc, #616]	; (800345c <_printf_float+0x2dc>)
 80031f2:	f04f 32ff 	mov.w	r2, #4294967295
 80031f6:	f7fd fc7b 	bl	8000af0 <__aeabi_dcmple>
 80031fa:	bb48      	cbnz	r0, 8003250 <_printf_float+0xd0>
 80031fc:	2200      	movs	r2, #0
 80031fe:	2300      	movs	r3, #0
 8003200:	4640      	mov	r0, r8
 8003202:	4649      	mov	r1, r9
 8003204:	f7fd fc6a 	bl	8000adc <__aeabi_dcmplt>
 8003208:	b110      	cbz	r0, 8003210 <_printf_float+0x90>
 800320a:	232d      	movs	r3, #45	; 0x2d
 800320c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003210:	4b93      	ldr	r3, [pc, #588]	; (8003460 <_printf_float+0x2e0>)
 8003212:	4894      	ldr	r0, [pc, #592]	; (8003464 <_printf_float+0x2e4>)
 8003214:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003218:	bf94      	ite	ls
 800321a:	4698      	movls	r8, r3
 800321c:	4680      	movhi	r8, r0
 800321e:	2303      	movs	r3, #3
 8003220:	6123      	str	r3, [r4, #16]
 8003222:	9b05      	ldr	r3, [sp, #20]
 8003224:	f023 0204 	bic.w	r2, r3, #4
 8003228:	6022      	str	r2, [r4, #0]
 800322a:	f04f 0900 	mov.w	r9, #0
 800322e:	9700      	str	r7, [sp, #0]
 8003230:	4633      	mov	r3, r6
 8003232:	aa0b      	add	r2, sp, #44	; 0x2c
 8003234:	4621      	mov	r1, r4
 8003236:	4628      	mov	r0, r5
 8003238:	f000 f9d8 	bl	80035ec <_printf_common>
 800323c:	3001      	adds	r0, #1
 800323e:	f040 8090 	bne.w	8003362 <_printf_float+0x1e2>
 8003242:	f04f 30ff 	mov.w	r0, #4294967295
 8003246:	b00d      	add	sp, #52	; 0x34
 8003248:	ecbd 8b02 	vpop	{d8}
 800324c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003250:	4642      	mov	r2, r8
 8003252:	464b      	mov	r3, r9
 8003254:	4640      	mov	r0, r8
 8003256:	4649      	mov	r1, r9
 8003258:	f7fd fc68 	bl	8000b2c <__aeabi_dcmpun>
 800325c:	b140      	cbz	r0, 8003270 <_printf_float+0xf0>
 800325e:	464b      	mov	r3, r9
 8003260:	2b00      	cmp	r3, #0
 8003262:	bfbc      	itt	lt
 8003264:	232d      	movlt	r3, #45	; 0x2d
 8003266:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800326a:	487f      	ldr	r0, [pc, #508]	; (8003468 <_printf_float+0x2e8>)
 800326c:	4b7f      	ldr	r3, [pc, #508]	; (800346c <_printf_float+0x2ec>)
 800326e:	e7d1      	b.n	8003214 <_printf_float+0x94>
 8003270:	6863      	ldr	r3, [r4, #4]
 8003272:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003276:	9206      	str	r2, [sp, #24]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	d13f      	bne.n	80032fc <_printf_float+0x17c>
 800327c:	2306      	movs	r3, #6
 800327e:	6063      	str	r3, [r4, #4]
 8003280:	9b05      	ldr	r3, [sp, #20]
 8003282:	6861      	ldr	r1, [r4, #4]
 8003284:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003288:	2300      	movs	r3, #0
 800328a:	9303      	str	r3, [sp, #12]
 800328c:	ab0a      	add	r3, sp, #40	; 0x28
 800328e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003292:	ab09      	add	r3, sp, #36	; 0x24
 8003294:	ec49 8b10 	vmov	d0, r8, r9
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	6022      	str	r2, [r4, #0]
 800329c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80032a0:	4628      	mov	r0, r5
 80032a2:	f7ff fecd 	bl	8003040 <__cvt>
 80032a6:	9b06      	ldr	r3, [sp, #24]
 80032a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032aa:	2b47      	cmp	r3, #71	; 0x47
 80032ac:	4680      	mov	r8, r0
 80032ae:	d108      	bne.n	80032c2 <_printf_float+0x142>
 80032b0:	1cc8      	adds	r0, r1, #3
 80032b2:	db02      	blt.n	80032ba <_printf_float+0x13a>
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	4299      	cmp	r1, r3
 80032b8:	dd41      	ble.n	800333e <_printf_float+0x1be>
 80032ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80032be:	fa5f fb8b 	uxtb.w	fp, fp
 80032c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80032c6:	d820      	bhi.n	800330a <_printf_float+0x18a>
 80032c8:	3901      	subs	r1, #1
 80032ca:	465a      	mov	r2, fp
 80032cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032d0:	9109      	str	r1, [sp, #36]	; 0x24
 80032d2:	f7ff ff17 	bl	8003104 <__exponent>
 80032d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032d8:	1813      	adds	r3, r2, r0
 80032da:	2a01      	cmp	r2, #1
 80032dc:	4681      	mov	r9, r0
 80032de:	6123      	str	r3, [r4, #16]
 80032e0:	dc02      	bgt.n	80032e8 <_printf_float+0x168>
 80032e2:	6822      	ldr	r2, [r4, #0]
 80032e4:	07d2      	lsls	r2, r2, #31
 80032e6:	d501      	bpl.n	80032ec <_printf_float+0x16c>
 80032e8:	3301      	adds	r3, #1
 80032ea:	6123      	str	r3, [r4, #16]
 80032ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d09c      	beq.n	800322e <_printf_float+0xae>
 80032f4:	232d      	movs	r3, #45	; 0x2d
 80032f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032fa:	e798      	b.n	800322e <_printf_float+0xae>
 80032fc:	9a06      	ldr	r2, [sp, #24]
 80032fe:	2a47      	cmp	r2, #71	; 0x47
 8003300:	d1be      	bne.n	8003280 <_printf_float+0x100>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1bc      	bne.n	8003280 <_printf_float+0x100>
 8003306:	2301      	movs	r3, #1
 8003308:	e7b9      	b.n	800327e <_printf_float+0xfe>
 800330a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800330e:	d118      	bne.n	8003342 <_printf_float+0x1c2>
 8003310:	2900      	cmp	r1, #0
 8003312:	6863      	ldr	r3, [r4, #4]
 8003314:	dd0b      	ble.n	800332e <_printf_float+0x1ae>
 8003316:	6121      	str	r1, [r4, #16]
 8003318:	b913      	cbnz	r3, 8003320 <_printf_float+0x1a0>
 800331a:	6822      	ldr	r2, [r4, #0]
 800331c:	07d0      	lsls	r0, r2, #31
 800331e:	d502      	bpl.n	8003326 <_printf_float+0x1a6>
 8003320:	3301      	adds	r3, #1
 8003322:	440b      	add	r3, r1
 8003324:	6123      	str	r3, [r4, #16]
 8003326:	65a1      	str	r1, [r4, #88]	; 0x58
 8003328:	f04f 0900 	mov.w	r9, #0
 800332c:	e7de      	b.n	80032ec <_printf_float+0x16c>
 800332e:	b913      	cbnz	r3, 8003336 <_printf_float+0x1b6>
 8003330:	6822      	ldr	r2, [r4, #0]
 8003332:	07d2      	lsls	r2, r2, #31
 8003334:	d501      	bpl.n	800333a <_printf_float+0x1ba>
 8003336:	3302      	adds	r3, #2
 8003338:	e7f4      	b.n	8003324 <_printf_float+0x1a4>
 800333a:	2301      	movs	r3, #1
 800333c:	e7f2      	b.n	8003324 <_printf_float+0x1a4>
 800333e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003344:	4299      	cmp	r1, r3
 8003346:	db05      	blt.n	8003354 <_printf_float+0x1d4>
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	6121      	str	r1, [r4, #16]
 800334c:	07d8      	lsls	r0, r3, #31
 800334e:	d5ea      	bpl.n	8003326 <_printf_float+0x1a6>
 8003350:	1c4b      	adds	r3, r1, #1
 8003352:	e7e7      	b.n	8003324 <_printf_float+0x1a4>
 8003354:	2900      	cmp	r1, #0
 8003356:	bfd4      	ite	le
 8003358:	f1c1 0202 	rsble	r2, r1, #2
 800335c:	2201      	movgt	r2, #1
 800335e:	4413      	add	r3, r2
 8003360:	e7e0      	b.n	8003324 <_printf_float+0x1a4>
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	055a      	lsls	r2, r3, #21
 8003366:	d407      	bmi.n	8003378 <_printf_float+0x1f8>
 8003368:	6923      	ldr	r3, [r4, #16]
 800336a:	4642      	mov	r2, r8
 800336c:	4631      	mov	r1, r6
 800336e:	4628      	mov	r0, r5
 8003370:	47b8      	blx	r7
 8003372:	3001      	adds	r0, #1
 8003374:	d12c      	bne.n	80033d0 <_printf_float+0x250>
 8003376:	e764      	b.n	8003242 <_printf_float+0xc2>
 8003378:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800337c:	f240 80e0 	bls.w	8003540 <_printf_float+0x3c0>
 8003380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003384:	2200      	movs	r2, #0
 8003386:	2300      	movs	r3, #0
 8003388:	f7fd fb9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800338c:	2800      	cmp	r0, #0
 800338e:	d034      	beq.n	80033fa <_printf_float+0x27a>
 8003390:	4a37      	ldr	r2, [pc, #220]	; (8003470 <_printf_float+0x2f0>)
 8003392:	2301      	movs	r3, #1
 8003394:	4631      	mov	r1, r6
 8003396:	4628      	mov	r0, r5
 8003398:	47b8      	blx	r7
 800339a:	3001      	adds	r0, #1
 800339c:	f43f af51 	beq.w	8003242 <_printf_float+0xc2>
 80033a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033a4:	429a      	cmp	r2, r3
 80033a6:	db02      	blt.n	80033ae <_printf_float+0x22e>
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	07d8      	lsls	r0, r3, #31
 80033ac:	d510      	bpl.n	80033d0 <_printf_float+0x250>
 80033ae:	ee18 3a10 	vmov	r3, s16
 80033b2:	4652      	mov	r2, sl
 80033b4:	4631      	mov	r1, r6
 80033b6:	4628      	mov	r0, r5
 80033b8:	47b8      	blx	r7
 80033ba:	3001      	adds	r0, #1
 80033bc:	f43f af41 	beq.w	8003242 <_printf_float+0xc2>
 80033c0:	f04f 0800 	mov.w	r8, #0
 80033c4:	f104 091a 	add.w	r9, r4, #26
 80033c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	4543      	cmp	r3, r8
 80033ce:	dc09      	bgt.n	80033e4 <_printf_float+0x264>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	079b      	lsls	r3, r3, #30
 80033d4:	f100 8105 	bmi.w	80035e2 <_printf_float+0x462>
 80033d8:	68e0      	ldr	r0, [r4, #12]
 80033da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033dc:	4298      	cmp	r0, r3
 80033de:	bfb8      	it	lt
 80033e0:	4618      	movlt	r0, r3
 80033e2:	e730      	b.n	8003246 <_printf_float+0xc6>
 80033e4:	2301      	movs	r3, #1
 80033e6:	464a      	mov	r2, r9
 80033e8:	4631      	mov	r1, r6
 80033ea:	4628      	mov	r0, r5
 80033ec:	47b8      	blx	r7
 80033ee:	3001      	adds	r0, #1
 80033f0:	f43f af27 	beq.w	8003242 <_printf_float+0xc2>
 80033f4:	f108 0801 	add.w	r8, r8, #1
 80033f8:	e7e6      	b.n	80033c8 <_printf_float+0x248>
 80033fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	dc39      	bgt.n	8003474 <_printf_float+0x2f4>
 8003400:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <_printf_float+0x2f0>)
 8003402:	2301      	movs	r3, #1
 8003404:	4631      	mov	r1, r6
 8003406:	4628      	mov	r0, r5
 8003408:	47b8      	blx	r7
 800340a:	3001      	adds	r0, #1
 800340c:	f43f af19 	beq.w	8003242 <_printf_float+0xc2>
 8003410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003414:	4313      	orrs	r3, r2
 8003416:	d102      	bne.n	800341e <_printf_float+0x29e>
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	07d9      	lsls	r1, r3, #31
 800341c:	d5d8      	bpl.n	80033d0 <_printf_float+0x250>
 800341e:	ee18 3a10 	vmov	r3, s16
 8003422:	4652      	mov	r2, sl
 8003424:	4631      	mov	r1, r6
 8003426:	4628      	mov	r0, r5
 8003428:	47b8      	blx	r7
 800342a:	3001      	adds	r0, #1
 800342c:	f43f af09 	beq.w	8003242 <_printf_float+0xc2>
 8003430:	f04f 0900 	mov.w	r9, #0
 8003434:	f104 0a1a 	add.w	sl, r4, #26
 8003438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800343a:	425b      	negs	r3, r3
 800343c:	454b      	cmp	r3, r9
 800343e:	dc01      	bgt.n	8003444 <_printf_float+0x2c4>
 8003440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003442:	e792      	b.n	800336a <_printf_float+0x1ea>
 8003444:	2301      	movs	r3, #1
 8003446:	4652      	mov	r2, sl
 8003448:	4631      	mov	r1, r6
 800344a:	4628      	mov	r0, r5
 800344c:	47b8      	blx	r7
 800344e:	3001      	adds	r0, #1
 8003450:	f43f aef7 	beq.w	8003242 <_printf_float+0xc2>
 8003454:	f109 0901 	add.w	r9, r9, #1
 8003458:	e7ee      	b.n	8003438 <_printf_float+0x2b8>
 800345a:	bf00      	nop
 800345c:	7fefffff 	.word	0x7fefffff
 8003460:	08007140 	.word	0x08007140
 8003464:	08007144 	.word	0x08007144
 8003468:	0800714c 	.word	0x0800714c
 800346c:	08007148 	.word	0x08007148
 8003470:	08007150 	.word	0x08007150
 8003474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003476:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003478:	429a      	cmp	r2, r3
 800347a:	bfa8      	it	ge
 800347c:	461a      	movge	r2, r3
 800347e:	2a00      	cmp	r2, #0
 8003480:	4691      	mov	r9, r2
 8003482:	dc37      	bgt.n	80034f4 <_printf_float+0x374>
 8003484:	f04f 0b00 	mov.w	fp, #0
 8003488:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800348c:	f104 021a 	add.w	r2, r4, #26
 8003490:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003492:	9305      	str	r3, [sp, #20]
 8003494:	eba3 0309 	sub.w	r3, r3, r9
 8003498:	455b      	cmp	r3, fp
 800349a:	dc33      	bgt.n	8003504 <_printf_float+0x384>
 800349c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034a0:	429a      	cmp	r2, r3
 80034a2:	db3b      	blt.n	800351c <_printf_float+0x39c>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	07da      	lsls	r2, r3, #31
 80034a8:	d438      	bmi.n	800351c <_printf_float+0x39c>
 80034aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034ac:	9b05      	ldr	r3, [sp, #20]
 80034ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	eba2 0901 	sub.w	r9, r2, r1
 80034b6:	4599      	cmp	r9, r3
 80034b8:	bfa8      	it	ge
 80034ba:	4699      	movge	r9, r3
 80034bc:	f1b9 0f00 	cmp.w	r9, #0
 80034c0:	dc35      	bgt.n	800352e <_printf_float+0x3ae>
 80034c2:	f04f 0800 	mov.w	r8, #0
 80034c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034ca:	f104 0a1a 	add.w	sl, r4, #26
 80034ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	eba3 0309 	sub.w	r3, r3, r9
 80034d8:	4543      	cmp	r3, r8
 80034da:	f77f af79 	ble.w	80033d0 <_printf_float+0x250>
 80034de:	2301      	movs	r3, #1
 80034e0:	4652      	mov	r2, sl
 80034e2:	4631      	mov	r1, r6
 80034e4:	4628      	mov	r0, r5
 80034e6:	47b8      	blx	r7
 80034e8:	3001      	adds	r0, #1
 80034ea:	f43f aeaa 	beq.w	8003242 <_printf_float+0xc2>
 80034ee:	f108 0801 	add.w	r8, r8, #1
 80034f2:	e7ec      	b.n	80034ce <_printf_float+0x34e>
 80034f4:	4613      	mov	r3, r2
 80034f6:	4631      	mov	r1, r6
 80034f8:	4642      	mov	r2, r8
 80034fa:	4628      	mov	r0, r5
 80034fc:	47b8      	blx	r7
 80034fe:	3001      	adds	r0, #1
 8003500:	d1c0      	bne.n	8003484 <_printf_float+0x304>
 8003502:	e69e      	b.n	8003242 <_printf_float+0xc2>
 8003504:	2301      	movs	r3, #1
 8003506:	4631      	mov	r1, r6
 8003508:	4628      	mov	r0, r5
 800350a:	9205      	str	r2, [sp, #20]
 800350c:	47b8      	blx	r7
 800350e:	3001      	adds	r0, #1
 8003510:	f43f ae97 	beq.w	8003242 <_printf_float+0xc2>
 8003514:	9a05      	ldr	r2, [sp, #20]
 8003516:	f10b 0b01 	add.w	fp, fp, #1
 800351a:	e7b9      	b.n	8003490 <_printf_float+0x310>
 800351c:	ee18 3a10 	vmov	r3, s16
 8003520:	4652      	mov	r2, sl
 8003522:	4631      	mov	r1, r6
 8003524:	4628      	mov	r0, r5
 8003526:	47b8      	blx	r7
 8003528:	3001      	adds	r0, #1
 800352a:	d1be      	bne.n	80034aa <_printf_float+0x32a>
 800352c:	e689      	b.n	8003242 <_printf_float+0xc2>
 800352e:	9a05      	ldr	r2, [sp, #20]
 8003530:	464b      	mov	r3, r9
 8003532:	4442      	add	r2, r8
 8003534:	4631      	mov	r1, r6
 8003536:	4628      	mov	r0, r5
 8003538:	47b8      	blx	r7
 800353a:	3001      	adds	r0, #1
 800353c:	d1c1      	bne.n	80034c2 <_printf_float+0x342>
 800353e:	e680      	b.n	8003242 <_printf_float+0xc2>
 8003540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003542:	2a01      	cmp	r2, #1
 8003544:	dc01      	bgt.n	800354a <_printf_float+0x3ca>
 8003546:	07db      	lsls	r3, r3, #31
 8003548:	d538      	bpl.n	80035bc <_printf_float+0x43c>
 800354a:	2301      	movs	r3, #1
 800354c:	4642      	mov	r2, r8
 800354e:	4631      	mov	r1, r6
 8003550:	4628      	mov	r0, r5
 8003552:	47b8      	blx	r7
 8003554:	3001      	adds	r0, #1
 8003556:	f43f ae74 	beq.w	8003242 <_printf_float+0xc2>
 800355a:	ee18 3a10 	vmov	r3, s16
 800355e:	4652      	mov	r2, sl
 8003560:	4631      	mov	r1, r6
 8003562:	4628      	mov	r0, r5
 8003564:	47b8      	blx	r7
 8003566:	3001      	adds	r0, #1
 8003568:	f43f ae6b 	beq.w	8003242 <_printf_float+0xc2>
 800356c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003570:	2200      	movs	r2, #0
 8003572:	2300      	movs	r3, #0
 8003574:	f7fd faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003578:	b9d8      	cbnz	r0, 80035b2 <_printf_float+0x432>
 800357a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800357c:	f108 0201 	add.w	r2, r8, #1
 8003580:	3b01      	subs	r3, #1
 8003582:	4631      	mov	r1, r6
 8003584:	4628      	mov	r0, r5
 8003586:	47b8      	blx	r7
 8003588:	3001      	adds	r0, #1
 800358a:	d10e      	bne.n	80035aa <_printf_float+0x42a>
 800358c:	e659      	b.n	8003242 <_printf_float+0xc2>
 800358e:	2301      	movs	r3, #1
 8003590:	4652      	mov	r2, sl
 8003592:	4631      	mov	r1, r6
 8003594:	4628      	mov	r0, r5
 8003596:	47b8      	blx	r7
 8003598:	3001      	adds	r0, #1
 800359a:	f43f ae52 	beq.w	8003242 <_printf_float+0xc2>
 800359e:	f108 0801 	add.w	r8, r8, #1
 80035a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	4543      	cmp	r3, r8
 80035a8:	dcf1      	bgt.n	800358e <_printf_float+0x40e>
 80035aa:	464b      	mov	r3, r9
 80035ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80035b0:	e6dc      	b.n	800336c <_printf_float+0x1ec>
 80035b2:	f04f 0800 	mov.w	r8, #0
 80035b6:	f104 0a1a 	add.w	sl, r4, #26
 80035ba:	e7f2      	b.n	80035a2 <_printf_float+0x422>
 80035bc:	2301      	movs	r3, #1
 80035be:	4642      	mov	r2, r8
 80035c0:	e7df      	b.n	8003582 <_printf_float+0x402>
 80035c2:	2301      	movs	r3, #1
 80035c4:	464a      	mov	r2, r9
 80035c6:	4631      	mov	r1, r6
 80035c8:	4628      	mov	r0, r5
 80035ca:	47b8      	blx	r7
 80035cc:	3001      	adds	r0, #1
 80035ce:	f43f ae38 	beq.w	8003242 <_printf_float+0xc2>
 80035d2:	f108 0801 	add.w	r8, r8, #1
 80035d6:	68e3      	ldr	r3, [r4, #12]
 80035d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035da:	1a5b      	subs	r3, r3, r1
 80035dc:	4543      	cmp	r3, r8
 80035de:	dcf0      	bgt.n	80035c2 <_printf_float+0x442>
 80035e0:	e6fa      	b.n	80033d8 <_printf_float+0x258>
 80035e2:	f04f 0800 	mov.w	r8, #0
 80035e6:	f104 0919 	add.w	r9, r4, #25
 80035ea:	e7f4      	b.n	80035d6 <_printf_float+0x456>

080035ec <_printf_common>:
 80035ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f0:	4616      	mov	r6, r2
 80035f2:	4699      	mov	r9, r3
 80035f4:	688a      	ldr	r2, [r1, #8]
 80035f6:	690b      	ldr	r3, [r1, #16]
 80035f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035fc:	4293      	cmp	r3, r2
 80035fe:	bfb8      	it	lt
 8003600:	4613      	movlt	r3, r2
 8003602:	6033      	str	r3, [r6, #0]
 8003604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003608:	4607      	mov	r7, r0
 800360a:	460c      	mov	r4, r1
 800360c:	b10a      	cbz	r2, 8003612 <_printf_common+0x26>
 800360e:	3301      	adds	r3, #1
 8003610:	6033      	str	r3, [r6, #0]
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	0699      	lsls	r1, r3, #26
 8003616:	bf42      	ittt	mi
 8003618:	6833      	ldrmi	r3, [r6, #0]
 800361a:	3302      	addmi	r3, #2
 800361c:	6033      	strmi	r3, [r6, #0]
 800361e:	6825      	ldr	r5, [r4, #0]
 8003620:	f015 0506 	ands.w	r5, r5, #6
 8003624:	d106      	bne.n	8003634 <_printf_common+0x48>
 8003626:	f104 0a19 	add.w	sl, r4, #25
 800362a:	68e3      	ldr	r3, [r4, #12]
 800362c:	6832      	ldr	r2, [r6, #0]
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	42ab      	cmp	r3, r5
 8003632:	dc26      	bgt.n	8003682 <_printf_common+0x96>
 8003634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003638:	1e13      	subs	r3, r2, #0
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	bf18      	it	ne
 800363e:	2301      	movne	r3, #1
 8003640:	0692      	lsls	r2, r2, #26
 8003642:	d42b      	bmi.n	800369c <_printf_common+0xb0>
 8003644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003648:	4649      	mov	r1, r9
 800364a:	4638      	mov	r0, r7
 800364c:	47c0      	blx	r8
 800364e:	3001      	adds	r0, #1
 8003650:	d01e      	beq.n	8003690 <_printf_common+0xa4>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	68e5      	ldr	r5, [r4, #12]
 8003656:	6832      	ldr	r2, [r6, #0]
 8003658:	f003 0306 	and.w	r3, r3, #6
 800365c:	2b04      	cmp	r3, #4
 800365e:	bf08      	it	eq
 8003660:	1aad      	subeq	r5, r5, r2
 8003662:	68a3      	ldr	r3, [r4, #8]
 8003664:	6922      	ldr	r2, [r4, #16]
 8003666:	bf0c      	ite	eq
 8003668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800366c:	2500      	movne	r5, #0
 800366e:	4293      	cmp	r3, r2
 8003670:	bfc4      	itt	gt
 8003672:	1a9b      	subgt	r3, r3, r2
 8003674:	18ed      	addgt	r5, r5, r3
 8003676:	2600      	movs	r6, #0
 8003678:	341a      	adds	r4, #26
 800367a:	42b5      	cmp	r5, r6
 800367c:	d11a      	bne.n	80036b4 <_printf_common+0xc8>
 800367e:	2000      	movs	r0, #0
 8003680:	e008      	b.n	8003694 <_printf_common+0xa8>
 8003682:	2301      	movs	r3, #1
 8003684:	4652      	mov	r2, sl
 8003686:	4649      	mov	r1, r9
 8003688:	4638      	mov	r0, r7
 800368a:	47c0      	blx	r8
 800368c:	3001      	adds	r0, #1
 800368e:	d103      	bne.n	8003698 <_printf_common+0xac>
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003698:	3501      	adds	r5, #1
 800369a:	e7c6      	b.n	800362a <_printf_common+0x3e>
 800369c:	18e1      	adds	r1, r4, r3
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	2030      	movs	r0, #48	; 0x30
 80036a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036a6:	4422      	add	r2, r4
 80036a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036b0:	3302      	adds	r3, #2
 80036b2:	e7c7      	b.n	8003644 <_printf_common+0x58>
 80036b4:	2301      	movs	r3, #1
 80036b6:	4622      	mov	r2, r4
 80036b8:	4649      	mov	r1, r9
 80036ba:	4638      	mov	r0, r7
 80036bc:	47c0      	blx	r8
 80036be:	3001      	adds	r0, #1
 80036c0:	d0e6      	beq.n	8003690 <_printf_common+0xa4>
 80036c2:	3601      	adds	r6, #1
 80036c4:	e7d9      	b.n	800367a <_printf_common+0x8e>
	...

080036c8 <_printf_i>:
 80036c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036cc:	460c      	mov	r4, r1
 80036ce:	4691      	mov	r9, r2
 80036d0:	7e27      	ldrb	r7, [r4, #24]
 80036d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036d4:	2f78      	cmp	r7, #120	; 0x78
 80036d6:	4680      	mov	r8, r0
 80036d8:	469a      	mov	sl, r3
 80036da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036de:	d807      	bhi.n	80036f0 <_printf_i+0x28>
 80036e0:	2f62      	cmp	r7, #98	; 0x62
 80036e2:	d80a      	bhi.n	80036fa <_printf_i+0x32>
 80036e4:	2f00      	cmp	r7, #0
 80036e6:	f000 80d8 	beq.w	800389a <_printf_i+0x1d2>
 80036ea:	2f58      	cmp	r7, #88	; 0x58
 80036ec:	f000 80a3 	beq.w	8003836 <_printf_i+0x16e>
 80036f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036f8:	e03a      	b.n	8003770 <_printf_i+0xa8>
 80036fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036fe:	2b15      	cmp	r3, #21
 8003700:	d8f6      	bhi.n	80036f0 <_printf_i+0x28>
 8003702:	a001      	add	r0, pc, #4	; (adr r0, 8003708 <_printf_i+0x40>)
 8003704:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003708:	08003761 	.word	0x08003761
 800370c:	08003775 	.word	0x08003775
 8003710:	080036f1 	.word	0x080036f1
 8003714:	080036f1 	.word	0x080036f1
 8003718:	080036f1 	.word	0x080036f1
 800371c:	080036f1 	.word	0x080036f1
 8003720:	08003775 	.word	0x08003775
 8003724:	080036f1 	.word	0x080036f1
 8003728:	080036f1 	.word	0x080036f1
 800372c:	080036f1 	.word	0x080036f1
 8003730:	080036f1 	.word	0x080036f1
 8003734:	08003881 	.word	0x08003881
 8003738:	080037a5 	.word	0x080037a5
 800373c:	08003863 	.word	0x08003863
 8003740:	080036f1 	.word	0x080036f1
 8003744:	080036f1 	.word	0x080036f1
 8003748:	080038a3 	.word	0x080038a3
 800374c:	080036f1 	.word	0x080036f1
 8003750:	080037a5 	.word	0x080037a5
 8003754:	080036f1 	.word	0x080036f1
 8003758:	080036f1 	.word	0x080036f1
 800375c:	0800386b 	.word	0x0800386b
 8003760:	680b      	ldr	r3, [r1, #0]
 8003762:	1d1a      	adds	r2, r3, #4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	600a      	str	r2, [r1, #0]
 8003768:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800376c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003770:	2301      	movs	r3, #1
 8003772:	e0a3      	b.n	80038bc <_printf_i+0x1f4>
 8003774:	6825      	ldr	r5, [r4, #0]
 8003776:	6808      	ldr	r0, [r1, #0]
 8003778:	062e      	lsls	r6, r5, #24
 800377a:	f100 0304 	add.w	r3, r0, #4
 800377e:	d50a      	bpl.n	8003796 <_printf_i+0xce>
 8003780:	6805      	ldr	r5, [r0, #0]
 8003782:	600b      	str	r3, [r1, #0]
 8003784:	2d00      	cmp	r5, #0
 8003786:	da03      	bge.n	8003790 <_printf_i+0xc8>
 8003788:	232d      	movs	r3, #45	; 0x2d
 800378a:	426d      	negs	r5, r5
 800378c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003790:	485e      	ldr	r0, [pc, #376]	; (800390c <_printf_i+0x244>)
 8003792:	230a      	movs	r3, #10
 8003794:	e019      	b.n	80037ca <_printf_i+0x102>
 8003796:	f015 0f40 	tst.w	r5, #64	; 0x40
 800379a:	6805      	ldr	r5, [r0, #0]
 800379c:	600b      	str	r3, [r1, #0]
 800379e:	bf18      	it	ne
 80037a0:	b22d      	sxthne	r5, r5
 80037a2:	e7ef      	b.n	8003784 <_printf_i+0xbc>
 80037a4:	680b      	ldr	r3, [r1, #0]
 80037a6:	6825      	ldr	r5, [r4, #0]
 80037a8:	1d18      	adds	r0, r3, #4
 80037aa:	6008      	str	r0, [r1, #0]
 80037ac:	0628      	lsls	r0, r5, #24
 80037ae:	d501      	bpl.n	80037b4 <_printf_i+0xec>
 80037b0:	681d      	ldr	r5, [r3, #0]
 80037b2:	e002      	b.n	80037ba <_printf_i+0xf2>
 80037b4:	0669      	lsls	r1, r5, #25
 80037b6:	d5fb      	bpl.n	80037b0 <_printf_i+0xe8>
 80037b8:	881d      	ldrh	r5, [r3, #0]
 80037ba:	4854      	ldr	r0, [pc, #336]	; (800390c <_printf_i+0x244>)
 80037bc:	2f6f      	cmp	r7, #111	; 0x6f
 80037be:	bf0c      	ite	eq
 80037c0:	2308      	moveq	r3, #8
 80037c2:	230a      	movne	r3, #10
 80037c4:	2100      	movs	r1, #0
 80037c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ca:	6866      	ldr	r6, [r4, #4]
 80037cc:	60a6      	str	r6, [r4, #8]
 80037ce:	2e00      	cmp	r6, #0
 80037d0:	bfa2      	ittt	ge
 80037d2:	6821      	ldrge	r1, [r4, #0]
 80037d4:	f021 0104 	bicge.w	r1, r1, #4
 80037d8:	6021      	strge	r1, [r4, #0]
 80037da:	b90d      	cbnz	r5, 80037e0 <_printf_i+0x118>
 80037dc:	2e00      	cmp	r6, #0
 80037de:	d04d      	beq.n	800387c <_printf_i+0x1b4>
 80037e0:	4616      	mov	r6, r2
 80037e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80037e6:	fb03 5711 	mls	r7, r3, r1, r5
 80037ea:	5dc7      	ldrb	r7, [r0, r7]
 80037ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037f0:	462f      	mov	r7, r5
 80037f2:	42bb      	cmp	r3, r7
 80037f4:	460d      	mov	r5, r1
 80037f6:	d9f4      	bls.n	80037e2 <_printf_i+0x11a>
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d10b      	bne.n	8003814 <_printf_i+0x14c>
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	07df      	lsls	r7, r3, #31
 8003800:	d508      	bpl.n	8003814 <_printf_i+0x14c>
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	6861      	ldr	r1, [r4, #4]
 8003806:	4299      	cmp	r1, r3
 8003808:	bfde      	ittt	le
 800380a:	2330      	movle	r3, #48	; 0x30
 800380c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003810:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003814:	1b92      	subs	r2, r2, r6
 8003816:	6122      	str	r2, [r4, #16]
 8003818:	f8cd a000 	str.w	sl, [sp]
 800381c:	464b      	mov	r3, r9
 800381e:	aa03      	add	r2, sp, #12
 8003820:	4621      	mov	r1, r4
 8003822:	4640      	mov	r0, r8
 8003824:	f7ff fee2 	bl	80035ec <_printf_common>
 8003828:	3001      	adds	r0, #1
 800382a:	d14c      	bne.n	80038c6 <_printf_i+0x1fe>
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	b004      	add	sp, #16
 8003832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003836:	4835      	ldr	r0, [pc, #212]	; (800390c <_printf_i+0x244>)
 8003838:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	680e      	ldr	r6, [r1, #0]
 8003840:	061f      	lsls	r7, r3, #24
 8003842:	f856 5b04 	ldr.w	r5, [r6], #4
 8003846:	600e      	str	r6, [r1, #0]
 8003848:	d514      	bpl.n	8003874 <_printf_i+0x1ac>
 800384a:	07d9      	lsls	r1, r3, #31
 800384c:	bf44      	itt	mi
 800384e:	f043 0320 	orrmi.w	r3, r3, #32
 8003852:	6023      	strmi	r3, [r4, #0]
 8003854:	b91d      	cbnz	r5, 800385e <_printf_i+0x196>
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	f023 0320 	bic.w	r3, r3, #32
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	2310      	movs	r3, #16
 8003860:	e7b0      	b.n	80037c4 <_printf_i+0xfc>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	f043 0320 	orr.w	r3, r3, #32
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	2378      	movs	r3, #120	; 0x78
 800386c:	4828      	ldr	r0, [pc, #160]	; (8003910 <_printf_i+0x248>)
 800386e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003872:	e7e3      	b.n	800383c <_printf_i+0x174>
 8003874:	065e      	lsls	r6, r3, #25
 8003876:	bf48      	it	mi
 8003878:	b2ad      	uxthmi	r5, r5
 800387a:	e7e6      	b.n	800384a <_printf_i+0x182>
 800387c:	4616      	mov	r6, r2
 800387e:	e7bb      	b.n	80037f8 <_printf_i+0x130>
 8003880:	680b      	ldr	r3, [r1, #0]
 8003882:	6826      	ldr	r6, [r4, #0]
 8003884:	6960      	ldr	r0, [r4, #20]
 8003886:	1d1d      	adds	r5, r3, #4
 8003888:	600d      	str	r5, [r1, #0]
 800388a:	0635      	lsls	r5, r6, #24
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	d501      	bpl.n	8003894 <_printf_i+0x1cc>
 8003890:	6018      	str	r0, [r3, #0]
 8003892:	e002      	b.n	800389a <_printf_i+0x1d2>
 8003894:	0671      	lsls	r1, r6, #25
 8003896:	d5fb      	bpl.n	8003890 <_printf_i+0x1c8>
 8003898:	8018      	strh	r0, [r3, #0]
 800389a:	2300      	movs	r3, #0
 800389c:	6123      	str	r3, [r4, #16]
 800389e:	4616      	mov	r6, r2
 80038a0:	e7ba      	b.n	8003818 <_printf_i+0x150>
 80038a2:	680b      	ldr	r3, [r1, #0]
 80038a4:	1d1a      	adds	r2, r3, #4
 80038a6:	600a      	str	r2, [r1, #0]
 80038a8:	681e      	ldr	r6, [r3, #0]
 80038aa:	6862      	ldr	r2, [r4, #4]
 80038ac:	2100      	movs	r1, #0
 80038ae:	4630      	mov	r0, r6
 80038b0:	f7fc fc96 	bl	80001e0 <memchr>
 80038b4:	b108      	cbz	r0, 80038ba <_printf_i+0x1f2>
 80038b6:	1b80      	subs	r0, r0, r6
 80038b8:	6060      	str	r0, [r4, #4]
 80038ba:	6863      	ldr	r3, [r4, #4]
 80038bc:	6123      	str	r3, [r4, #16]
 80038be:	2300      	movs	r3, #0
 80038c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038c4:	e7a8      	b.n	8003818 <_printf_i+0x150>
 80038c6:	6923      	ldr	r3, [r4, #16]
 80038c8:	4632      	mov	r2, r6
 80038ca:	4649      	mov	r1, r9
 80038cc:	4640      	mov	r0, r8
 80038ce:	47d0      	blx	sl
 80038d0:	3001      	adds	r0, #1
 80038d2:	d0ab      	beq.n	800382c <_printf_i+0x164>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	079b      	lsls	r3, r3, #30
 80038d8:	d413      	bmi.n	8003902 <_printf_i+0x23a>
 80038da:	68e0      	ldr	r0, [r4, #12]
 80038dc:	9b03      	ldr	r3, [sp, #12]
 80038de:	4298      	cmp	r0, r3
 80038e0:	bfb8      	it	lt
 80038e2:	4618      	movlt	r0, r3
 80038e4:	e7a4      	b.n	8003830 <_printf_i+0x168>
 80038e6:	2301      	movs	r3, #1
 80038e8:	4632      	mov	r2, r6
 80038ea:	4649      	mov	r1, r9
 80038ec:	4640      	mov	r0, r8
 80038ee:	47d0      	blx	sl
 80038f0:	3001      	adds	r0, #1
 80038f2:	d09b      	beq.n	800382c <_printf_i+0x164>
 80038f4:	3501      	adds	r5, #1
 80038f6:	68e3      	ldr	r3, [r4, #12]
 80038f8:	9903      	ldr	r1, [sp, #12]
 80038fa:	1a5b      	subs	r3, r3, r1
 80038fc:	42ab      	cmp	r3, r5
 80038fe:	dcf2      	bgt.n	80038e6 <_printf_i+0x21e>
 8003900:	e7eb      	b.n	80038da <_printf_i+0x212>
 8003902:	2500      	movs	r5, #0
 8003904:	f104 0619 	add.w	r6, r4, #25
 8003908:	e7f5      	b.n	80038f6 <_printf_i+0x22e>
 800390a:	bf00      	nop
 800390c:	08007152 	.word	0x08007152
 8003910:	08007163 	.word	0x08007163

08003914 <iprintf>:
 8003914:	b40f      	push	{r0, r1, r2, r3}
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <iprintf+0x2c>)
 8003918:	b513      	push	{r0, r1, r4, lr}
 800391a:	681c      	ldr	r4, [r3, #0]
 800391c:	b124      	cbz	r4, 8003928 <iprintf+0x14>
 800391e:	69a3      	ldr	r3, [r4, #24]
 8003920:	b913      	cbnz	r3, 8003928 <iprintf+0x14>
 8003922:	4620      	mov	r0, r4
 8003924:	f001 f8d6 	bl	8004ad4 <__sinit>
 8003928:	ab05      	add	r3, sp, #20
 800392a:	9a04      	ldr	r2, [sp, #16]
 800392c:	68a1      	ldr	r1, [r4, #8]
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	4620      	mov	r0, r4
 8003932:	f001 fe43 	bl	80055bc <_vfiprintf_r>
 8003936:	b002      	add	sp, #8
 8003938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800393c:	b004      	add	sp, #16
 800393e:	4770      	bx	lr
 8003940:	20000010 	.word	0x20000010

08003944 <_puts_r>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	460e      	mov	r6, r1
 8003948:	4605      	mov	r5, r0
 800394a:	b118      	cbz	r0, 8003954 <_puts_r+0x10>
 800394c:	6983      	ldr	r3, [r0, #24]
 800394e:	b90b      	cbnz	r3, 8003954 <_puts_r+0x10>
 8003950:	f001 f8c0 	bl	8004ad4 <__sinit>
 8003954:	69ab      	ldr	r3, [r5, #24]
 8003956:	68ac      	ldr	r4, [r5, #8]
 8003958:	b913      	cbnz	r3, 8003960 <_puts_r+0x1c>
 800395a:	4628      	mov	r0, r5
 800395c:	f001 f8ba 	bl	8004ad4 <__sinit>
 8003960:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <_puts_r+0xd0>)
 8003962:	429c      	cmp	r4, r3
 8003964:	d120      	bne.n	80039a8 <_puts_r+0x64>
 8003966:	686c      	ldr	r4, [r5, #4]
 8003968:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800396a:	07db      	lsls	r3, r3, #31
 800396c:	d405      	bmi.n	800397a <_puts_r+0x36>
 800396e:	89a3      	ldrh	r3, [r4, #12]
 8003970:	0598      	lsls	r0, r3, #22
 8003972:	d402      	bmi.n	800397a <_puts_r+0x36>
 8003974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003976:	f001 f950 	bl	8004c1a <__retarget_lock_acquire_recursive>
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	0719      	lsls	r1, r3, #28
 800397e:	d51d      	bpl.n	80039bc <_puts_r+0x78>
 8003980:	6923      	ldr	r3, [r4, #16]
 8003982:	b1db      	cbz	r3, 80039bc <_puts_r+0x78>
 8003984:	3e01      	subs	r6, #1
 8003986:	68a3      	ldr	r3, [r4, #8]
 8003988:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800398c:	3b01      	subs	r3, #1
 800398e:	60a3      	str	r3, [r4, #8]
 8003990:	bb39      	cbnz	r1, 80039e2 <_puts_r+0x9e>
 8003992:	2b00      	cmp	r3, #0
 8003994:	da38      	bge.n	8003a08 <_puts_r+0xc4>
 8003996:	4622      	mov	r2, r4
 8003998:	210a      	movs	r1, #10
 800399a:	4628      	mov	r0, r5
 800399c:	f000 f848 	bl	8003a30 <__swbuf_r>
 80039a0:	3001      	adds	r0, #1
 80039a2:	d011      	beq.n	80039c8 <_puts_r+0x84>
 80039a4:	250a      	movs	r5, #10
 80039a6:	e011      	b.n	80039cc <_puts_r+0x88>
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <_puts_r+0xd4>)
 80039aa:	429c      	cmp	r4, r3
 80039ac:	d101      	bne.n	80039b2 <_puts_r+0x6e>
 80039ae:	68ac      	ldr	r4, [r5, #8]
 80039b0:	e7da      	b.n	8003968 <_puts_r+0x24>
 80039b2:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <_puts_r+0xd8>)
 80039b4:	429c      	cmp	r4, r3
 80039b6:	bf08      	it	eq
 80039b8:	68ec      	ldreq	r4, [r5, #12]
 80039ba:	e7d5      	b.n	8003968 <_puts_r+0x24>
 80039bc:	4621      	mov	r1, r4
 80039be:	4628      	mov	r0, r5
 80039c0:	f000 f888 	bl	8003ad4 <__swsetup_r>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d0dd      	beq.n	8003984 <_puts_r+0x40>
 80039c8:	f04f 35ff 	mov.w	r5, #4294967295
 80039cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039ce:	07da      	lsls	r2, r3, #31
 80039d0:	d405      	bmi.n	80039de <_puts_r+0x9a>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	059b      	lsls	r3, r3, #22
 80039d6:	d402      	bmi.n	80039de <_puts_r+0x9a>
 80039d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039da:	f001 f91f 	bl	8004c1c <__retarget_lock_release_recursive>
 80039de:	4628      	mov	r0, r5
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	da04      	bge.n	80039f0 <_puts_r+0xac>
 80039e6:	69a2      	ldr	r2, [r4, #24]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	dc06      	bgt.n	80039fa <_puts_r+0xb6>
 80039ec:	290a      	cmp	r1, #10
 80039ee:	d004      	beq.n	80039fa <_puts_r+0xb6>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	6022      	str	r2, [r4, #0]
 80039f6:	7019      	strb	r1, [r3, #0]
 80039f8:	e7c5      	b.n	8003986 <_puts_r+0x42>
 80039fa:	4622      	mov	r2, r4
 80039fc:	4628      	mov	r0, r5
 80039fe:	f000 f817 	bl	8003a30 <__swbuf_r>
 8003a02:	3001      	adds	r0, #1
 8003a04:	d1bf      	bne.n	8003986 <_puts_r+0x42>
 8003a06:	e7df      	b.n	80039c8 <_puts_r+0x84>
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	250a      	movs	r5, #10
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	6022      	str	r2, [r4, #0]
 8003a10:	701d      	strb	r5, [r3, #0]
 8003a12:	e7db      	b.n	80039cc <_puts_r+0x88>
 8003a14:	08007228 	.word	0x08007228
 8003a18:	08007248 	.word	0x08007248
 8003a1c:	08007208 	.word	0x08007208

08003a20 <puts>:
 8003a20:	4b02      	ldr	r3, [pc, #8]	; (8003a2c <puts+0xc>)
 8003a22:	4601      	mov	r1, r0
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	f7ff bf8d 	b.w	8003944 <_puts_r>
 8003a2a:	bf00      	nop
 8003a2c:	20000010 	.word	0x20000010

08003a30 <__swbuf_r>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	460e      	mov	r6, r1
 8003a34:	4614      	mov	r4, r2
 8003a36:	4605      	mov	r5, r0
 8003a38:	b118      	cbz	r0, 8003a42 <__swbuf_r+0x12>
 8003a3a:	6983      	ldr	r3, [r0, #24]
 8003a3c:	b90b      	cbnz	r3, 8003a42 <__swbuf_r+0x12>
 8003a3e:	f001 f849 	bl	8004ad4 <__sinit>
 8003a42:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <__swbuf_r+0x98>)
 8003a44:	429c      	cmp	r4, r3
 8003a46:	d12b      	bne.n	8003aa0 <__swbuf_r+0x70>
 8003a48:	686c      	ldr	r4, [r5, #4]
 8003a4a:	69a3      	ldr	r3, [r4, #24]
 8003a4c:	60a3      	str	r3, [r4, #8]
 8003a4e:	89a3      	ldrh	r3, [r4, #12]
 8003a50:	071a      	lsls	r2, r3, #28
 8003a52:	d52f      	bpl.n	8003ab4 <__swbuf_r+0x84>
 8003a54:	6923      	ldr	r3, [r4, #16]
 8003a56:	b36b      	cbz	r3, 8003ab4 <__swbuf_r+0x84>
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	1ac0      	subs	r0, r0, r3
 8003a5e:	6963      	ldr	r3, [r4, #20]
 8003a60:	b2f6      	uxtb	r6, r6
 8003a62:	4283      	cmp	r3, r0
 8003a64:	4637      	mov	r7, r6
 8003a66:	dc04      	bgt.n	8003a72 <__swbuf_r+0x42>
 8003a68:	4621      	mov	r1, r4
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f000 ff9e 	bl	80049ac <_fflush_r>
 8003a70:	bb30      	cbnz	r0, 8003ac0 <__swbuf_r+0x90>
 8003a72:	68a3      	ldr	r3, [r4, #8]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	60a3      	str	r3, [r4, #8]
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	6022      	str	r2, [r4, #0]
 8003a7e:	701e      	strb	r6, [r3, #0]
 8003a80:	6963      	ldr	r3, [r4, #20]
 8003a82:	3001      	adds	r0, #1
 8003a84:	4283      	cmp	r3, r0
 8003a86:	d004      	beq.n	8003a92 <__swbuf_r+0x62>
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	07db      	lsls	r3, r3, #31
 8003a8c:	d506      	bpl.n	8003a9c <__swbuf_r+0x6c>
 8003a8e:	2e0a      	cmp	r6, #10
 8003a90:	d104      	bne.n	8003a9c <__swbuf_r+0x6c>
 8003a92:	4621      	mov	r1, r4
 8003a94:	4628      	mov	r0, r5
 8003a96:	f000 ff89 	bl	80049ac <_fflush_r>
 8003a9a:	b988      	cbnz	r0, 8003ac0 <__swbuf_r+0x90>
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <__swbuf_r+0x9c>)
 8003aa2:	429c      	cmp	r4, r3
 8003aa4:	d101      	bne.n	8003aaa <__swbuf_r+0x7a>
 8003aa6:	68ac      	ldr	r4, [r5, #8]
 8003aa8:	e7cf      	b.n	8003a4a <__swbuf_r+0x1a>
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <__swbuf_r+0xa0>)
 8003aac:	429c      	cmp	r4, r3
 8003aae:	bf08      	it	eq
 8003ab0:	68ec      	ldreq	r4, [r5, #12]
 8003ab2:	e7ca      	b.n	8003a4a <__swbuf_r+0x1a>
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 f80c 	bl	8003ad4 <__swsetup_r>
 8003abc:	2800      	cmp	r0, #0
 8003abe:	d0cb      	beq.n	8003a58 <__swbuf_r+0x28>
 8003ac0:	f04f 37ff 	mov.w	r7, #4294967295
 8003ac4:	e7ea      	b.n	8003a9c <__swbuf_r+0x6c>
 8003ac6:	bf00      	nop
 8003ac8:	08007228 	.word	0x08007228
 8003acc:	08007248 	.word	0x08007248
 8003ad0:	08007208 	.word	0x08007208

08003ad4 <__swsetup_r>:
 8003ad4:	4b32      	ldr	r3, [pc, #200]	; (8003ba0 <__swsetup_r+0xcc>)
 8003ad6:	b570      	push	{r4, r5, r6, lr}
 8003ad8:	681d      	ldr	r5, [r3, #0]
 8003ada:	4606      	mov	r6, r0
 8003adc:	460c      	mov	r4, r1
 8003ade:	b125      	cbz	r5, 8003aea <__swsetup_r+0x16>
 8003ae0:	69ab      	ldr	r3, [r5, #24]
 8003ae2:	b913      	cbnz	r3, 8003aea <__swsetup_r+0x16>
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f000 fff5 	bl	8004ad4 <__sinit>
 8003aea:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <__swsetup_r+0xd0>)
 8003aec:	429c      	cmp	r4, r3
 8003aee:	d10f      	bne.n	8003b10 <__swsetup_r+0x3c>
 8003af0:	686c      	ldr	r4, [r5, #4]
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003af8:	0719      	lsls	r1, r3, #28
 8003afa:	d42c      	bmi.n	8003b56 <__swsetup_r+0x82>
 8003afc:	06dd      	lsls	r5, r3, #27
 8003afe:	d411      	bmi.n	8003b24 <__swsetup_r+0x50>
 8003b00:	2309      	movs	r3, #9
 8003b02:	6033      	str	r3, [r6, #0]
 8003b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b08:	81a3      	strh	r3, [r4, #12]
 8003b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0e:	e03e      	b.n	8003b8e <__swsetup_r+0xba>
 8003b10:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <__swsetup_r+0xd4>)
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d101      	bne.n	8003b1a <__swsetup_r+0x46>
 8003b16:	68ac      	ldr	r4, [r5, #8]
 8003b18:	e7eb      	b.n	8003af2 <__swsetup_r+0x1e>
 8003b1a:	4b24      	ldr	r3, [pc, #144]	; (8003bac <__swsetup_r+0xd8>)
 8003b1c:	429c      	cmp	r4, r3
 8003b1e:	bf08      	it	eq
 8003b20:	68ec      	ldreq	r4, [r5, #12]
 8003b22:	e7e6      	b.n	8003af2 <__swsetup_r+0x1e>
 8003b24:	0758      	lsls	r0, r3, #29
 8003b26:	d512      	bpl.n	8003b4e <__swsetup_r+0x7a>
 8003b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b2a:	b141      	cbz	r1, 8003b3e <__swsetup_r+0x6a>
 8003b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b30:	4299      	cmp	r1, r3
 8003b32:	d002      	beq.n	8003b3a <__swsetup_r+0x66>
 8003b34:	4630      	mov	r0, r6
 8003b36:	f001 fc6d 	bl	8005414 <_free_r>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	2300      	movs	r3, #0
 8003b48:	6063      	str	r3, [r4, #4]
 8003b4a:	6923      	ldr	r3, [r4, #16]
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	89a3      	ldrh	r3, [r4, #12]
 8003b50:	f043 0308 	orr.w	r3, r3, #8
 8003b54:	81a3      	strh	r3, [r4, #12]
 8003b56:	6923      	ldr	r3, [r4, #16]
 8003b58:	b94b      	cbnz	r3, 8003b6e <__swsetup_r+0x9a>
 8003b5a:	89a3      	ldrh	r3, [r4, #12]
 8003b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b64:	d003      	beq.n	8003b6e <__swsetup_r+0x9a>
 8003b66:	4621      	mov	r1, r4
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f001 f87d 	bl	8004c68 <__smakebuf_r>
 8003b6e:	89a0      	ldrh	r0, [r4, #12]
 8003b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b74:	f010 0301 	ands.w	r3, r0, #1
 8003b78:	d00a      	beq.n	8003b90 <__swsetup_r+0xbc>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60a3      	str	r3, [r4, #8]
 8003b7e:	6963      	ldr	r3, [r4, #20]
 8003b80:	425b      	negs	r3, r3
 8003b82:	61a3      	str	r3, [r4, #24]
 8003b84:	6923      	ldr	r3, [r4, #16]
 8003b86:	b943      	cbnz	r3, 8003b9a <__swsetup_r+0xc6>
 8003b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b8c:	d1ba      	bne.n	8003b04 <__swsetup_r+0x30>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	0781      	lsls	r1, r0, #30
 8003b92:	bf58      	it	pl
 8003b94:	6963      	ldrpl	r3, [r4, #20]
 8003b96:	60a3      	str	r3, [r4, #8]
 8003b98:	e7f4      	b.n	8003b84 <__swsetup_r+0xb0>
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	e7f7      	b.n	8003b8e <__swsetup_r+0xba>
 8003b9e:	bf00      	nop
 8003ba0:	20000010 	.word	0x20000010
 8003ba4:	08007228 	.word	0x08007228
 8003ba8:	08007248 	.word	0x08007248
 8003bac:	08007208 	.word	0x08007208

08003bb0 <quorem>:
 8003bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	6903      	ldr	r3, [r0, #16]
 8003bb6:	690c      	ldr	r4, [r1, #16]
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	4607      	mov	r7, r0
 8003bbc:	f2c0 8081 	blt.w	8003cc2 <quorem+0x112>
 8003bc0:	3c01      	subs	r4, #1
 8003bc2:	f101 0814 	add.w	r8, r1, #20
 8003bc6:	f100 0514 	add.w	r5, r0, #20
 8003bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003be8:	d331      	bcc.n	8003c4e <quorem+0x9e>
 8003bea:	f04f 0e00 	mov.w	lr, #0
 8003bee:	4640      	mov	r0, r8
 8003bf0:	46ac      	mov	ip, r5
 8003bf2:	46f2      	mov	sl, lr
 8003bf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8003bf8:	b293      	uxth	r3, r2
 8003bfa:	fb06 e303 	mla	r3, r6, r3, lr
 8003bfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	ebaa 0303 	sub.w	r3, sl, r3
 8003c08:	0c12      	lsrs	r2, r2, #16
 8003c0a:	f8dc a000 	ldr.w	sl, [ip]
 8003c0e:	fb06 e202 	mla	r2, r6, r2, lr
 8003c12:	fa13 f38a 	uxtah	r3, r3, sl
 8003c16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c1a:	fa1f fa82 	uxth.w	sl, r2
 8003c1e:	f8dc 2000 	ldr.w	r2, [ip]
 8003c22:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003c26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c30:	4581      	cmp	r9, r0
 8003c32:	f84c 3b04 	str.w	r3, [ip], #4
 8003c36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c3a:	d2db      	bcs.n	8003bf4 <quorem+0x44>
 8003c3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c40:	b92b      	cbnz	r3, 8003c4e <quorem+0x9e>
 8003c42:	9b01      	ldr	r3, [sp, #4]
 8003c44:	3b04      	subs	r3, #4
 8003c46:	429d      	cmp	r5, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	d32e      	bcc.n	8003caa <quorem+0xfa>
 8003c4c:	613c      	str	r4, [r7, #16]
 8003c4e:	4638      	mov	r0, r7
 8003c50:	f001 fad0 	bl	80051f4 <__mcmp>
 8003c54:	2800      	cmp	r0, #0
 8003c56:	db24      	blt.n	8003ca2 <quorem+0xf2>
 8003c58:	3601      	adds	r6, #1
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f04f 0c00 	mov.w	ip, #0
 8003c60:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c64:	f8d0 e000 	ldr.w	lr, [r0]
 8003c68:	b293      	uxth	r3, r2
 8003c6a:	ebac 0303 	sub.w	r3, ip, r3
 8003c6e:	0c12      	lsrs	r2, r2, #16
 8003c70:	fa13 f38e 	uxtah	r3, r3, lr
 8003c74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c82:	45c1      	cmp	r9, r8
 8003c84:	f840 3b04 	str.w	r3, [r0], #4
 8003c88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c8c:	d2e8      	bcs.n	8003c60 <quorem+0xb0>
 8003c8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c96:	b922      	cbnz	r2, 8003ca2 <quorem+0xf2>
 8003c98:	3b04      	subs	r3, #4
 8003c9a:	429d      	cmp	r5, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	d30a      	bcc.n	8003cb6 <quorem+0x106>
 8003ca0:	613c      	str	r4, [r7, #16]
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	b003      	add	sp, #12
 8003ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	3b04      	subs	r3, #4
 8003cae:	2a00      	cmp	r2, #0
 8003cb0:	d1cc      	bne.n	8003c4c <quorem+0x9c>
 8003cb2:	3c01      	subs	r4, #1
 8003cb4:	e7c7      	b.n	8003c46 <quorem+0x96>
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	3b04      	subs	r3, #4
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <quorem+0xf0>
 8003cbe:	3c01      	subs	r4, #1
 8003cc0:	e7eb      	b.n	8003c9a <quorem+0xea>
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	e7ee      	b.n	8003ca4 <quorem+0xf4>
	...

08003cc8 <_dtoa_r>:
 8003cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ccc:	ed2d 8b02 	vpush	{d8}
 8003cd0:	ec57 6b10 	vmov	r6, r7, d0
 8003cd4:	b095      	sub	sp, #84	; 0x54
 8003cd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003cd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003cdc:	9105      	str	r1, [sp, #20]
 8003cde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ce8:	b975      	cbnz	r5, 8003d08 <_dtoa_r+0x40>
 8003cea:	2010      	movs	r0, #16
 8003cec:	f000 fffc 	bl	8004ce8 <malloc>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	6260      	str	r0, [r4, #36]	; 0x24
 8003cf4:	b920      	cbnz	r0, 8003d00 <_dtoa_r+0x38>
 8003cf6:	4bb2      	ldr	r3, [pc, #712]	; (8003fc0 <_dtoa_r+0x2f8>)
 8003cf8:	21ea      	movs	r1, #234	; 0xea
 8003cfa:	48b2      	ldr	r0, [pc, #712]	; (8003fc4 <_dtoa_r+0x2fc>)
 8003cfc:	f001 fdf4 	bl	80058e8 <__assert_func>
 8003d00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003d04:	6005      	str	r5, [r0, #0]
 8003d06:	60c5      	str	r5, [r0, #12]
 8003d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d0a:	6819      	ldr	r1, [r3, #0]
 8003d0c:	b151      	cbz	r1, 8003d24 <_dtoa_r+0x5c>
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	604a      	str	r2, [r1, #4]
 8003d12:	2301      	movs	r3, #1
 8003d14:	4093      	lsls	r3, r2
 8003d16:	608b      	str	r3, [r1, #8]
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f001 f82d 	bl	8004d78 <_Bfree>
 8003d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	1e3b      	subs	r3, r7, #0
 8003d26:	bfb9      	ittee	lt
 8003d28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d2c:	9303      	strlt	r3, [sp, #12]
 8003d2e:	2300      	movge	r3, #0
 8003d30:	f8c8 3000 	strge.w	r3, [r8]
 8003d34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003d38:	4ba3      	ldr	r3, [pc, #652]	; (8003fc8 <_dtoa_r+0x300>)
 8003d3a:	bfbc      	itt	lt
 8003d3c:	2201      	movlt	r2, #1
 8003d3e:	f8c8 2000 	strlt.w	r2, [r8]
 8003d42:	ea33 0309 	bics.w	r3, r3, r9
 8003d46:	d11b      	bne.n	8003d80 <_dtoa_r+0xb8>
 8003d48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d54:	4333      	orrs	r3, r6
 8003d56:	f000 857a 	beq.w	800484e <_dtoa_r+0xb86>
 8003d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d5c:	b963      	cbnz	r3, 8003d78 <_dtoa_r+0xb0>
 8003d5e:	4b9b      	ldr	r3, [pc, #620]	; (8003fcc <_dtoa_r+0x304>)
 8003d60:	e024      	b.n	8003dac <_dtoa_r+0xe4>
 8003d62:	4b9b      	ldr	r3, [pc, #620]	; (8003fd0 <_dtoa_r+0x308>)
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	3308      	adds	r3, #8
 8003d68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	9800      	ldr	r0, [sp, #0]
 8003d6e:	b015      	add	sp, #84	; 0x54
 8003d70:	ecbd 8b02 	vpop	{d8}
 8003d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d78:	4b94      	ldr	r3, [pc, #592]	; (8003fcc <_dtoa_r+0x304>)
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	3303      	adds	r3, #3
 8003d7e:	e7f3      	b.n	8003d68 <_dtoa_r+0xa0>
 8003d80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d84:	2200      	movs	r2, #0
 8003d86:	ec51 0b17 	vmov	r0, r1, d7
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003d90:	f7fc fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d94:	4680      	mov	r8, r0
 8003d96:	b158      	cbz	r0, 8003db0 <_dtoa_r+0xe8>
 8003d98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8551 	beq.w	8004848 <_dtoa_r+0xb80>
 8003da6:	488b      	ldr	r0, [pc, #556]	; (8003fd4 <_dtoa_r+0x30c>)
 8003da8:	6018      	str	r0, [r3, #0]
 8003daa:	1e43      	subs	r3, r0, #1
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	e7dd      	b.n	8003d6c <_dtoa_r+0xa4>
 8003db0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003db4:	aa12      	add	r2, sp, #72	; 0x48
 8003db6:	a913      	add	r1, sp, #76	; 0x4c
 8003db8:	4620      	mov	r0, r4
 8003dba:	f001 fabf 	bl	800533c <__d2b>
 8003dbe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003dc2:	4683      	mov	fp, r0
 8003dc4:	2d00      	cmp	r5, #0
 8003dc6:	d07c      	beq.n	8003ec2 <_dtoa_r+0x1fa>
 8003dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dd2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003dd6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003dda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003dde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003de2:	4b7d      	ldr	r3, [pc, #500]	; (8003fd8 <_dtoa_r+0x310>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	4630      	mov	r0, r6
 8003de8:	4639      	mov	r1, r7
 8003dea:	f7fc fa4d 	bl	8000288 <__aeabi_dsub>
 8003dee:	a36e      	add	r3, pc, #440	; (adr r3, 8003fa8 <_dtoa_r+0x2e0>)
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f7fc fc00 	bl	80005f8 <__aeabi_dmul>
 8003df8:	a36d      	add	r3, pc, #436	; (adr r3, 8003fb0 <_dtoa_r+0x2e8>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f7fc fa45 	bl	800028c <__adddf3>
 8003e02:	4606      	mov	r6, r0
 8003e04:	4628      	mov	r0, r5
 8003e06:	460f      	mov	r7, r1
 8003e08:	f7fc fb8c 	bl	8000524 <__aeabi_i2d>
 8003e0c:	a36a      	add	r3, pc, #424	; (adr r3, 8003fb8 <_dtoa_r+0x2f0>)
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f7fc fbf1 	bl	80005f8 <__aeabi_dmul>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	4639      	mov	r1, r7
 8003e1e:	f7fc fa35 	bl	800028c <__adddf3>
 8003e22:	4606      	mov	r6, r0
 8003e24:	460f      	mov	r7, r1
 8003e26:	f7fc fe97 	bl	8000b58 <__aeabi_d2iz>
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	4682      	mov	sl, r0
 8003e2e:	2300      	movs	r3, #0
 8003e30:	4630      	mov	r0, r6
 8003e32:	4639      	mov	r1, r7
 8003e34:	f7fc fe52 	bl	8000adc <__aeabi_dcmplt>
 8003e38:	b148      	cbz	r0, 8003e4e <_dtoa_r+0x186>
 8003e3a:	4650      	mov	r0, sl
 8003e3c:	f7fc fb72 	bl	8000524 <__aeabi_i2d>
 8003e40:	4632      	mov	r2, r6
 8003e42:	463b      	mov	r3, r7
 8003e44:	f7fc fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e48:	b908      	cbnz	r0, 8003e4e <_dtoa_r+0x186>
 8003e4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e4e:	f1ba 0f16 	cmp.w	sl, #22
 8003e52:	d854      	bhi.n	8003efe <_dtoa_r+0x236>
 8003e54:	4b61      	ldr	r3, [pc, #388]	; (8003fdc <_dtoa_r+0x314>)
 8003e56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e62:	f7fc fe3b 	bl	8000adc <__aeabi_dcmplt>
 8003e66:	2800      	cmp	r0, #0
 8003e68:	d04b      	beq.n	8003f02 <_dtoa_r+0x23a>
 8003e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e6e:	2300      	movs	r3, #0
 8003e70:	930e      	str	r3, [sp, #56]	; 0x38
 8003e72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003e74:	1b5d      	subs	r5, r3, r5
 8003e76:	1e6b      	subs	r3, r5, #1
 8003e78:	9304      	str	r3, [sp, #16]
 8003e7a:	bf43      	ittte	mi
 8003e7c:	2300      	movmi	r3, #0
 8003e7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8003e82:	9304      	strmi	r3, [sp, #16]
 8003e84:	f04f 0800 	movpl.w	r8, #0
 8003e88:	f1ba 0f00 	cmp.w	sl, #0
 8003e8c:	db3b      	blt.n	8003f06 <_dtoa_r+0x23e>
 8003e8e:	9b04      	ldr	r3, [sp, #16]
 8003e90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003e94:	4453      	add	r3, sl
 8003e96:	9304      	str	r3, [sp, #16]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	9306      	str	r3, [sp, #24]
 8003e9c:	9b05      	ldr	r3, [sp, #20]
 8003e9e:	2b09      	cmp	r3, #9
 8003ea0:	d869      	bhi.n	8003f76 <_dtoa_r+0x2ae>
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	bfc4      	itt	gt
 8003ea6:	3b04      	subgt	r3, #4
 8003ea8:	9305      	strgt	r3, [sp, #20]
 8003eaa:	9b05      	ldr	r3, [sp, #20]
 8003eac:	f1a3 0302 	sub.w	r3, r3, #2
 8003eb0:	bfcc      	ite	gt
 8003eb2:	2500      	movgt	r5, #0
 8003eb4:	2501      	movle	r5, #1
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d869      	bhi.n	8003f8e <_dtoa_r+0x2c6>
 8003eba:	e8df f003 	tbb	[pc, r3]
 8003ebe:	4e2c      	.short	0x4e2c
 8003ec0:	5a4c      	.short	0x5a4c
 8003ec2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003ec6:	441d      	add	r5, r3
 8003ec8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	bfc1      	itttt	gt
 8003ed0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003ed4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003ed8:	fa09 f303 	lslgt.w	r3, r9, r3
 8003edc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003ee0:	bfda      	itte	le
 8003ee2:	f1c3 0320 	rsble	r3, r3, #32
 8003ee6:	fa06 f003 	lslle.w	r0, r6, r3
 8003eea:	4318      	orrgt	r0, r3
 8003eec:	f7fc fb0a 	bl	8000504 <__aeabi_ui2d>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003ef8:	3d01      	subs	r5, #1
 8003efa:	9310      	str	r3, [sp, #64]	; 0x40
 8003efc:	e771      	b.n	8003de2 <_dtoa_r+0x11a>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e7b6      	b.n	8003e70 <_dtoa_r+0x1a8>
 8003f02:	900e      	str	r0, [sp, #56]	; 0x38
 8003f04:	e7b5      	b.n	8003e72 <_dtoa_r+0x1aa>
 8003f06:	f1ca 0300 	rsb	r3, sl, #0
 8003f0a:	9306      	str	r3, [sp, #24]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	eba8 080a 	sub.w	r8, r8, sl
 8003f12:	930d      	str	r3, [sp, #52]	; 0x34
 8003f14:	e7c2      	b.n	8003e9c <_dtoa_r+0x1d4>
 8003f16:	2300      	movs	r3, #0
 8003f18:	9308      	str	r3, [sp, #32]
 8003f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	dc39      	bgt.n	8003f94 <_dtoa_r+0x2cc>
 8003f20:	f04f 0901 	mov.w	r9, #1
 8003f24:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f28:	464b      	mov	r3, r9
 8003f2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003f2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f30:	2200      	movs	r2, #0
 8003f32:	6042      	str	r2, [r0, #4]
 8003f34:	2204      	movs	r2, #4
 8003f36:	f102 0614 	add.w	r6, r2, #20
 8003f3a:	429e      	cmp	r6, r3
 8003f3c:	6841      	ldr	r1, [r0, #4]
 8003f3e:	d92f      	bls.n	8003fa0 <_dtoa_r+0x2d8>
 8003f40:	4620      	mov	r0, r4
 8003f42:	f000 fed9 	bl	8004cf8 <_Balloc>
 8003f46:	9000      	str	r0, [sp, #0]
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d14b      	bne.n	8003fe4 <_dtoa_r+0x31c>
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <_dtoa_r+0x318>)
 8003f4e:	4602      	mov	r2, r0
 8003f50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003f54:	e6d1      	b.n	8003cfa <_dtoa_r+0x32>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e7de      	b.n	8003f18 <_dtoa_r+0x250>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9308      	str	r3, [sp, #32]
 8003f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f60:	eb0a 0903 	add.w	r9, sl, r3
 8003f64:	f109 0301 	add.w	r3, r9, #1
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	bfb8      	it	lt
 8003f6e:	2301      	movlt	r3, #1
 8003f70:	e7dd      	b.n	8003f2e <_dtoa_r+0x266>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e7f2      	b.n	8003f5c <_dtoa_r+0x294>
 8003f76:	2501      	movs	r5, #1
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9305      	str	r3, [sp, #20]
 8003f7c:	9508      	str	r5, [sp, #32]
 8003f7e:	f04f 39ff 	mov.w	r9, #4294967295
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f88:	2312      	movs	r3, #18
 8003f8a:	9209      	str	r2, [sp, #36]	; 0x24
 8003f8c:	e7cf      	b.n	8003f2e <_dtoa_r+0x266>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	9308      	str	r3, [sp, #32]
 8003f92:	e7f4      	b.n	8003f7e <_dtoa_r+0x2b6>
 8003f94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003f98:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f9c:	464b      	mov	r3, r9
 8003f9e:	e7c6      	b.n	8003f2e <_dtoa_r+0x266>
 8003fa0:	3101      	adds	r1, #1
 8003fa2:	6041      	str	r1, [r0, #4]
 8003fa4:	0052      	lsls	r2, r2, #1
 8003fa6:	e7c6      	b.n	8003f36 <_dtoa_r+0x26e>
 8003fa8:	636f4361 	.word	0x636f4361
 8003fac:	3fd287a7 	.word	0x3fd287a7
 8003fb0:	8b60c8b3 	.word	0x8b60c8b3
 8003fb4:	3fc68a28 	.word	0x3fc68a28
 8003fb8:	509f79fb 	.word	0x509f79fb
 8003fbc:	3fd34413 	.word	0x3fd34413
 8003fc0:	08007181 	.word	0x08007181
 8003fc4:	08007198 	.word	0x08007198
 8003fc8:	7ff00000 	.word	0x7ff00000
 8003fcc:	0800717d 	.word	0x0800717d
 8003fd0:	08007174 	.word	0x08007174
 8003fd4:	08007151 	.word	0x08007151
 8003fd8:	3ff80000 	.word	0x3ff80000
 8003fdc:	080072f0 	.word	0x080072f0
 8003fe0:	080071f7 	.word	0x080071f7
 8003fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fe6:	9a00      	ldr	r2, [sp, #0]
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	9b01      	ldr	r3, [sp, #4]
 8003fec:	2b0e      	cmp	r3, #14
 8003fee:	f200 80ad 	bhi.w	800414c <_dtoa_r+0x484>
 8003ff2:	2d00      	cmp	r5, #0
 8003ff4:	f000 80aa 	beq.w	800414c <_dtoa_r+0x484>
 8003ff8:	f1ba 0f00 	cmp.w	sl, #0
 8003ffc:	dd36      	ble.n	800406c <_dtoa_r+0x3a4>
 8003ffe:	4ac3      	ldr	r2, [pc, #780]	; (800430c <_dtoa_r+0x644>)
 8004000:	f00a 030f 	and.w	r3, sl, #15
 8004004:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004008:	ed93 7b00 	vldr	d7, [r3]
 800400c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004010:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004014:	eeb0 8a47 	vmov.f32	s16, s14
 8004018:	eef0 8a67 	vmov.f32	s17, s15
 800401c:	d016      	beq.n	800404c <_dtoa_r+0x384>
 800401e:	4bbc      	ldr	r3, [pc, #752]	; (8004310 <_dtoa_r+0x648>)
 8004020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004028:	f7fc fc10 	bl	800084c <__aeabi_ddiv>
 800402c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004030:	f007 070f 	and.w	r7, r7, #15
 8004034:	2503      	movs	r5, #3
 8004036:	4eb6      	ldr	r6, [pc, #728]	; (8004310 <_dtoa_r+0x648>)
 8004038:	b957      	cbnz	r7, 8004050 <_dtoa_r+0x388>
 800403a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800403e:	ec53 2b18 	vmov	r2, r3, d8
 8004042:	f7fc fc03 	bl	800084c <__aeabi_ddiv>
 8004046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800404a:	e029      	b.n	80040a0 <_dtoa_r+0x3d8>
 800404c:	2502      	movs	r5, #2
 800404e:	e7f2      	b.n	8004036 <_dtoa_r+0x36e>
 8004050:	07f9      	lsls	r1, r7, #31
 8004052:	d508      	bpl.n	8004066 <_dtoa_r+0x39e>
 8004054:	ec51 0b18 	vmov	r0, r1, d8
 8004058:	e9d6 2300 	ldrd	r2, r3, [r6]
 800405c:	f7fc facc 	bl	80005f8 <__aeabi_dmul>
 8004060:	ec41 0b18 	vmov	d8, r0, r1
 8004064:	3501      	adds	r5, #1
 8004066:	107f      	asrs	r7, r7, #1
 8004068:	3608      	adds	r6, #8
 800406a:	e7e5      	b.n	8004038 <_dtoa_r+0x370>
 800406c:	f000 80a6 	beq.w	80041bc <_dtoa_r+0x4f4>
 8004070:	f1ca 0600 	rsb	r6, sl, #0
 8004074:	4ba5      	ldr	r3, [pc, #660]	; (800430c <_dtoa_r+0x644>)
 8004076:	4fa6      	ldr	r7, [pc, #664]	; (8004310 <_dtoa_r+0x648>)
 8004078:	f006 020f 	and.w	r2, r6, #15
 800407c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004088:	f7fc fab6 	bl	80005f8 <__aeabi_dmul>
 800408c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004090:	1136      	asrs	r6, r6, #4
 8004092:	2300      	movs	r3, #0
 8004094:	2502      	movs	r5, #2
 8004096:	2e00      	cmp	r6, #0
 8004098:	f040 8085 	bne.w	80041a6 <_dtoa_r+0x4de>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1d2      	bne.n	8004046 <_dtoa_r+0x37e>
 80040a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 808c 	beq.w	80041c0 <_dtoa_r+0x4f8>
 80040a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80040ac:	4b99      	ldr	r3, [pc, #612]	; (8004314 <_dtoa_r+0x64c>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	4630      	mov	r0, r6
 80040b2:	4639      	mov	r1, r7
 80040b4:	f7fc fd12 	bl	8000adc <__aeabi_dcmplt>
 80040b8:	2800      	cmp	r0, #0
 80040ba:	f000 8081 	beq.w	80041c0 <_dtoa_r+0x4f8>
 80040be:	9b01      	ldr	r3, [sp, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d07d      	beq.n	80041c0 <_dtoa_r+0x4f8>
 80040c4:	f1b9 0f00 	cmp.w	r9, #0
 80040c8:	dd3c      	ble.n	8004144 <_dtoa_r+0x47c>
 80040ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80040ce:	9307      	str	r3, [sp, #28]
 80040d0:	2200      	movs	r2, #0
 80040d2:	4b91      	ldr	r3, [pc, #580]	; (8004318 <_dtoa_r+0x650>)
 80040d4:	4630      	mov	r0, r6
 80040d6:	4639      	mov	r1, r7
 80040d8:	f7fc fa8e 	bl	80005f8 <__aeabi_dmul>
 80040dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040e0:	3501      	adds	r5, #1
 80040e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80040e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80040ea:	4628      	mov	r0, r5
 80040ec:	f7fc fa1a 	bl	8000524 <__aeabi_i2d>
 80040f0:	4632      	mov	r2, r6
 80040f2:	463b      	mov	r3, r7
 80040f4:	f7fc fa80 	bl	80005f8 <__aeabi_dmul>
 80040f8:	4b88      	ldr	r3, [pc, #544]	; (800431c <_dtoa_r+0x654>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	f7fc f8c6 	bl	800028c <__adddf3>
 8004100:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004108:	9303      	str	r3, [sp, #12]
 800410a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800410c:	2b00      	cmp	r3, #0
 800410e:	d15c      	bne.n	80041ca <_dtoa_r+0x502>
 8004110:	4b83      	ldr	r3, [pc, #524]	; (8004320 <_dtoa_r+0x658>)
 8004112:	2200      	movs	r2, #0
 8004114:	4630      	mov	r0, r6
 8004116:	4639      	mov	r1, r7
 8004118:	f7fc f8b6 	bl	8000288 <__aeabi_dsub>
 800411c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004120:	4606      	mov	r6, r0
 8004122:	460f      	mov	r7, r1
 8004124:	f7fc fcf8 	bl	8000b18 <__aeabi_dcmpgt>
 8004128:	2800      	cmp	r0, #0
 800412a:	f040 8296 	bne.w	800465a <_dtoa_r+0x992>
 800412e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004132:	4630      	mov	r0, r6
 8004134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004138:	4639      	mov	r1, r7
 800413a:	f7fc fccf 	bl	8000adc <__aeabi_dcmplt>
 800413e:	2800      	cmp	r0, #0
 8004140:	f040 8288 	bne.w	8004654 <_dtoa_r+0x98c>
 8004144:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004148:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800414c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800414e:	2b00      	cmp	r3, #0
 8004150:	f2c0 8158 	blt.w	8004404 <_dtoa_r+0x73c>
 8004154:	f1ba 0f0e 	cmp.w	sl, #14
 8004158:	f300 8154 	bgt.w	8004404 <_dtoa_r+0x73c>
 800415c:	4b6b      	ldr	r3, [pc, #428]	; (800430c <_dtoa_r+0x644>)
 800415e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004162:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	f280 80e3 	bge.w	8004334 <_dtoa_r+0x66c>
 800416e:	9b01      	ldr	r3, [sp, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f300 80df 	bgt.w	8004334 <_dtoa_r+0x66c>
 8004176:	f040 826d 	bne.w	8004654 <_dtoa_r+0x98c>
 800417a:	4b69      	ldr	r3, [pc, #420]	; (8004320 <_dtoa_r+0x658>)
 800417c:	2200      	movs	r2, #0
 800417e:	4640      	mov	r0, r8
 8004180:	4649      	mov	r1, r9
 8004182:	f7fc fa39 	bl	80005f8 <__aeabi_dmul>
 8004186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800418a:	f7fc fcbb 	bl	8000b04 <__aeabi_dcmpge>
 800418e:	9e01      	ldr	r6, [sp, #4]
 8004190:	4637      	mov	r7, r6
 8004192:	2800      	cmp	r0, #0
 8004194:	f040 8243 	bne.w	800461e <_dtoa_r+0x956>
 8004198:	9d00      	ldr	r5, [sp, #0]
 800419a:	2331      	movs	r3, #49	; 0x31
 800419c:	f805 3b01 	strb.w	r3, [r5], #1
 80041a0:	f10a 0a01 	add.w	sl, sl, #1
 80041a4:	e23f      	b.n	8004626 <_dtoa_r+0x95e>
 80041a6:	07f2      	lsls	r2, r6, #31
 80041a8:	d505      	bpl.n	80041b6 <_dtoa_r+0x4ee>
 80041aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ae:	f7fc fa23 	bl	80005f8 <__aeabi_dmul>
 80041b2:	3501      	adds	r5, #1
 80041b4:	2301      	movs	r3, #1
 80041b6:	1076      	asrs	r6, r6, #1
 80041b8:	3708      	adds	r7, #8
 80041ba:	e76c      	b.n	8004096 <_dtoa_r+0x3ce>
 80041bc:	2502      	movs	r5, #2
 80041be:	e76f      	b.n	80040a0 <_dtoa_r+0x3d8>
 80041c0:	9b01      	ldr	r3, [sp, #4]
 80041c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80041c6:	930c      	str	r3, [sp, #48]	; 0x30
 80041c8:	e78d      	b.n	80040e6 <_dtoa_r+0x41e>
 80041ca:	9900      	ldr	r1, [sp, #0]
 80041cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80041ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041d0:	4b4e      	ldr	r3, [pc, #312]	; (800430c <_dtoa_r+0x644>)
 80041d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80041d6:	4401      	add	r1, r0
 80041d8:	9102      	str	r1, [sp, #8]
 80041da:	9908      	ldr	r1, [sp, #32]
 80041dc:	eeb0 8a47 	vmov.f32	s16, s14
 80041e0:	eef0 8a67 	vmov.f32	s17, s15
 80041e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041ec:	2900      	cmp	r1, #0
 80041ee:	d045      	beq.n	800427c <_dtoa_r+0x5b4>
 80041f0:	494c      	ldr	r1, [pc, #304]	; (8004324 <_dtoa_r+0x65c>)
 80041f2:	2000      	movs	r0, #0
 80041f4:	f7fc fb2a 	bl	800084c <__aeabi_ddiv>
 80041f8:	ec53 2b18 	vmov	r2, r3, d8
 80041fc:	f7fc f844 	bl	8000288 <__aeabi_dsub>
 8004200:	9d00      	ldr	r5, [sp, #0]
 8004202:	ec41 0b18 	vmov	d8, r0, r1
 8004206:	4639      	mov	r1, r7
 8004208:	4630      	mov	r0, r6
 800420a:	f7fc fca5 	bl	8000b58 <__aeabi_d2iz>
 800420e:	900c      	str	r0, [sp, #48]	; 0x30
 8004210:	f7fc f988 	bl	8000524 <__aeabi_i2d>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4630      	mov	r0, r6
 800421a:	4639      	mov	r1, r7
 800421c:	f7fc f834 	bl	8000288 <__aeabi_dsub>
 8004220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004222:	3330      	adds	r3, #48	; 0x30
 8004224:	f805 3b01 	strb.w	r3, [r5], #1
 8004228:	ec53 2b18 	vmov	r2, r3, d8
 800422c:	4606      	mov	r6, r0
 800422e:	460f      	mov	r7, r1
 8004230:	f7fc fc54 	bl	8000adc <__aeabi_dcmplt>
 8004234:	2800      	cmp	r0, #0
 8004236:	d165      	bne.n	8004304 <_dtoa_r+0x63c>
 8004238:	4632      	mov	r2, r6
 800423a:	463b      	mov	r3, r7
 800423c:	4935      	ldr	r1, [pc, #212]	; (8004314 <_dtoa_r+0x64c>)
 800423e:	2000      	movs	r0, #0
 8004240:	f7fc f822 	bl	8000288 <__aeabi_dsub>
 8004244:	ec53 2b18 	vmov	r2, r3, d8
 8004248:	f7fc fc48 	bl	8000adc <__aeabi_dcmplt>
 800424c:	2800      	cmp	r0, #0
 800424e:	f040 80b9 	bne.w	80043c4 <_dtoa_r+0x6fc>
 8004252:	9b02      	ldr	r3, [sp, #8]
 8004254:	429d      	cmp	r5, r3
 8004256:	f43f af75 	beq.w	8004144 <_dtoa_r+0x47c>
 800425a:	4b2f      	ldr	r3, [pc, #188]	; (8004318 <_dtoa_r+0x650>)
 800425c:	ec51 0b18 	vmov	r0, r1, d8
 8004260:	2200      	movs	r2, #0
 8004262:	f7fc f9c9 	bl	80005f8 <__aeabi_dmul>
 8004266:	4b2c      	ldr	r3, [pc, #176]	; (8004318 <_dtoa_r+0x650>)
 8004268:	ec41 0b18 	vmov	d8, r0, r1
 800426c:	2200      	movs	r2, #0
 800426e:	4630      	mov	r0, r6
 8004270:	4639      	mov	r1, r7
 8004272:	f7fc f9c1 	bl	80005f8 <__aeabi_dmul>
 8004276:	4606      	mov	r6, r0
 8004278:	460f      	mov	r7, r1
 800427a:	e7c4      	b.n	8004206 <_dtoa_r+0x53e>
 800427c:	ec51 0b17 	vmov	r0, r1, d7
 8004280:	f7fc f9ba 	bl	80005f8 <__aeabi_dmul>
 8004284:	9b02      	ldr	r3, [sp, #8]
 8004286:	9d00      	ldr	r5, [sp, #0]
 8004288:	930c      	str	r3, [sp, #48]	; 0x30
 800428a:	ec41 0b18 	vmov	d8, r0, r1
 800428e:	4639      	mov	r1, r7
 8004290:	4630      	mov	r0, r6
 8004292:	f7fc fc61 	bl	8000b58 <__aeabi_d2iz>
 8004296:	9011      	str	r0, [sp, #68]	; 0x44
 8004298:	f7fc f944 	bl	8000524 <__aeabi_i2d>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4630      	mov	r0, r6
 80042a2:	4639      	mov	r1, r7
 80042a4:	f7fb fff0 	bl	8000288 <__aeabi_dsub>
 80042a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042aa:	3330      	adds	r3, #48	; 0x30
 80042ac:	f805 3b01 	strb.w	r3, [r5], #1
 80042b0:	9b02      	ldr	r3, [sp, #8]
 80042b2:	429d      	cmp	r5, r3
 80042b4:	4606      	mov	r6, r0
 80042b6:	460f      	mov	r7, r1
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	d134      	bne.n	8004328 <_dtoa_r+0x660>
 80042be:	4b19      	ldr	r3, [pc, #100]	; (8004324 <_dtoa_r+0x65c>)
 80042c0:	ec51 0b18 	vmov	r0, r1, d8
 80042c4:	f7fb ffe2 	bl	800028c <__adddf3>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4630      	mov	r0, r6
 80042ce:	4639      	mov	r1, r7
 80042d0:	f7fc fc22 	bl	8000b18 <__aeabi_dcmpgt>
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d175      	bne.n	80043c4 <_dtoa_r+0x6fc>
 80042d8:	ec53 2b18 	vmov	r2, r3, d8
 80042dc:	4911      	ldr	r1, [pc, #68]	; (8004324 <_dtoa_r+0x65c>)
 80042de:	2000      	movs	r0, #0
 80042e0:	f7fb ffd2 	bl	8000288 <__aeabi_dsub>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4630      	mov	r0, r6
 80042ea:	4639      	mov	r1, r7
 80042ec:	f7fc fbf6 	bl	8000adc <__aeabi_dcmplt>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	f43f af27 	beq.w	8004144 <_dtoa_r+0x47c>
 80042f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042f8:	1e6b      	subs	r3, r5, #1
 80042fa:	930c      	str	r3, [sp, #48]	; 0x30
 80042fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004300:	2b30      	cmp	r3, #48	; 0x30
 8004302:	d0f8      	beq.n	80042f6 <_dtoa_r+0x62e>
 8004304:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004308:	e04a      	b.n	80043a0 <_dtoa_r+0x6d8>
 800430a:	bf00      	nop
 800430c:	080072f0 	.word	0x080072f0
 8004310:	080072c8 	.word	0x080072c8
 8004314:	3ff00000 	.word	0x3ff00000
 8004318:	40240000 	.word	0x40240000
 800431c:	401c0000 	.word	0x401c0000
 8004320:	40140000 	.word	0x40140000
 8004324:	3fe00000 	.word	0x3fe00000
 8004328:	4baf      	ldr	r3, [pc, #700]	; (80045e8 <_dtoa_r+0x920>)
 800432a:	f7fc f965 	bl	80005f8 <__aeabi_dmul>
 800432e:	4606      	mov	r6, r0
 8004330:	460f      	mov	r7, r1
 8004332:	e7ac      	b.n	800428e <_dtoa_r+0x5c6>
 8004334:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004338:	9d00      	ldr	r5, [sp, #0]
 800433a:	4642      	mov	r2, r8
 800433c:	464b      	mov	r3, r9
 800433e:	4630      	mov	r0, r6
 8004340:	4639      	mov	r1, r7
 8004342:	f7fc fa83 	bl	800084c <__aeabi_ddiv>
 8004346:	f7fc fc07 	bl	8000b58 <__aeabi_d2iz>
 800434a:	9002      	str	r0, [sp, #8]
 800434c:	f7fc f8ea 	bl	8000524 <__aeabi_i2d>
 8004350:	4642      	mov	r2, r8
 8004352:	464b      	mov	r3, r9
 8004354:	f7fc f950 	bl	80005f8 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4630      	mov	r0, r6
 800435e:	4639      	mov	r1, r7
 8004360:	f7fb ff92 	bl	8000288 <__aeabi_dsub>
 8004364:	9e02      	ldr	r6, [sp, #8]
 8004366:	9f01      	ldr	r7, [sp, #4]
 8004368:	3630      	adds	r6, #48	; 0x30
 800436a:	f805 6b01 	strb.w	r6, [r5], #1
 800436e:	9e00      	ldr	r6, [sp, #0]
 8004370:	1bae      	subs	r6, r5, r6
 8004372:	42b7      	cmp	r7, r6
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	d137      	bne.n	80043ea <_dtoa_r+0x722>
 800437a:	f7fb ff87 	bl	800028c <__adddf3>
 800437e:	4642      	mov	r2, r8
 8004380:	464b      	mov	r3, r9
 8004382:	4606      	mov	r6, r0
 8004384:	460f      	mov	r7, r1
 8004386:	f7fc fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 800438a:	b9c8      	cbnz	r0, 80043c0 <_dtoa_r+0x6f8>
 800438c:	4642      	mov	r2, r8
 800438e:	464b      	mov	r3, r9
 8004390:	4630      	mov	r0, r6
 8004392:	4639      	mov	r1, r7
 8004394:	f7fc fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 8004398:	b110      	cbz	r0, 80043a0 <_dtoa_r+0x6d8>
 800439a:	9b02      	ldr	r3, [sp, #8]
 800439c:	07d9      	lsls	r1, r3, #31
 800439e:	d40f      	bmi.n	80043c0 <_dtoa_r+0x6f8>
 80043a0:	4620      	mov	r0, r4
 80043a2:	4659      	mov	r1, fp
 80043a4:	f000 fce8 	bl	8004d78 <_Bfree>
 80043a8:	2300      	movs	r3, #0
 80043aa:	702b      	strb	r3, [r5, #0]
 80043ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043ae:	f10a 0001 	add.w	r0, sl, #1
 80043b2:	6018      	str	r0, [r3, #0]
 80043b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f43f acd8 	beq.w	8003d6c <_dtoa_r+0xa4>
 80043bc:	601d      	str	r5, [r3, #0]
 80043be:	e4d5      	b.n	8003d6c <_dtoa_r+0xa4>
 80043c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80043c4:	462b      	mov	r3, r5
 80043c6:	461d      	mov	r5, r3
 80043c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043cc:	2a39      	cmp	r2, #57	; 0x39
 80043ce:	d108      	bne.n	80043e2 <_dtoa_r+0x71a>
 80043d0:	9a00      	ldr	r2, [sp, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d1f7      	bne.n	80043c6 <_dtoa_r+0x6fe>
 80043d6:	9a07      	ldr	r2, [sp, #28]
 80043d8:	9900      	ldr	r1, [sp, #0]
 80043da:	3201      	adds	r2, #1
 80043dc:	9207      	str	r2, [sp, #28]
 80043de:	2230      	movs	r2, #48	; 0x30
 80043e0:	700a      	strb	r2, [r1, #0]
 80043e2:	781a      	ldrb	r2, [r3, #0]
 80043e4:	3201      	adds	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	e78c      	b.n	8004304 <_dtoa_r+0x63c>
 80043ea:	4b7f      	ldr	r3, [pc, #508]	; (80045e8 <_dtoa_r+0x920>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	f7fc f903 	bl	80005f8 <__aeabi_dmul>
 80043f2:	2200      	movs	r2, #0
 80043f4:	2300      	movs	r3, #0
 80043f6:	4606      	mov	r6, r0
 80043f8:	460f      	mov	r7, r1
 80043fa:	f7fc fb65 	bl	8000ac8 <__aeabi_dcmpeq>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d09b      	beq.n	800433a <_dtoa_r+0x672>
 8004402:	e7cd      	b.n	80043a0 <_dtoa_r+0x6d8>
 8004404:	9a08      	ldr	r2, [sp, #32]
 8004406:	2a00      	cmp	r2, #0
 8004408:	f000 80c4 	beq.w	8004594 <_dtoa_r+0x8cc>
 800440c:	9a05      	ldr	r2, [sp, #20]
 800440e:	2a01      	cmp	r2, #1
 8004410:	f300 80a8 	bgt.w	8004564 <_dtoa_r+0x89c>
 8004414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004416:	2a00      	cmp	r2, #0
 8004418:	f000 80a0 	beq.w	800455c <_dtoa_r+0x894>
 800441c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004420:	9e06      	ldr	r6, [sp, #24]
 8004422:	4645      	mov	r5, r8
 8004424:	9a04      	ldr	r2, [sp, #16]
 8004426:	2101      	movs	r1, #1
 8004428:	441a      	add	r2, r3
 800442a:	4620      	mov	r0, r4
 800442c:	4498      	add	r8, r3
 800442e:	9204      	str	r2, [sp, #16]
 8004430:	f000 fd5e 	bl	8004ef0 <__i2b>
 8004434:	4607      	mov	r7, r0
 8004436:	2d00      	cmp	r5, #0
 8004438:	dd0b      	ble.n	8004452 <_dtoa_r+0x78a>
 800443a:	9b04      	ldr	r3, [sp, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	dd08      	ble.n	8004452 <_dtoa_r+0x78a>
 8004440:	42ab      	cmp	r3, r5
 8004442:	9a04      	ldr	r2, [sp, #16]
 8004444:	bfa8      	it	ge
 8004446:	462b      	movge	r3, r5
 8004448:	eba8 0803 	sub.w	r8, r8, r3
 800444c:	1aed      	subs	r5, r5, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	9304      	str	r3, [sp, #16]
 8004452:	9b06      	ldr	r3, [sp, #24]
 8004454:	b1fb      	cbz	r3, 8004496 <_dtoa_r+0x7ce>
 8004456:	9b08      	ldr	r3, [sp, #32]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 809f 	beq.w	800459c <_dtoa_r+0x8d4>
 800445e:	2e00      	cmp	r6, #0
 8004460:	dd11      	ble.n	8004486 <_dtoa_r+0x7be>
 8004462:	4639      	mov	r1, r7
 8004464:	4632      	mov	r2, r6
 8004466:	4620      	mov	r0, r4
 8004468:	f000 fdfe 	bl	8005068 <__pow5mult>
 800446c:	465a      	mov	r2, fp
 800446e:	4601      	mov	r1, r0
 8004470:	4607      	mov	r7, r0
 8004472:	4620      	mov	r0, r4
 8004474:	f000 fd52 	bl	8004f1c <__multiply>
 8004478:	4659      	mov	r1, fp
 800447a:	9007      	str	r0, [sp, #28]
 800447c:	4620      	mov	r0, r4
 800447e:	f000 fc7b 	bl	8004d78 <_Bfree>
 8004482:	9b07      	ldr	r3, [sp, #28]
 8004484:	469b      	mov	fp, r3
 8004486:	9b06      	ldr	r3, [sp, #24]
 8004488:	1b9a      	subs	r2, r3, r6
 800448a:	d004      	beq.n	8004496 <_dtoa_r+0x7ce>
 800448c:	4659      	mov	r1, fp
 800448e:	4620      	mov	r0, r4
 8004490:	f000 fdea 	bl	8005068 <__pow5mult>
 8004494:	4683      	mov	fp, r0
 8004496:	2101      	movs	r1, #1
 8004498:	4620      	mov	r0, r4
 800449a:	f000 fd29 	bl	8004ef0 <__i2b>
 800449e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	4606      	mov	r6, r0
 80044a4:	dd7c      	ble.n	80045a0 <_dtoa_r+0x8d8>
 80044a6:	461a      	mov	r2, r3
 80044a8:	4601      	mov	r1, r0
 80044aa:	4620      	mov	r0, r4
 80044ac:	f000 fddc 	bl	8005068 <__pow5mult>
 80044b0:	9b05      	ldr	r3, [sp, #20]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	4606      	mov	r6, r0
 80044b6:	dd76      	ble.n	80045a6 <_dtoa_r+0x8de>
 80044b8:	2300      	movs	r3, #0
 80044ba:	9306      	str	r3, [sp, #24]
 80044bc:	6933      	ldr	r3, [r6, #16]
 80044be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80044c2:	6918      	ldr	r0, [r3, #16]
 80044c4:	f000 fcc4 	bl	8004e50 <__hi0bits>
 80044c8:	f1c0 0020 	rsb	r0, r0, #32
 80044cc:	9b04      	ldr	r3, [sp, #16]
 80044ce:	4418      	add	r0, r3
 80044d0:	f010 001f 	ands.w	r0, r0, #31
 80044d4:	f000 8086 	beq.w	80045e4 <_dtoa_r+0x91c>
 80044d8:	f1c0 0320 	rsb	r3, r0, #32
 80044dc:	2b04      	cmp	r3, #4
 80044de:	dd7f      	ble.n	80045e0 <_dtoa_r+0x918>
 80044e0:	f1c0 001c 	rsb	r0, r0, #28
 80044e4:	9b04      	ldr	r3, [sp, #16]
 80044e6:	4403      	add	r3, r0
 80044e8:	4480      	add	r8, r0
 80044ea:	4405      	add	r5, r0
 80044ec:	9304      	str	r3, [sp, #16]
 80044ee:	f1b8 0f00 	cmp.w	r8, #0
 80044f2:	dd05      	ble.n	8004500 <_dtoa_r+0x838>
 80044f4:	4659      	mov	r1, fp
 80044f6:	4642      	mov	r2, r8
 80044f8:	4620      	mov	r0, r4
 80044fa:	f000 fe0f 	bl	800511c <__lshift>
 80044fe:	4683      	mov	fp, r0
 8004500:	9b04      	ldr	r3, [sp, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	dd05      	ble.n	8004512 <_dtoa_r+0x84a>
 8004506:	4631      	mov	r1, r6
 8004508:	461a      	mov	r2, r3
 800450a:	4620      	mov	r0, r4
 800450c:	f000 fe06 	bl	800511c <__lshift>
 8004510:	4606      	mov	r6, r0
 8004512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004514:	2b00      	cmp	r3, #0
 8004516:	d069      	beq.n	80045ec <_dtoa_r+0x924>
 8004518:	4631      	mov	r1, r6
 800451a:	4658      	mov	r0, fp
 800451c:	f000 fe6a 	bl	80051f4 <__mcmp>
 8004520:	2800      	cmp	r0, #0
 8004522:	da63      	bge.n	80045ec <_dtoa_r+0x924>
 8004524:	2300      	movs	r3, #0
 8004526:	4659      	mov	r1, fp
 8004528:	220a      	movs	r2, #10
 800452a:	4620      	mov	r0, r4
 800452c:	f000 fc46 	bl	8004dbc <__multadd>
 8004530:	9b08      	ldr	r3, [sp, #32]
 8004532:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004536:	4683      	mov	fp, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 818f 	beq.w	800485c <_dtoa_r+0xb94>
 800453e:	4639      	mov	r1, r7
 8004540:	2300      	movs	r3, #0
 8004542:	220a      	movs	r2, #10
 8004544:	4620      	mov	r0, r4
 8004546:	f000 fc39 	bl	8004dbc <__multadd>
 800454a:	f1b9 0f00 	cmp.w	r9, #0
 800454e:	4607      	mov	r7, r0
 8004550:	f300 808e 	bgt.w	8004670 <_dtoa_r+0x9a8>
 8004554:	9b05      	ldr	r3, [sp, #20]
 8004556:	2b02      	cmp	r3, #2
 8004558:	dc50      	bgt.n	80045fc <_dtoa_r+0x934>
 800455a:	e089      	b.n	8004670 <_dtoa_r+0x9a8>
 800455c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800455e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004562:	e75d      	b.n	8004420 <_dtoa_r+0x758>
 8004564:	9b01      	ldr	r3, [sp, #4]
 8004566:	1e5e      	subs	r6, r3, #1
 8004568:	9b06      	ldr	r3, [sp, #24]
 800456a:	42b3      	cmp	r3, r6
 800456c:	bfbf      	itttt	lt
 800456e:	9b06      	ldrlt	r3, [sp, #24]
 8004570:	9606      	strlt	r6, [sp, #24]
 8004572:	1af2      	sublt	r2, r6, r3
 8004574:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004576:	bfb6      	itet	lt
 8004578:	189b      	addlt	r3, r3, r2
 800457a:	1b9e      	subge	r6, r3, r6
 800457c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800457e:	9b01      	ldr	r3, [sp, #4]
 8004580:	bfb8      	it	lt
 8004582:	2600      	movlt	r6, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	bfb5      	itete	lt
 8004588:	eba8 0503 	sublt.w	r5, r8, r3
 800458c:	9b01      	ldrge	r3, [sp, #4]
 800458e:	2300      	movlt	r3, #0
 8004590:	4645      	movge	r5, r8
 8004592:	e747      	b.n	8004424 <_dtoa_r+0x75c>
 8004594:	9e06      	ldr	r6, [sp, #24]
 8004596:	9f08      	ldr	r7, [sp, #32]
 8004598:	4645      	mov	r5, r8
 800459a:	e74c      	b.n	8004436 <_dtoa_r+0x76e>
 800459c:	9a06      	ldr	r2, [sp, #24]
 800459e:	e775      	b.n	800448c <_dtoa_r+0x7c4>
 80045a0:	9b05      	ldr	r3, [sp, #20]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	dc18      	bgt.n	80045d8 <_dtoa_r+0x910>
 80045a6:	9b02      	ldr	r3, [sp, #8]
 80045a8:	b9b3      	cbnz	r3, 80045d8 <_dtoa_r+0x910>
 80045aa:	9b03      	ldr	r3, [sp, #12]
 80045ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b0:	b9a3      	cbnz	r3, 80045dc <_dtoa_r+0x914>
 80045b2:	9b03      	ldr	r3, [sp, #12]
 80045b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045b8:	0d1b      	lsrs	r3, r3, #20
 80045ba:	051b      	lsls	r3, r3, #20
 80045bc:	b12b      	cbz	r3, 80045ca <_dtoa_r+0x902>
 80045be:	9b04      	ldr	r3, [sp, #16]
 80045c0:	3301      	adds	r3, #1
 80045c2:	9304      	str	r3, [sp, #16]
 80045c4:	f108 0801 	add.w	r8, r8, #1
 80045c8:	2301      	movs	r3, #1
 80045ca:	9306      	str	r3, [sp, #24]
 80045cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f47f af74 	bne.w	80044bc <_dtoa_r+0x7f4>
 80045d4:	2001      	movs	r0, #1
 80045d6:	e779      	b.n	80044cc <_dtoa_r+0x804>
 80045d8:	2300      	movs	r3, #0
 80045da:	e7f6      	b.n	80045ca <_dtoa_r+0x902>
 80045dc:	9b02      	ldr	r3, [sp, #8]
 80045de:	e7f4      	b.n	80045ca <_dtoa_r+0x902>
 80045e0:	d085      	beq.n	80044ee <_dtoa_r+0x826>
 80045e2:	4618      	mov	r0, r3
 80045e4:	301c      	adds	r0, #28
 80045e6:	e77d      	b.n	80044e4 <_dtoa_r+0x81c>
 80045e8:	40240000 	.word	0x40240000
 80045ec:	9b01      	ldr	r3, [sp, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	dc38      	bgt.n	8004664 <_dtoa_r+0x99c>
 80045f2:	9b05      	ldr	r3, [sp, #20]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	dd35      	ble.n	8004664 <_dtoa_r+0x99c>
 80045f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80045fc:	f1b9 0f00 	cmp.w	r9, #0
 8004600:	d10d      	bne.n	800461e <_dtoa_r+0x956>
 8004602:	4631      	mov	r1, r6
 8004604:	464b      	mov	r3, r9
 8004606:	2205      	movs	r2, #5
 8004608:	4620      	mov	r0, r4
 800460a:	f000 fbd7 	bl	8004dbc <__multadd>
 800460e:	4601      	mov	r1, r0
 8004610:	4606      	mov	r6, r0
 8004612:	4658      	mov	r0, fp
 8004614:	f000 fdee 	bl	80051f4 <__mcmp>
 8004618:	2800      	cmp	r0, #0
 800461a:	f73f adbd 	bgt.w	8004198 <_dtoa_r+0x4d0>
 800461e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004620:	9d00      	ldr	r5, [sp, #0]
 8004622:	ea6f 0a03 	mvn.w	sl, r3
 8004626:	f04f 0800 	mov.w	r8, #0
 800462a:	4631      	mov	r1, r6
 800462c:	4620      	mov	r0, r4
 800462e:	f000 fba3 	bl	8004d78 <_Bfree>
 8004632:	2f00      	cmp	r7, #0
 8004634:	f43f aeb4 	beq.w	80043a0 <_dtoa_r+0x6d8>
 8004638:	f1b8 0f00 	cmp.w	r8, #0
 800463c:	d005      	beq.n	800464a <_dtoa_r+0x982>
 800463e:	45b8      	cmp	r8, r7
 8004640:	d003      	beq.n	800464a <_dtoa_r+0x982>
 8004642:	4641      	mov	r1, r8
 8004644:	4620      	mov	r0, r4
 8004646:	f000 fb97 	bl	8004d78 <_Bfree>
 800464a:	4639      	mov	r1, r7
 800464c:	4620      	mov	r0, r4
 800464e:	f000 fb93 	bl	8004d78 <_Bfree>
 8004652:	e6a5      	b.n	80043a0 <_dtoa_r+0x6d8>
 8004654:	2600      	movs	r6, #0
 8004656:	4637      	mov	r7, r6
 8004658:	e7e1      	b.n	800461e <_dtoa_r+0x956>
 800465a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800465c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004660:	4637      	mov	r7, r6
 8004662:	e599      	b.n	8004198 <_dtoa_r+0x4d0>
 8004664:	9b08      	ldr	r3, [sp, #32]
 8004666:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80fd 	beq.w	800486a <_dtoa_r+0xba2>
 8004670:	2d00      	cmp	r5, #0
 8004672:	dd05      	ble.n	8004680 <_dtoa_r+0x9b8>
 8004674:	4639      	mov	r1, r7
 8004676:	462a      	mov	r2, r5
 8004678:	4620      	mov	r0, r4
 800467a:	f000 fd4f 	bl	800511c <__lshift>
 800467e:	4607      	mov	r7, r0
 8004680:	9b06      	ldr	r3, [sp, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d05c      	beq.n	8004740 <_dtoa_r+0xa78>
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4620      	mov	r0, r4
 800468a:	f000 fb35 	bl	8004cf8 <_Balloc>
 800468e:	4605      	mov	r5, r0
 8004690:	b928      	cbnz	r0, 800469e <_dtoa_r+0x9d6>
 8004692:	4b80      	ldr	r3, [pc, #512]	; (8004894 <_dtoa_r+0xbcc>)
 8004694:	4602      	mov	r2, r0
 8004696:	f240 21ea 	movw	r1, #746	; 0x2ea
 800469a:	f7ff bb2e 	b.w	8003cfa <_dtoa_r+0x32>
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	3202      	adds	r2, #2
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	f107 010c 	add.w	r1, r7, #12
 80046a8:	300c      	adds	r0, #12
 80046aa:	f7fe fcb3 	bl	8003014 <memcpy>
 80046ae:	2201      	movs	r2, #1
 80046b0:	4629      	mov	r1, r5
 80046b2:	4620      	mov	r0, r4
 80046b4:	f000 fd32 	bl	800511c <__lshift>
 80046b8:	9b00      	ldr	r3, [sp, #0]
 80046ba:	3301      	adds	r3, #1
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	9b00      	ldr	r3, [sp, #0]
 80046c0:	444b      	add	r3, r9
 80046c2:	9307      	str	r3, [sp, #28]
 80046c4:	9b02      	ldr	r3, [sp, #8]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	46b8      	mov	r8, r7
 80046cc:	9306      	str	r3, [sp, #24]
 80046ce:	4607      	mov	r7, r0
 80046d0:	9b01      	ldr	r3, [sp, #4]
 80046d2:	4631      	mov	r1, r6
 80046d4:	3b01      	subs	r3, #1
 80046d6:	4658      	mov	r0, fp
 80046d8:	9302      	str	r3, [sp, #8]
 80046da:	f7ff fa69 	bl	8003bb0 <quorem>
 80046de:	4603      	mov	r3, r0
 80046e0:	3330      	adds	r3, #48	; 0x30
 80046e2:	9004      	str	r0, [sp, #16]
 80046e4:	4641      	mov	r1, r8
 80046e6:	4658      	mov	r0, fp
 80046e8:	9308      	str	r3, [sp, #32]
 80046ea:	f000 fd83 	bl	80051f4 <__mcmp>
 80046ee:	463a      	mov	r2, r7
 80046f0:	4681      	mov	r9, r0
 80046f2:	4631      	mov	r1, r6
 80046f4:	4620      	mov	r0, r4
 80046f6:	f000 fd99 	bl	800522c <__mdiff>
 80046fa:	68c2      	ldr	r2, [r0, #12]
 80046fc:	9b08      	ldr	r3, [sp, #32]
 80046fe:	4605      	mov	r5, r0
 8004700:	bb02      	cbnz	r2, 8004744 <_dtoa_r+0xa7c>
 8004702:	4601      	mov	r1, r0
 8004704:	4658      	mov	r0, fp
 8004706:	f000 fd75 	bl	80051f4 <__mcmp>
 800470a:	9b08      	ldr	r3, [sp, #32]
 800470c:	4602      	mov	r2, r0
 800470e:	4629      	mov	r1, r5
 8004710:	4620      	mov	r0, r4
 8004712:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004716:	f000 fb2f 	bl	8004d78 <_Bfree>
 800471a:	9b05      	ldr	r3, [sp, #20]
 800471c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800471e:	9d01      	ldr	r5, [sp, #4]
 8004720:	ea43 0102 	orr.w	r1, r3, r2
 8004724:	9b06      	ldr	r3, [sp, #24]
 8004726:	430b      	orrs	r3, r1
 8004728:	9b08      	ldr	r3, [sp, #32]
 800472a:	d10d      	bne.n	8004748 <_dtoa_r+0xa80>
 800472c:	2b39      	cmp	r3, #57	; 0x39
 800472e:	d029      	beq.n	8004784 <_dtoa_r+0xabc>
 8004730:	f1b9 0f00 	cmp.w	r9, #0
 8004734:	dd01      	ble.n	800473a <_dtoa_r+0xa72>
 8004736:	9b04      	ldr	r3, [sp, #16]
 8004738:	3331      	adds	r3, #49	; 0x31
 800473a:	9a02      	ldr	r2, [sp, #8]
 800473c:	7013      	strb	r3, [r2, #0]
 800473e:	e774      	b.n	800462a <_dtoa_r+0x962>
 8004740:	4638      	mov	r0, r7
 8004742:	e7b9      	b.n	80046b8 <_dtoa_r+0x9f0>
 8004744:	2201      	movs	r2, #1
 8004746:	e7e2      	b.n	800470e <_dtoa_r+0xa46>
 8004748:	f1b9 0f00 	cmp.w	r9, #0
 800474c:	db06      	blt.n	800475c <_dtoa_r+0xa94>
 800474e:	9905      	ldr	r1, [sp, #20]
 8004750:	ea41 0909 	orr.w	r9, r1, r9
 8004754:	9906      	ldr	r1, [sp, #24]
 8004756:	ea59 0101 	orrs.w	r1, r9, r1
 800475a:	d120      	bne.n	800479e <_dtoa_r+0xad6>
 800475c:	2a00      	cmp	r2, #0
 800475e:	ddec      	ble.n	800473a <_dtoa_r+0xa72>
 8004760:	4659      	mov	r1, fp
 8004762:	2201      	movs	r2, #1
 8004764:	4620      	mov	r0, r4
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	f000 fcd8 	bl	800511c <__lshift>
 800476c:	4631      	mov	r1, r6
 800476e:	4683      	mov	fp, r0
 8004770:	f000 fd40 	bl	80051f4 <__mcmp>
 8004774:	2800      	cmp	r0, #0
 8004776:	9b01      	ldr	r3, [sp, #4]
 8004778:	dc02      	bgt.n	8004780 <_dtoa_r+0xab8>
 800477a:	d1de      	bne.n	800473a <_dtoa_r+0xa72>
 800477c:	07da      	lsls	r2, r3, #31
 800477e:	d5dc      	bpl.n	800473a <_dtoa_r+0xa72>
 8004780:	2b39      	cmp	r3, #57	; 0x39
 8004782:	d1d8      	bne.n	8004736 <_dtoa_r+0xa6e>
 8004784:	9a02      	ldr	r2, [sp, #8]
 8004786:	2339      	movs	r3, #57	; 0x39
 8004788:	7013      	strb	r3, [r2, #0]
 800478a:	462b      	mov	r3, r5
 800478c:	461d      	mov	r5, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004794:	2a39      	cmp	r2, #57	; 0x39
 8004796:	d050      	beq.n	800483a <_dtoa_r+0xb72>
 8004798:	3201      	adds	r2, #1
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	e745      	b.n	800462a <_dtoa_r+0x962>
 800479e:	2a00      	cmp	r2, #0
 80047a0:	dd03      	ble.n	80047aa <_dtoa_r+0xae2>
 80047a2:	2b39      	cmp	r3, #57	; 0x39
 80047a4:	d0ee      	beq.n	8004784 <_dtoa_r+0xabc>
 80047a6:	3301      	adds	r3, #1
 80047a8:	e7c7      	b.n	800473a <_dtoa_r+0xa72>
 80047aa:	9a01      	ldr	r2, [sp, #4]
 80047ac:	9907      	ldr	r1, [sp, #28]
 80047ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80047b2:	428a      	cmp	r2, r1
 80047b4:	d02a      	beq.n	800480c <_dtoa_r+0xb44>
 80047b6:	4659      	mov	r1, fp
 80047b8:	2300      	movs	r3, #0
 80047ba:	220a      	movs	r2, #10
 80047bc:	4620      	mov	r0, r4
 80047be:	f000 fafd 	bl	8004dbc <__multadd>
 80047c2:	45b8      	cmp	r8, r7
 80047c4:	4683      	mov	fp, r0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	f04f 020a 	mov.w	r2, #10
 80047ce:	4641      	mov	r1, r8
 80047d0:	4620      	mov	r0, r4
 80047d2:	d107      	bne.n	80047e4 <_dtoa_r+0xb1c>
 80047d4:	f000 faf2 	bl	8004dbc <__multadd>
 80047d8:	4680      	mov	r8, r0
 80047da:	4607      	mov	r7, r0
 80047dc:	9b01      	ldr	r3, [sp, #4]
 80047de:	3301      	adds	r3, #1
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	e775      	b.n	80046d0 <_dtoa_r+0xa08>
 80047e4:	f000 faea 	bl	8004dbc <__multadd>
 80047e8:	4639      	mov	r1, r7
 80047ea:	4680      	mov	r8, r0
 80047ec:	2300      	movs	r3, #0
 80047ee:	220a      	movs	r2, #10
 80047f0:	4620      	mov	r0, r4
 80047f2:	f000 fae3 	bl	8004dbc <__multadd>
 80047f6:	4607      	mov	r7, r0
 80047f8:	e7f0      	b.n	80047dc <_dtoa_r+0xb14>
 80047fa:	f1b9 0f00 	cmp.w	r9, #0
 80047fe:	9a00      	ldr	r2, [sp, #0]
 8004800:	bfcc      	ite	gt
 8004802:	464d      	movgt	r5, r9
 8004804:	2501      	movle	r5, #1
 8004806:	4415      	add	r5, r2
 8004808:	f04f 0800 	mov.w	r8, #0
 800480c:	4659      	mov	r1, fp
 800480e:	2201      	movs	r2, #1
 8004810:	4620      	mov	r0, r4
 8004812:	9301      	str	r3, [sp, #4]
 8004814:	f000 fc82 	bl	800511c <__lshift>
 8004818:	4631      	mov	r1, r6
 800481a:	4683      	mov	fp, r0
 800481c:	f000 fcea 	bl	80051f4 <__mcmp>
 8004820:	2800      	cmp	r0, #0
 8004822:	dcb2      	bgt.n	800478a <_dtoa_r+0xac2>
 8004824:	d102      	bne.n	800482c <_dtoa_r+0xb64>
 8004826:	9b01      	ldr	r3, [sp, #4]
 8004828:	07db      	lsls	r3, r3, #31
 800482a:	d4ae      	bmi.n	800478a <_dtoa_r+0xac2>
 800482c:	462b      	mov	r3, r5
 800482e:	461d      	mov	r5, r3
 8004830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004834:	2a30      	cmp	r2, #48	; 0x30
 8004836:	d0fa      	beq.n	800482e <_dtoa_r+0xb66>
 8004838:	e6f7      	b.n	800462a <_dtoa_r+0x962>
 800483a:	9a00      	ldr	r2, [sp, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d1a5      	bne.n	800478c <_dtoa_r+0xac4>
 8004840:	f10a 0a01 	add.w	sl, sl, #1
 8004844:	2331      	movs	r3, #49	; 0x31
 8004846:	e779      	b.n	800473c <_dtoa_r+0xa74>
 8004848:	4b13      	ldr	r3, [pc, #76]	; (8004898 <_dtoa_r+0xbd0>)
 800484a:	f7ff baaf 	b.w	8003dac <_dtoa_r+0xe4>
 800484e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004850:	2b00      	cmp	r3, #0
 8004852:	f47f aa86 	bne.w	8003d62 <_dtoa_r+0x9a>
 8004856:	4b11      	ldr	r3, [pc, #68]	; (800489c <_dtoa_r+0xbd4>)
 8004858:	f7ff baa8 	b.w	8003dac <_dtoa_r+0xe4>
 800485c:	f1b9 0f00 	cmp.w	r9, #0
 8004860:	dc03      	bgt.n	800486a <_dtoa_r+0xba2>
 8004862:	9b05      	ldr	r3, [sp, #20]
 8004864:	2b02      	cmp	r3, #2
 8004866:	f73f aec9 	bgt.w	80045fc <_dtoa_r+0x934>
 800486a:	9d00      	ldr	r5, [sp, #0]
 800486c:	4631      	mov	r1, r6
 800486e:	4658      	mov	r0, fp
 8004870:	f7ff f99e 	bl	8003bb0 <quorem>
 8004874:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004878:	f805 3b01 	strb.w	r3, [r5], #1
 800487c:	9a00      	ldr	r2, [sp, #0]
 800487e:	1aaa      	subs	r2, r5, r2
 8004880:	4591      	cmp	r9, r2
 8004882:	ddba      	ble.n	80047fa <_dtoa_r+0xb32>
 8004884:	4659      	mov	r1, fp
 8004886:	2300      	movs	r3, #0
 8004888:	220a      	movs	r2, #10
 800488a:	4620      	mov	r0, r4
 800488c:	f000 fa96 	bl	8004dbc <__multadd>
 8004890:	4683      	mov	fp, r0
 8004892:	e7eb      	b.n	800486c <_dtoa_r+0xba4>
 8004894:	080071f7 	.word	0x080071f7
 8004898:	08007150 	.word	0x08007150
 800489c:	08007174 	.word	0x08007174

080048a0 <__sflush_r>:
 80048a0:	898a      	ldrh	r2, [r1, #12]
 80048a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a6:	4605      	mov	r5, r0
 80048a8:	0710      	lsls	r0, r2, #28
 80048aa:	460c      	mov	r4, r1
 80048ac:	d458      	bmi.n	8004960 <__sflush_r+0xc0>
 80048ae:	684b      	ldr	r3, [r1, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dc05      	bgt.n	80048c0 <__sflush_r+0x20>
 80048b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	dc02      	bgt.n	80048c0 <__sflush_r+0x20>
 80048ba:	2000      	movs	r0, #0
 80048bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	d0f9      	beq.n	80048ba <__sflush_r+0x1a>
 80048c6:	2300      	movs	r3, #0
 80048c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048cc:	682f      	ldr	r7, [r5, #0]
 80048ce:	602b      	str	r3, [r5, #0]
 80048d0:	d032      	beq.n	8004938 <__sflush_r+0x98>
 80048d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	075a      	lsls	r2, r3, #29
 80048d8:	d505      	bpl.n	80048e6 <__sflush_r+0x46>
 80048da:	6863      	ldr	r3, [r4, #4]
 80048dc:	1ac0      	subs	r0, r0, r3
 80048de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048e0:	b10b      	cbz	r3, 80048e6 <__sflush_r+0x46>
 80048e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048e4:	1ac0      	subs	r0, r0, r3
 80048e6:	2300      	movs	r3, #0
 80048e8:	4602      	mov	r2, r0
 80048ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ec:	6a21      	ldr	r1, [r4, #32]
 80048ee:	4628      	mov	r0, r5
 80048f0:	47b0      	blx	r6
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	d106      	bne.n	8004906 <__sflush_r+0x66>
 80048f8:	6829      	ldr	r1, [r5, #0]
 80048fa:	291d      	cmp	r1, #29
 80048fc:	d82c      	bhi.n	8004958 <__sflush_r+0xb8>
 80048fe:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <__sflush_r+0x108>)
 8004900:	40ca      	lsrs	r2, r1
 8004902:	07d6      	lsls	r6, r2, #31
 8004904:	d528      	bpl.n	8004958 <__sflush_r+0xb8>
 8004906:	2200      	movs	r2, #0
 8004908:	6062      	str	r2, [r4, #4]
 800490a:	04d9      	lsls	r1, r3, #19
 800490c:	6922      	ldr	r2, [r4, #16]
 800490e:	6022      	str	r2, [r4, #0]
 8004910:	d504      	bpl.n	800491c <__sflush_r+0x7c>
 8004912:	1c42      	adds	r2, r0, #1
 8004914:	d101      	bne.n	800491a <__sflush_r+0x7a>
 8004916:	682b      	ldr	r3, [r5, #0]
 8004918:	b903      	cbnz	r3, 800491c <__sflush_r+0x7c>
 800491a:	6560      	str	r0, [r4, #84]	; 0x54
 800491c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800491e:	602f      	str	r7, [r5, #0]
 8004920:	2900      	cmp	r1, #0
 8004922:	d0ca      	beq.n	80048ba <__sflush_r+0x1a>
 8004924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004928:	4299      	cmp	r1, r3
 800492a:	d002      	beq.n	8004932 <__sflush_r+0x92>
 800492c:	4628      	mov	r0, r5
 800492e:	f000 fd71 	bl	8005414 <_free_r>
 8004932:	2000      	movs	r0, #0
 8004934:	6360      	str	r0, [r4, #52]	; 0x34
 8004936:	e7c1      	b.n	80048bc <__sflush_r+0x1c>
 8004938:	6a21      	ldr	r1, [r4, #32]
 800493a:	2301      	movs	r3, #1
 800493c:	4628      	mov	r0, r5
 800493e:	47b0      	blx	r6
 8004940:	1c41      	adds	r1, r0, #1
 8004942:	d1c7      	bne.n	80048d4 <__sflush_r+0x34>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0c4      	beq.n	80048d4 <__sflush_r+0x34>
 800494a:	2b1d      	cmp	r3, #29
 800494c:	d001      	beq.n	8004952 <__sflush_r+0xb2>
 800494e:	2b16      	cmp	r3, #22
 8004950:	d101      	bne.n	8004956 <__sflush_r+0xb6>
 8004952:	602f      	str	r7, [r5, #0]
 8004954:	e7b1      	b.n	80048ba <__sflush_r+0x1a>
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	e7ad      	b.n	80048bc <__sflush_r+0x1c>
 8004960:	690f      	ldr	r7, [r1, #16]
 8004962:	2f00      	cmp	r7, #0
 8004964:	d0a9      	beq.n	80048ba <__sflush_r+0x1a>
 8004966:	0793      	lsls	r3, r2, #30
 8004968:	680e      	ldr	r6, [r1, #0]
 800496a:	bf08      	it	eq
 800496c:	694b      	ldreq	r3, [r1, #20]
 800496e:	600f      	str	r7, [r1, #0]
 8004970:	bf18      	it	ne
 8004972:	2300      	movne	r3, #0
 8004974:	eba6 0807 	sub.w	r8, r6, r7
 8004978:	608b      	str	r3, [r1, #8]
 800497a:	f1b8 0f00 	cmp.w	r8, #0
 800497e:	dd9c      	ble.n	80048ba <__sflush_r+0x1a>
 8004980:	6a21      	ldr	r1, [r4, #32]
 8004982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004984:	4643      	mov	r3, r8
 8004986:	463a      	mov	r2, r7
 8004988:	4628      	mov	r0, r5
 800498a:	47b0      	blx	r6
 800498c:	2800      	cmp	r0, #0
 800498e:	dc06      	bgt.n	800499e <__sflush_r+0xfe>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004996:	81a3      	strh	r3, [r4, #12]
 8004998:	f04f 30ff 	mov.w	r0, #4294967295
 800499c:	e78e      	b.n	80048bc <__sflush_r+0x1c>
 800499e:	4407      	add	r7, r0
 80049a0:	eba8 0800 	sub.w	r8, r8, r0
 80049a4:	e7e9      	b.n	800497a <__sflush_r+0xda>
 80049a6:	bf00      	nop
 80049a8:	20400001 	.word	0x20400001

080049ac <_fflush_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	690b      	ldr	r3, [r1, #16]
 80049b0:	4605      	mov	r5, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	b913      	cbnz	r3, 80049bc <_fflush_r+0x10>
 80049b6:	2500      	movs	r5, #0
 80049b8:	4628      	mov	r0, r5
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	b118      	cbz	r0, 80049c6 <_fflush_r+0x1a>
 80049be:	6983      	ldr	r3, [r0, #24]
 80049c0:	b90b      	cbnz	r3, 80049c6 <_fflush_r+0x1a>
 80049c2:	f000 f887 	bl	8004ad4 <__sinit>
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <_fflush_r+0x6c>)
 80049c8:	429c      	cmp	r4, r3
 80049ca:	d11b      	bne.n	8004a04 <_fflush_r+0x58>
 80049cc:	686c      	ldr	r4, [r5, #4]
 80049ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0ef      	beq.n	80049b6 <_fflush_r+0xa>
 80049d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d8:	07d0      	lsls	r0, r2, #31
 80049da:	d404      	bmi.n	80049e6 <_fflush_r+0x3a>
 80049dc:	0599      	lsls	r1, r3, #22
 80049de:	d402      	bmi.n	80049e6 <_fflush_r+0x3a>
 80049e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049e2:	f000 f91a 	bl	8004c1a <__retarget_lock_acquire_recursive>
 80049e6:	4628      	mov	r0, r5
 80049e8:	4621      	mov	r1, r4
 80049ea:	f7ff ff59 	bl	80048a0 <__sflush_r>
 80049ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049f0:	07da      	lsls	r2, r3, #31
 80049f2:	4605      	mov	r5, r0
 80049f4:	d4e0      	bmi.n	80049b8 <_fflush_r+0xc>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	059b      	lsls	r3, r3, #22
 80049fa:	d4dd      	bmi.n	80049b8 <_fflush_r+0xc>
 80049fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049fe:	f000 f90d 	bl	8004c1c <__retarget_lock_release_recursive>
 8004a02:	e7d9      	b.n	80049b8 <_fflush_r+0xc>
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <_fflush_r+0x70>)
 8004a06:	429c      	cmp	r4, r3
 8004a08:	d101      	bne.n	8004a0e <_fflush_r+0x62>
 8004a0a:	68ac      	ldr	r4, [r5, #8]
 8004a0c:	e7df      	b.n	80049ce <_fflush_r+0x22>
 8004a0e:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <_fflush_r+0x74>)
 8004a10:	429c      	cmp	r4, r3
 8004a12:	bf08      	it	eq
 8004a14:	68ec      	ldreq	r4, [r5, #12]
 8004a16:	e7da      	b.n	80049ce <_fflush_r+0x22>
 8004a18:	08007228 	.word	0x08007228
 8004a1c:	08007248 	.word	0x08007248
 8004a20:	08007208 	.word	0x08007208

08004a24 <std>:
 8004a24:	2300      	movs	r3, #0
 8004a26:	b510      	push	{r4, lr}
 8004a28:	4604      	mov	r4, r0
 8004a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a32:	6083      	str	r3, [r0, #8]
 8004a34:	8181      	strh	r1, [r0, #12]
 8004a36:	6643      	str	r3, [r0, #100]	; 0x64
 8004a38:	81c2      	strh	r2, [r0, #14]
 8004a3a:	6183      	str	r3, [r0, #24]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	2208      	movs	r2, #8
 8004a40:	305c      	adds	r0, #92	; 0x5c
 8004a42:	f7fe faf5 	bl	8003030 <memset>
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <std+0x38>)
 8004a48:	6263      	str	r3, [r4, #36]	; 0x24
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <std+0x3c>)
 8004a4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <std+0x40>)
 8004a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <std+0x44>)
 8004a54:	6224      	str	r4, [r4, #32]
 8004a56:	6323      	str	r3, [r4, #48]	; 0x30
 8004a58:	bd10      	pop	{r4, pc}
 8004a5a:	bf00      	nop
 8004a5c:	0800583d 	.word	0x0800583d
 8004a60:	0800585f 	.word	0x0800585f
 8004a64:	08005897 	.word	0x08005897
 8004a68:	080058bb 	.word	0x080058bb

08004a6c <_cleanup_r>:
 8004a6c:	4901      	ldr	r1, [pc, #4]	; (8004a74 <_cleanup_r+0x8>)
 8004a6e:	f000 b8af 	b.w	8004bd0 <_fwalk_reent>
 8004a72:	bf00      	nop
 8004a74:	080049ad 	.word	0x080049ad

08004a78 <__sfmoreglue>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	1e4a      	subs	r2, r1, #1
 8004a7c:	2568      	movs	r5, #104	; 0x68
 8004a7e:	4355      	muls	r5, r2
 8004a80:	460e      	mov	r6, r1
 8004a82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a86:	f000 fd15 	bl	80054b4 <_malloc_r>
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	b140      	cbz	r0, 8004aa0 <__sfmoreglue+0x28>
 8004a8e:	2100      	movs	r1, #0
 8004a90:	e9c0 1600 	strd	r1, r6, [r0]
 8004a94:	300c      	adds	r0, #12
 8004a96:	60a0      	str	r0, [r4, #8]
 8004a98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a9c:	f7fe fac8 	bl	8003030 <memset>
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	bd70      	pop	{r4, r5, r6, pc}

08004aa4 <__sfp_lock_acquire>:
 8004aa4:	4801      	ldr	r0, [pc, #4]	; (8004aac <__sfp_lock_acquire+0x8>)
 8004aa6:	f000 b8b8 	b.w	8004c1a <__retarget_lock_acquire_recursive>
 8004aaa:	bf00      	nop
 8004aac:	2000091c 	.word	0x2000091c

08004ab0 <__sfp_lock_release>:
 8004ab0:	4801      	ldr	r0, [pc, #4]	; (8004ab8 <__sfp_lock_release+0x8>)
 8004ab2:	f000 b8b3 	b.w	8004c1c <__retarget_lock_release_recursive>
 8004ab6:	bf00      	nop
 8004ab8:	2000091c 	.word	0x2000091c

08004abc <__sinit_lock_acquire>:
 8004abc:	4801      	ldr	r0, [pc, #4]	; (8004ac4 <__sinit_lock_acquire+0x8>)
 8004abe:	f000 b8ac 	b.w	8004c1a <__retarget_lock_acquire_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	20000917 	.word	0x20000917

08004ac8 <__sinit_lock_release>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	; (8004ad0 <__sinit_lock_release+0x8>)
 8004aca:	f000 b8a7 	b.w	8004c1c <__retarget_lock_release_recursive>
 8004ace:	bf00      	nop
 8004ad0:	20000917 	.word	0x20000917

08004ad4 <__sinit>:
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	f7ff fff0 	bl	8004abc <__sinit_lock_acquire>
 8004adc:	69a3      	ldr	r3, [r4, #24]
 8004ade:	b11b      	cbz	r3, 8004ae8 <__sinit+0x14>
 8004ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae4:	f7ff bff0 	b.w	8004ac8 <__sinit_lock_release>
 8004ae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004aec:	6523      	str	r3, [r4, #80]	; 0x50
 8004aee:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <__sinit+0x68>)
 8004af0:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <__sinit+0x6c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004af6:	42a3      	cmp	r3, r4
 8004af8:	bf04      	itt	eq
 8004afa:	2301      	moveq	r3, #1
 8004afc:	61a3      	streq	r3, [r4, #24]
 8004afe:	4620      	mov	r0, r4
 8004b00:	f000 f820 	bl	8004b44 <__sfp>
 8004b04:	6060      	str	r0, [r4, #4]
 8004b06:	4620      	mov	r0, r4
 8004b08:	f000 f81c 	bl	8004b44 <__sfp>
 8004b0c:	60a0      	str	r0, [r4, #8]
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f000 f818 	bl	8004b44 <__sfp>
 8004b14:	2200      	movs	r2, #0
 8004b16:	60e0      	str	r0, [r4, #12]
 8004b18:	2104      	movs	r1, #4
 8004b1a:	6860      	ldr	r0, [r4, #4]
 8004b1c:	f7ff ff82 	bl	8004a24 <std>
 8004b20:	68a0      	ldr	r0, [r4, #8]
 8004b22:	2201      	movs	r2, #1
 8004b24:	2109      	movs	r1, #9
 8004b26:	f7ff ff7d 	bl	8004a24 <std>
 8004b2a:	68e0      	ldr	r0, [r4, #12]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	2112      	movs	r1, #18
 8004b30:	f7ff ff78 	bl	8004a24 <std>
 8004b34:	2301      	movs	r3, #1
 8004b36:	61a3      	str	r3, [r4, #24]
 8004b38:	e7d2      	b.n	8004ae0 <__sinit+0xc>
 8004b3a:	bf00      	nop
 8004b3c:	0800713c 	.word	0x0800713c
 8004b40:	08004a6d 	.word	0x08004a6d

08004b44 <__sfp>:
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	4607      	mov	r7, r0
 8004b48:	f7ff ffac 	bl	8004aa4 <__sfp_lock_acquire>
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <__sfp+0x84>)
 8004b4e:	681e      	ldr	r6, [r3, #0]
 8004b50:	69b3      	ldr	r3, [r6, #24]
 8004b52:	b913      	cbnz	r3, 8004b5a <__sfp+0x16>
 8004b54:	4630      	mov	r0, r6
 8004b56:	f7ff ffbd 	bl	8004ad4 <__sinit>
 8004b5a:	3648      	adds	r6, #72	; 0x48
 8004b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	d503      	bpl.n	8004b6c <__sfp+0x28>
 8004b64:	6833      	ldr	r3, [r6, #0]
 8004b66:	b30b      	cbz	r3, 8004bac <__sfp+0x68>
 8004b68:	6836      	ldr	r6, [r6, #0]
 8004b6a:	e7f7      	b.n	8004b5c <__sfp+0x18>
 8004b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b70:	b9d5      	cbnz	r5, 8004ba8 <__sfp+0x64>
 8004b72:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <__sfp+0x88>)
 8004b74:	60e3      	str	r3, [r4, #12]
 8004b76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b7a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b7c:	f000 f84c 	bl	8004c18 <__retarget_lock_init_recursive>
 8004b80:	f7ff ff96 	bl	8004ab0 <__sfp_lock_release>
 8004b84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b8c:	6025      	str	r5, [r4, #0]
 8004b8e:	61a5      	str	r5, [r4, #24]
 8004b90:	2208      	movs	r2, #8
 8004b92:	4629      	mov	r1, r5
 8004b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b98:	f7fe fa4a 	bl	8003030 <memset>
 8004b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba8:	3468      	adds	r4, #104	; 0x68
 8004baa:	e7d9      	b.n	8004b60 <__sfp+0x1c>
 8004bac:	2104      	movs	r1, #4
 8004bae:	4638      	mov	r0, r7
 8004bb0:	f7ff ff62 	bl	8004a78 <__sfmoreglue>
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	6030      	str	r0, [r6, #0]
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d1d5      	bne.n	8004b68 <__sfp+0x24>
 8004bbc:	f7ff ff78 	bl	8004ab0 <__sfp_lock_release>
 8004bc0:	230c      	movs	r3, #12
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	e7ee      	b.n	8004ba4 <__sfp+0x60>
 8004bc6:	bf00      	nop
 8004bc8:	0800713c 	.word	0x0800713c
 8004bcc:	ffff0001 	.word	0xffff0001

08004bd0 <_fwalk_reent>:
 8004bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	4688      	mov	r8, r1
 8004bd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bdc:	2700      	movs	r7, #0
 8004bde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004be2:	f1b9 0901 	subs.w	r9, r9, #1
 8004be6:	d505      	bpl.n	8004bf4 <_fwalk_reent+0x24>
 8004be8:	6824      	ldr	r4, [r4, #0]
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	d1f7      	bne.n	8004bde <_fwalk_reent+0xe>
 8004bee:	4638      	mov	r0, r7
 8004bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bf4:	89ab      	ldrh	r3, [r5, #12]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d907      	bls.n	8004c0a <_fwalk_reent+0x3a>
 8004bfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	d003      	beq.n	8004c0a <_fwalk_reent+0x3a>
 8004c02:	4629      	mov	r1, r5
 8004c04:	4630      	mov	r0, r6
 8004c06:	47c0      	blx	r8
 8004c08:	4307      	orrs	r7, r0
 8004c0a:	3568      	adds	r5, #104	; 0x68
 8004c0c:	e7e9      	b.n	8004be2 <_fwalk_reent+0x12>
	...

08004c10 <_localeconv_r>:
 8004c10:	4800      	ldr	r0, [pc, #0]	; (8004c14 <_localeconv_r+0x4>)
 8004c12:	4770      	bx	lr
 8004c14:	20000164 	.word	0x20000164

08004c18 <__retarget_lock_init_recursive>:
 8004c18:	4770      	bx	lr

08004c1a <__retarget_lock_acquire_recursive>:
 8004c1a:	4770      	bx	lr

08004c1c <__retarget_lock_release_recursive>:
 8004c1c:	4770      	bx	lr

08004c1e <__swhatbuf_r>:
 8004c1e:	b570      	push	{r4, r5, r6, lr}
 8004c20:	460e      	mov	r6, r1
 8004c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c26:	2900      	cmp	r1, #0
 8004c28:	b096      	sub	sp, #88	; 0x58
 8004c2a:	4614      	mov	r4, r2
 8004c2c:	461d      	mov	r5, r3
 8004c2e:	da07      	bge.n	8004c40 <__swhatbuf_r+0x22>
 8004c30:	2300      	movs	r3, #0
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	89b3      	ldrh	r3, [r6, #12]
 8004c36:	061a      	lsls	r2, r3, #24
 8004c38:	d410      	bmi.n	8004c5c <__swhatbuf_r+0x3e>
 8004c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c3e:	e00e      	b.n	8004c5e <__swhatbuf_r+0x40>
 8004c40:	466a      	mov	r2, sp
 8004c42:	f000 fe91 	bl	8005968 <_fstat_r>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	dbf2      	blt.n	8004c30 <__swhatbuf_r+0x12>
 8004c4a:	9a01      	ldr	r2, [sp, #4]
 8004c4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c54:	425a      	negs	r2, r3
 8004c56:	415a      	adcs	r2, r3
 8004c58:	602a      	str	r2, [r5, #0]
 8004c5a:	e7ee      	b.n	8004c3a <__swhatbuf_r+0x1c>
 8004c5c:	2340      	movs	r3, #64	; 0x40
 8004c5e:	2000      	movs	r0, #0
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	b016      	add	sp, #88	; 0x58
 8004c64:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c68 <__smakebuf_r>:
 8004c68:	898b      	ldrh	r3, [r1, #12]
 8004c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c6c:	079d      	lsls	r5, r3, #30
 8004c6e:	4606      	mov	r6, r0
 8004c70:	460c      	mov	r4, r1
 8004c72:	d507      	bpl.n	8004c84 <__smakebuf_r+0x1c>
 8004c74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	6123      	str	r3, [r4, #16]
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	6163      	str	r3, [r4, #20]
 8004c80:	b002      	add	sp, #8
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	ab01      	add	r3, sp, #4
 8004c86:	466a      	mov	r2, sp
 8004c88:	f7ff ffc9 	bl	8004c1e <__swhatbuf_r>
 8004c8c:	9900      	ldr	r1, [sp, #0]
 8004c8e:	4605      	mov	r5, r0
 8004c90:	4630      	mov	r0, r6
 8004c92:	f000 fc0f 	bl	80054b4 <_malloc_r>
 8004c96:	b948      	cbnz	r0, 8004cac <__smakebuf_r+0x44>
 8004c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c9c:	059a      	lsls	r2, r3, #22
 8004c9e:	d4ef      	bmi.n	8004c80 <__smakebuf_r+0x18>
 8004ca0:	f023 0303 	bic.w	r3, r3, #3
 8004ca4:	f043 0302 	orr.w	r3, r3, #2
 8004ca8:	81a3      	strh	r3, [r4, #12]
 8004caa:	e7e3      	b.n	8004c74 <__smakebuf_r+0xc>
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <__smakebuf_r+0x7c>)
 8004cae:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	6020      	str	r0, [r4, #0]
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb8:	81a3      	strh	r3, [r4, #12]
 8004cba:	9b00      	ldr	r3, [sp, #0]
 8004cbc:	6163      	str	r3, [r4, #20]
 8004cbe:	9b01      	ldr	r3, [sp, #4]
 8004cc0:	6120      	str	r0, [r4, #16]
 8004cc2:	b15b      	cbz	r3, 8004cdc <__smakebuf_r+0x74>
 8004cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f000 fe5f 	bl	800598c <_isatty_r>
 8004cce:	b128      	cbz	r0, 8004cdc <__smakebuf_r+0x74>
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	81a3      	strh	r3, [r4, #12]
 8004cdc:	89a0      	ldrh	r0, [r4, #12]
 8004cde:	4305      	orrs	r5, r0
 8004ce0:	81a5      	strh	r5, [r4, #12]
 8004ce2:	e7cd      	b.n	8004c80 <__smakebuf_r+0x18>
 8004ce4:	08004a6d 	.word	0x08004a6d

08004ce8 <malloc>:
 8004ce8:	4b02      	ldr	r3, [pc, #8]	; (8004cf4 <malloc+0xc>)
 8004cea:	4601      	mov	r1, r0
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	f000 bbe1 	b.w	80054b4 <_malloc_r>
 8004cf2:	bf00      	nop
 8004cf4:	20000010 	.word	0x20000010

08004cf8 <_Balloc>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	460d      	mov	r5, r1
 8004d00:	b976      	cbnz	r6, 8004d20 <_Balloc+0x28>
 8004d02:	2010      	movs	r0, #16
 8004d04:	f7ff fff0 	bl	8004ce8 <malloc>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6260      	str	r0, [r4, #36]	; 0x24
 8004d0c:	b920      	cbnz	r0, 8004d18 <_Balloc+0x20>
 8004d0e:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <_Balloc+0x78>)
 8004d10:	4818      	ldr	r0, [pc, #96]	; (8004d74 <_Balloc+0x7c>)
 8004d12:	2166      	movs	r1, #102	; 0x66
 8004d14:	f000 fde8 	bl	80058e8 <__assert_func>
 8004d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d1c:	6006      	str	r6, [r0, #0]
 8004d1e:	60c6      	str	r6, [r0, #12]
 8004d20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d22:	68f3      	ldr	r3, [r6, #12]
 8004d24:	b183      	cbz	r3, 8004d48 <_Balloc+0x50>
 8004d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d2e:	b9b8      	cbnz	r0, 8004d60 <_Balloc+0x68>
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f605 	lsl.w	r6, r1, r5
 8004d36:	1d72      	adds	r2, r6, #5
 8004d38:	0092      	lsls	r2, r2, #2
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f000 fb5a 	bl	80053f4 <_calloc_r>
 8004d40:	b160      	cbz	r0, 8004d5c <_Balloc+0x64>
 8004d42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d46:	e00e      	b.n	8004d66 <_Balloc+0x6e>
 8004d48:	2221      	movs	r2, #33	; 0x21
 8004d4a:	2104      	movs	r1, #4
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f000 fb51 	bl	80053f4 <_calloc_r>
 8004d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d54:	60f0      	str	r0, [r6, #12]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e4      	bne.n	8004d26 <_Balloc+0x2e>
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	6802      	ldr	r2, [r0, #0]
 8004d62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d66:	2300      	movs	r3, #0
 8004d68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d6c:	e7f7      	b.n	8004d5e <_Balloc+0x66>
 8004d6e:	bf00      	nop
 8004d70:	08007181 	.word	0x08007181
 8004d74:	08007268 	.word	0x08007268

08004d78 <_Bfree>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	460c      	mov	r4, r1
 8004d80:	b976      	cbnz	r6, 8004da0 <_Bfree+0x28>
 8004d82:	2010      	movs	r0, #16
 8004d84:	f7ff ffb0 	bl	8004ce8 <malloc>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6268      	str	r0, [r5, #36]	; 0x24
 8004d8c:	b920      	cbnz	r0, 8004d98 <_Bfree+0x20>
 8004d8e:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <_Bfree+0x3c>)
 8004d90:	4809      	ldr	r0, [pc, #36]	; (8004db8 <_Bfree+0x40>)
 8004d92:	218a      	movs	r1, #138	; 0x8a
 8004d94:	f000 fda8 	bl	80058e8 <__assert_func>
 8004d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d9c:	6006      	str	r6, [r0, #0]
 8004d9e:	60c6      	str	r6, [r0, #12]
 8004da0:	b13c      	cbz	r4, 8004db2 <_Bfree+0x3a>
 8004da2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004da4:	6862      	ldr	r2, [r4, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dac:	6021      	str	r1, [r4, #0]
 8004dae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
 8004db4:	08007181 	.word	0x08007181
 8004db8:	08007268 	.word	0x08007268

08004dbc <__multadd>:
 8004dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc0:	690e      	ldr	r6, [r1, #16]
 8004dc2:	4607      	mov	r7, r0
 8004dc4:	4698      	mov	r8, r3
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	f101 0014 	add.w	r0, r1, #20
 8004dcc:	2300      	movs	r3, #0
 8004dce:	6805      	ldr	r5, [r0, #0]
 8004dd0:	b2a9      	uxth	r1, r5
 8004dd2:	fb02 8101 	mla	r1, r2, r1, r8
 8004dd6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004dda:	0c2d      	lsrs	r5, r5, #16
 8004ddc:	fb02 c505 	mla	r5, r2, r5, ip
 8004de0:	b289      	uxth	r1, r1
 8004de2:	3301      	adds	r3, #1
 8004de4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004de8:	429e      	cmp	r6, r3
 8004dea:	f840 1b04 	str.w	r1, [r0], #4
 8004dee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004df2:	dcec      	bgt.n	8004dce <__multadd+0x12>
 8004df4:	f1b8 0f00 	cmp.w	r8, #0
 8004df8:	d022      	beq.n	8004e40 <__multadd+0x84>
 8004dfa:	68a3      	ldr	r3, [r4, #8]
 8004dfc:	42b3      	cmp	r3, r6
 8004dfe:	dc19      	bgt.n	8004e34 <__multadd+0x78>
 8004e00:	6861      	ldr	r1, [r4, #4]
 8004e02:	4638      	mov	r0, r7
 8004e04:	3101      	adds	r1, #1
 8004e06:	f7ff ff77 	bl	8004cf8 <_Balloc>
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	b928      	cbnz	r0, 8004e1a <__multadd+0x5e>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4b0d      	ldr	r3, [pc, #52]	; (8004e48 <__multadd+0x8c>)
 8004e12:	480e      	ldr	r0, [pc, #56]	; (8004e4c <__multadd+0x90>)
 8004e14:	21b5      	movs	r1, #181	; 0xb5
 8004e16:	f000 fd67 	bl	80058e8 <__assert_func>
 8004e1a:	6922      	ldr	r2, [r4, #16]
 8004e1c:	3202      	adds	r2, #2
 8004e1e:	f104 010c 	add.w	r1, r4, #12
 8004e22:	0092      	lsls	r2, r2, #2
 8004e24:	300c      	adds	r0, #12
 8004e26:	f7fe f8f5 	bl	8003014 <memcpy>
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7ff ffa3 	bl	8004d78 <_Bfree>
 8004e32:	462c      	mov	r4, r5
 8004e34:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004e38:	3601      	adds	r6, #1
 8004e3a:	f8c3 8014 	str.w	r8, [r3, #20]
 8004e3e:	6126      	str	r6, [r4, #16]
 8004e40:	4620      	mov	r0, r4
 8004e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e46:	bf00      	nop
 8004e48:	080071f7 	.word	0x080071f7
 8004e4c:	08007268 	.word	0x08007268

08004e50 <__hi0bits>:
 8004e50:	0c03      	lsrs	r3, r0, #16
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	b9d3      	cbnz	r3, 8004e8c <__hi0bits+0x3c>
 8004e56:	0400      	lsls	r0, r0, #16
 8004e58:	2310      	movs	r3, #16
 8004e5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004e5e:	bf04      	itt	eq
 8004e60:	0200      	lsleq	r0, r0, #8
 8004e62:	3308      	addeq	r3, #8
 8004e64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004e68:	bf04      	itt	eq
 8004e6a:	0100      	lsleq	r0, r0, #4
 8004e6c:	3304      	addeq	r3, #4
 8004e6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004e72:	bf04      	itt	eq
 8004e74:	0080      	lsleq	r0, r0, #2
 8004e76:	3302      	addeq	r3, #2
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	db05      	blt.n	8004e88 <__hi0bits+0x38>
 8004e7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004e80:	f103 0301 	add.w	r3, r3, #1
 8004e84:	bf08      	it	eq
 8004e86:	2320      	moveq	r3, #32
 8004e88:	4618      	mov	r0, r3
 8004e8a:	4770      	bx	lr
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e7e4      	b.n	8004e5a <__hi0bits+0xa>

08004e90 <__lo0bits>:
 8004e90:	6803      	ldr	r3, [r0, #0]
 8004e92:	f013 0207 	ands.w	r2, r3, #7
 8004e96:	4601      	mov	r1, r0
 8004e98:	d00b      	beq.n	8004eb2 <__lo0bits+0x22>
 8004e9a:	07da      	lsls	r2, r3, #31
 8004e9c:	d424      	bmi.n	8004ee8 <__lo0bits+0x58>
 8004e9e:	0798      	lsls	r0, r3, #30
 8004ea0:	bf49      	itett	mi
 8004ea2:	085b      	lsrmi	r3, r3, #1
 8004ea4:	089b      	lsrpl	r3, r3, #2
 8004ea6:	2001      	movmi	r0, #1
 8004ea8:	600b      	strmi	r3, [r1, #0]
 8004eaa:	bf5c      	itt	pl
 8004eac:	600b      	strpl	r3, [r1, #0]
 8004eae:	2002      	movpl	r0, #2
 8004eb0:	4770      	bx	lr
 8004eb2:	b298      	uxth	r0, r3
 8004eb4:	b9b0      	cbnz	r0, 8004ee4 <__lo0bits+0x54>
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	2010      	movs	r0, #16
 8004eba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004ebe:	bf04      	itt	eq
 8004ec0:	0a1b      	lsreq	r3, r3, #8
 8004ec2:	3008      	addeq	r0, #8
 8004ec4:	071a      	lsls	r2, r3, #28
 8004ec6:	bf04      	itt	eq
 8004ec8:	091b      	lsreq	r3, r3, #4
 8004eca:	3004      	addeq	r0, #4
 8004ecc:	079a      	lsls	r2, r3, #30
 8004ece:	bf04      	itt	eq
 8004ed0:	089b      	lsreq	r3, r3, #2
 8004ed2:	3002      	addeq	r0, #2
 8004ed4:	07da      	lsls	r2, r3, #31
 8004ed6:	d403      	bmi.n	8004ee0 <__lo0bits+0x50>
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	f100 0001 	add.w	r0, r0, #1
 8004ede:	d005      	beq.n	8004eec <__lo0bits+0x5c>
 8004ee0:	600b      	str	r3, [r1, #0]
 8004ee2:	4770      	bx	lr
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	e7e8      	b.n	8004eba <__lo0bits+0x2a>
 8004ee8:	2000      	movs	r0, #0
 8004eea:	4770      	bx	lr
 8004eec:	2020      	movs	r0, #32
 8004eee:	4770      	bx	lr

08004ef0 <__i2b>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	f7ff feff 	bl	8004cf8 <_Balloc>
 8004efa:	4602      	mov	r2, r0
 8004efc:	b928      	cbnz	r0, 8004f0a <__i2b+0x1a>
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <__i2b+0x24>)
 8004f00:	4805      	ldr	r0, [pc, #20]	; (8004f18 <__i2b+0x28>)
 8004f02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004f06:	f000 fcef 	bl	80058e8 <__assert_func>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	6144      	str	r4, [r0, #20]
 8004f0e:	6103      	str	r3, [r0, #16]
 8004f10:	bd10      	pop	{r4, pc}
 8004f12:	bf00      	nop
 8004f14:	080071f7 	.word	0x080071f7
 8004f18:	08007268 	.word	0x08007268

08004f1c <__multiply>:
 8004f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	4614      	mov	r4, r2
 8004f22:	690a      	ldr	r2, [r1, #16]
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	bfb8      	it	lt
 8004f2a:	460b      	movlt	r3, r1
 8004f2c:	460d      	mov	r5, r1
 8004f2e:	bfbc      	itt	lt
 8004f30:	4625      	movlt	r5, r4
 8004f32:	461c      	movlt	r4, r3
 8004f34:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004f38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004f3c:	68ab      	ldr	r3, [r5, #8]
 8004f3e:	6869      	ldr	r1, [r5, #4]
 8004f40:	eb0a 0709 	add.w	r7, sl, r9
 8004f44:	42bb      	cmp	r3, r7
 8004f46:	b085      	sub	sp, #20
 8004f48:	bfb8      	it	lt
 8004f4a:	3101      	addlt	r1, #1
 8004f4c:	f7ff fed4 	bl	8004cf8 <_Balloc>
 8004f50:	b930      	cbnz	r0, 8004f60 <__multiply+0x44>
 8004f52:	4602      	mov	r2, r0
 8004f54:	4b42      	ldr	r3, [pc, #264]	; (8005060 <__multiply+0x144>)
 8004f56:	4843      	ldr	r0, [pc, #268]	; (8005064 <__multiply+0x148>)
 8004f58:	f240 115d 	movw	r1, #349	; 0x15d
 8004f5c:	f000 fcc4 	bl	80058e8 <__assert_func>
 8004f60:	f100 0614 	add.w	r6, r0, #20
 8004f64:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004f68:	4633      	mov	r3, r6
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	4543      	cmp	r3, r8
 8004f6e:	d31e      	bcc.n	8004fae <__multiply+0x92>
 8004f70:	f105 0c14 	add.w	ip, r5, #20
 8004f74:	f104 0314 	add.w	r3, r4, #20
 8004f78:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004f7c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004f80:	9202      	str	r2, [sp, #8]
 8004f82:	ebac 0205 	sub.w	r2, ip, r5
 8004f86:	3a15      	subs	r2, #21
 8004f88:	f022 0203 	bic.w	r2, r2, #3
 8004f8c:	3204      	adds	r2, #4
 8004f8e:	f105 0115 	add.w	r1, r5, #21
 8004f92:	458c      	cmp	ip, r1
 8004f94:	bf38      	it	cc
 8004f96:	2204      	movcc	r2, #4
 8004f98:	9201      	str	r2, [sp, #4]
 8004f9a:	9a02      	ldr	r2, [sp, #8]
 8004f9c:	9303      	str	r3, [sp, #12]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d808      	bhi.n	8004fb4 <__multiply+0x98>
 8004fa2:	2f00      	cmp	r7, #0
 8004fa4:	dc55      	bgt.n	8005052 <__multiply+0x136>
 8004fa6:	6107      	str	r7, [r0, #16]
 8004fa8:	b005      	add	sp, #20
 8004faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fae:	f843 2b04 	str.w	r2, [r3], #4
 8004fb2:	e7db      	b.n	8004f6c <__multiply+0x50>
 8004fb4:	f8b3 a000 	ldrh.w	sl, [r3]
 8004fb8:	f1ba 0f00 	cmp.w	sl, #0
 8004fbc:	d020      	beq.n	8005000 <__multiply+0xe4>
 8004fbe:	f105 0e14 	add.w	lr, r5, #20
 8004fc2:	46b1      	mov	r9, r6
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004fca:	f8d9 b000 	ldr.w	fp, [r9]
 8004fce:	b2a1      	uxth	r1, r4
 8004fd0:	fa1f fb8b 	uxth.w	fp, fp
 8004fd4:	fb0a b101 	mla	r1, sl, r1, fp
 8004fd8:	4411      	add	r1, r2
 8004fda:	f8d9 2000 	ldr.w	r2, [r9]
 8004fde:	0c24      	lsrs	r4, r4, #16
 8004fe0:	0c12      	lsrs	r2, r2, #16
 8004fe2:	fb0a 2404 	mla	r4, sl, r4, r2
 8004fe6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004fea:	b289      	uxth	r1, r1
 8004fec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004ff0:	45f4      	cmp	ip, lr
 8004ff2:	f849 1b04 	str.w	r1, [r9], #4
 8004ff6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004ffa:	d8e4      	bhi.n	8004fc6 <__multiply+0xaa>
 8004ffc:	9901      	ldr	r1, [sp, #4]
 8004ffe:	5072      	str	r2, [r6, r1]
 8005000:	9a03      	ldr	r2, [sp, #12]
 8005002:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005006:	3304      	adds	r3, #4
 8005008:	f1b9 0f00 	cmp.w	r9, #0
 800500c:	d01f      	beq.n	800504e <__multiply+0x132>
 800500e:	6834      	ldr	r4, [r6, #0]
 8005010:	f105 0114 	add.w	r1, r5, #20
 8005014:	46b6      	mov	lr, r6
 8005016:	f04f 0a00 	mov.w	sl, #0
 800501a:	880a      	ldrh	r2, [r1, #0]
 800501c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005020:	fb09 b202 	mla	r2, r9, r2, fp
 8005024:	4492      	add	sl, r2
 8005026:	b2a4      	uxth	r4, r4
 8005028:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800502c:	f84e 4b04 	str.w	r4, [lr], #4
 8005030:	f851 4b04 	ldr.w	r4, [r1], #4
 8005034:	f8be 2000 	ldrh.w	r2, [lr]
 8005038:	0c24      	lsrs	r4, r4, #16
 800503a:	fb09 2404 	mla	r4, r9, r4, r2
 800503e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005042:	458c      	cmp	ip, r1
 8005044:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005048:	d8e7      	bhi.n	800501a <__multiply+0xfe>
 800504a:	9a01      	ldr	r2, [sp, #4]
 800504c:	50b4      	str	r4, [r6, r2]
 800504e:	3604      	adds	r6, #4
 8005050:	e7a3      	b.n	8004f9a <__multiply+0x7e>
 8005052:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1a5      	bne.n	8004fa6 <__multiply+0x8a>
 800505a:	3f01      	subs	r7, #1
 800505c:	e7a1      	b.n	8004fa2 <__multiply+0x86>
 800505e:	bf00      	nop
 8005060:	080071f7 	.word	0x080071f7
 8005064:	08007268 	.word	0x08007268

08005068 <__pow5mult>:
 8005068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800506c:	4615      	mov	r5, r2
 800506e:	f012 0203 	ands.w	r2, r2, #3
 8005072:	4606      	mov	r6, r0
 8005074:	460f      	mov	r7, r1
 8005076:	d007      	beq.n	8005088 <__pow5mult+0x20>
 8005078:	4c25      	ldr	r4, [pc, #148]	; (8005110 <__pow5mult+0xa8>)
 800507a:	3a01      	subs	r2, #1
 800507c:	2300      	movs	r3, #0
 800507e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005082:	f7ff fe9b 	bl	8004dbc <__multadd>
 8005086:	4607      	mov	r7, r0
 8005088:	10ad      	asrs	r5, r5, #2
 800508a:	d03d      	beq.n	8005108 <__pow5mult+0xa0>
 800508c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800508e:	b97c      	cbnz	r4, 80050b0 <__pow5mult+0x48>
 8005090:	2010      	movs	r0, #16
 8005092:	f7ff fe29 	bl	8004ce8 <malloc>
 8005096:	4602      	mov	r2, r0
 8005098:	6270      	str	r0, [r6, #36]	; 0x24
 800509a:	b928      	cbnz	r0, 80050a8 <__pow5mult+0x40>
 800509c:	4b1d      	ldr	r3, [pc, #116]	; (8005114 <__pow5mult+0xac>)
 800509e:	481e      	ldr	r0, [pc, #120]	; (8005118 <__pow5mult+0xb0>)
 80050a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80050a4:	f000 fc20 	bl	80058e8 <__assert_func>
 80050a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050ac:	6004      	str	r4, [r0, #0]
 80050ae:	60c4      	str	r4, [r0, #12]
 80050b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80050b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80050b8:	b94c      	cbnz	r4, 80050ce <__pow5mult+0x66>
 80050ba:	f240 2171 	movw	r1, #625	; 0x271
 80050be:	4630      	mov	r0, r6
 80050c0:	f7ff ff16 	bl	8004ef0 <__i2b>
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80050ca:	4604      	mov	r4, r0
 80050cc:	6003      	str	r3, [r0, #0]
 80050ce:	f04f 0900 	mov.w	r9, #0
 80050d2:	07eb      	lsls	r3, r5, #31
 80050d4:	d50a      	bpl.n	80050ec <__pow5mult+0x84>
 80050d6:	4639      	mov	r1, r7
 80050d8:	4622      	mov	r2, r4
 80050da:	4630      	mov	r0, r6
 80050dc:	f7ff ff1e 	bl	8004f1c <__multiply>
 80050e0:	4639      	mov	r1, r7
 80050e2:	4680      	mov	r8, r0
 80050e4:	4630      	mov	r0, r6
 80050e6:	f7ff fe47 	bl	8004d78 <_Bfree>
 80050ea:	4647      	mov	r7, r8
 80050ec:	106d      	asrs	r5, r5, #1
 80050ee:	d00b      	beq.n	8005108 <__pow5mult+0xa0>
 80050f0:	6820      	ldr	r0, [r4, #0]
 80050f2:	b938      	cbnz	r0, 8005104 <__pow5mult+0x9c>
 80050f4:	4622      	mov	r2, r4
 80050f6:	4621      	mov	r1, r4
 80050f8:	4630      	mov	r0, r6
 80050fa:	f7ff ff0f 	bl	8004f1c <__multiply>
 80050fe:	6020      	str	r0, [r4, #0]
 8005100:	f8c0 9000 	str.w	r9, [r0]
 8005104:	4604      	mov	r4, r0
 8005106:	e7e4      	b.n	80050d2 <__pow5mult+0x6a>
 8005108:	4638      	mov	r0, r7
 800510a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800510e:	bf00      	nop
 8005110:	080073b8 	.word	0x080073b8
 8005114:	08007181 	.word	0x08007181
 8005118:	08007268 	.word	0x08007268

0800511c <__lshift>:
 800511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	460c      	mov	r4, r1
 8005122:	6849      	ldr	r1, [r1, #4]
 8005124:	6923      	ldr	r3, [r4, #16]
 8005126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800512a:	68a3      	ldr	r3, [r4, #8]
 800512c:	4607      	mov	r7, r0
 800512e:	4691      	mov	r9, r2
 8005130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005134:	f108 0601 	add.w	r6, r8, #1
 8005138:	42b3      	cmp	r3, r6
 800513a:	db0b      	blt.n	8005154 <__lshift+0x38>
 800513c:	4638      	mov	r0, r7
 800513e:	f7ff fddb 	bl	8004cf8 <_Balloc>
 8005142:	4605      	mov	r5, r0
 8005144:	b948      	cbnz	r0, 800515a <__lshift+0x3e>
 8005146:	4602      	mov	r2, r0
 8005148:	4b28      	ldr	r3, [pc, #160]	; (80051ec <__lshift+0xd0>)
 800514a:	4829      	ldr	r0, [pc, #164]	; (80051f0 <__lshift+0xd4>)
 800514c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005150:	f000 fbca 	bl	80058e8 <__assert_func>
 8005154:	3101      	adds	r1, #1
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	e7ee      	b.n	8005138 <__lshift+0x1c>
 800515a:	2300      	movs	r3, #0
 800515c:	f100 0114 	add.w	r1, r0, #20
 8005160:	f100 0210 	add.w	r2, r0, #16
 8005164:	4618      	mov	r0, r3
 8005166:	4553      	cmp	r3, sl
 8005168:	db33      	blt.n	80051d2 <__lshift+0xb6>
 800516a:	6920      	ldr	r0, [r4, #16]
 800516c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005170:	f104 0314 	add.w	r3, r4, #20
 8005174:	f019 091f 	ands.w	r9, r9, #31
 8005178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800517c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005180:	d02b      	beq.n	80051da <__lshift+0xbe>
 8005182:	f1c9 0e20 	rsb	lr, r9, #32
 8005186:	468a      	mov	sl, r1
 8005188:	2200      	movs	r2, #0
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	fa00 f009 	lsl.w	r0, r0, r9
 8005190:	4302      	orrs	r2, r0
 8005192:	f84a 2b04 	str.w	r2, [sl], #4
 8005196:	f853 2b04 	ldr.w	r2, [r3], #4
 800519a:	459c      	cmp	ip, r3
 800519c:	fa22 f20e 	lsr.w	r2, r2, lr
 80051a0:	d8f3      	bhi.n	800518a <__lshift+0x6e>
 80051a2:	ebac 0304 	sub.w	r3, ip, r4
 80051a6:	3b15      	subs	r3, #21
 80051a8:	f023 0303 	bic.w	r3, r3, #3
 80051ac:	3304      	adds	r3, #4
 80051ae:	f104 0015 	add.w	r0, r4, #21
 80051b2:	4584      	cmp	ip, r0
 80051b4:	bf38      	it	cc
 80051b6:	2304      	movcc	r3, #4
 80051b8:	50ca      	str	r2, [r1, r3]
 80051ba:	b10a      	cbz	r2, 80051c0 <__lshift+0xa4>
 80051bc:	f108 0602 	add.w	r6, r8, #2
 80051c0:	3e01      	subs	r6, #1
 80051c2:	4638      	mov	r0, r7
 80051c4:	612e      	str	r6, [r5, #16]
 80051c6:	4621      	mov	r1, r4
 80051c8:	f7ff fdd6 	bl	8004d78 <_Bfree>
 80051cc:	4628      	mov	r0, r5
 80051ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80051d6:	3301      	adds	r3, #1
 80051d8:	e7c5      	b.n	8005166 <__lshift+0x4a>
 80051da:	3904      	subs	r1, #4
 80051dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80051e4:	459c      	cmp	ip, r3
 80051e6:	d8f9      	bhi.n	80051dc <__lshift+0xc0>
 80051e8:	e7ea      	b.n	80051c0 <__lshift+0xa4>
 80051ea:	bf00      	nop
 80051ec:	080071f7 	.word	0x080071f7
 80051f0:	08007268 	.word	0x08007268

080051f4 <__mcmp>:
 80051f4:	b530      	push	{r4, r5, lr}
 80051f6:	6902      	ldr	r2, [r0, #16]
 80051f8:	690c      	ldr	r4, [r1, #16]
 80051fa:	1b12      	subs	r2, r2, r4
 80051fc:	d10e      	bne.n	800521c <__mcmp+0x28>
 80051fe:	f100 0314 	add.w	r3, r0, #20
 8005202:	3114      	adds	r1, #20
 8005204:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005208:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800520c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005210:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005214:	42a5      	cmp	r5, r4
 8005216:	d003      	beq.n	8005220 <__mcmp+0x2c>
 8005218:	d305      	bcc.n	8005226 <__mcmp+0x32>
 800521a:	2201      	movs	r2, #1
 800521c:	4610      	mov	r0, r2
 800521e:	bd30      	pop	{r4, r5, pc}
 8005220:	4283      	cmp	r3, r0
 8005222:	d3f3      	bcc.n	800520c <__mcmp+0x18>
 8005224:	e7fa      	b.n	800521c <__mcmp+0x28>
 8005226:	f04f 32ff 	mov.w	r2, #4294967295
 800522a:	e7f7      	b.n	800521c <__mcmp+0x28>

0800522c <__mdiff>:
 800522c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005230:	460c      	mov	r4, r1
 8005232:	4606      	mov	r6, r0
 8005234:	4611      	mov	r1, r2
 8005236:	4620      	mov	r0, r4
 8005238:	4617      	mov	r7, r2
 800523a:	f7ff ffdb 	bl	80051f4 <__mcmp>
 800523e:	1e05      	subs	r5, r0, #0
 8005240:	d110      	bne.n	8005264 <__mdiff+0x38>
 8005242:	4629      	mov	r1, r5
 8005244:	4630      	mov	r0, r6
 8005246:	f7ff fd57 	bl	8004cf8 <_Balloc>
 800524a:	b930      	cbnz	r0, 800525a <__mdiff+0x2e>
 800524c:	4b39      	ldr	r3, [pc, #228]	; (8005334 <__mdiff+0x108>)
 800524e:	4602      	mov	r2, r0
 8005250:	f240 2132 	movw	r1, #562	; 0x232
 8005254:	4838      	ldr	r0, [pc, #224]	; (8005338 <__mdiff+0x10c>)
 8005256:	f000 fb47 	bl	80058e8 <__assert_func>
 800525a:	2301      	movs	r3, #1
 800525c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005264:	bfa4      	itt	ge
 8005266:	463b      	movge	r3, r7
 8005268:	4627      	movge	r7, r4
 800526a:	4630      	mov	r0, r6
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	bfa6      	itte	ge
 8005270:	461c      	movge	r4, r3
 8005272:	2500      	movge	r5, #0
 8005274:	2501      	movlt	r5, #1
 8005276:	f7ff fd3f 	bl	8004cf8 <_Balloc>
 800527a:	b920      	cbnz	r0, 8005286 <__mdiff+0x5a>
 800527c:	4b2d      	ldr	r3, [pc, #180]	; (8005334 <__mdiff+0x108>)
 800527e:	4602      	mov	r2, r0
 8005280:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005284:	e7e6      	b.n	8005254 <__mdiff+0x28>
 8005286:	693e      	ldr	r6, [r7, #16]
 8005288:	60c5      	str	r5, [r0, #12]
 800528a:	6925      	ldr	r5, [r4, #16]
 800528c:	f107 0114 	add.w	r1, r7, #20
 8005290:	f104 0914 	add.w	r9, r4, #20
 8005294:	f100 0e14 	add.w	lr, r0, #20
 8005298:	f107 0210 	add.w	r2, r7, #16
 800529c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80052a0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80052a4:	46f2      	mov	sl, lr
 80052a6:	2700      	movs	r7, #0
 80052a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80052ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80052b0:	fa1f f883 	uxth.w	r8, r3
 80052b4:	fa17 f78b 	uxtah	r7, r7, fp
 80052b8:	0c1b      	lsrs	r3, r3, #16
 80052ba:	eba7 0808 	sub.w	r8, r7, r8
 80052be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80052c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80052c6:	fa1f f888 	uxth.w	r8, r8
 80052ca:	141f      	asrs	r7, r3, #16
 80052cc:	454d      	cmp	r5, r9
 80052ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80052d2:	f84a 3b04 	str.w	r3, [sl], #4
 80052d6:	d8e7      	bhi.n	80052a8 <__mdiff+0x7c>
 80052d8:	1b2b      	subs	r3, r5, r4
 80052da:	3b15      	subs	r3, #21
 80052dc:	f023 0303 	bic.w	r3, r3, #3
 80052e0:	3304      	adds	r3, #4
 80052e2:	3415      	adds	r4, #21
 80052e4:	42a5      	cmp	r5, r4
 80052e6:	bf38      	it	cc
 80052e8:	2304      	movcc	r3, #4
 80052ea:	4419      	add	r1, r3
 80052ec:	4473      	add	r3, lr
 80052ee:	469e      	mov	lr, r3
 80052f0:	460d      	mov	r5, r1
 80052f2:	4565      	cmp	r5, ip
 80052f4:	d30e      	bcc.n	8005314 <__mdiff+0xe8>
 80052f6:	f10c 0203 	add.w	r2, ip, #3
 80052fa:	1a52      	subs	r2, r2, r1
 80052fc:	f022 0203 	bic.w	r2, r2, #3
 8005300:	3903      	subs	r1, #3
 8005302:	458c      	cmp	ip, r1
 8005304:	bf38      	it	cc
 8005306:	2200      	movcc	r2, #0
 8005308:	441a      	add	r2, r3
 800530a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800530e:	b17b      	cbz	r3, 8005330 <__mdiff+0x104>
 8005310:	6106      	str	r6, [r0, #16]
 8005312:	e7a5      	b.n	8005260 <__mdiff+0x34>
 8005314:	f855 8b04 	ldr.w	r8, [r5], #4
 8005318:	fa17 f488 	uxtah	r4, r7, r8
 800531c:	1422      	asrs	r2, r4, #16
 800531e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005322:	b2a4      	uxth	r4, r4
 8005324:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005328:	f84e 4b04 	str.w	r4, [lr], #4
 800532c:	1417      	asrs	r7, r2, #16
 800532e:	e7e0      	b.n	80052f2 <__mdiff+0xc6>
 8005330:	3e01      	subs	r6, #1
 8005332:	e7ea      	b.n	800530a <__mdiff+0xde>
 8005334:	080071f7 	.word	0x080071f7
 8005338:	08007268 	.word	0x08007268

0800533c <__d2b>:
 800533c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005340:	4689      	mov	r9, r1
 8005342:	2101      	movs	r1, #1
 8005344:	ec57 6b10 	vmov	r6, r7, d0
 8005348:	4690      	mov	r8, r2
 800534a:	f7ff fcd5 	bl	8004cf8 <_Balloc>
 800534e:	4604      	mov	r4, r0
 8005350:	b930      	cbnz	r0, 8005360 <__d2b+0x24>
 8005352:	4602      	mov	r2, r0
 8005354:	4b25      	ldr	r3, [pc, #148]	; (80053ec <__d2b+0xb0>)
 8005356:	4826      	ldr	r0, [pc, #152]	; (80053f0 <__d2b+0xb4>)
 8005358:	f240 310a 	movw	r1, #778	; 0x30a
 800535c:	f000 fac4 	bl	80058e8 <__assert_func>
 8005360:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005364:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005368:	bb35      	cbnz	r5, 80053b8 <__d2b+0x7c>
 800536a:	2e00      	cmp	r6, #0
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	d028      	beq.n	80053c2 <__d2b+0x86>
 8005370:	4668      	mov	r0, sp
 8005372:	9600      	str	r6, [sp, #0]
 8005374:	f7ff fd8c 	bl	8004e90 <__lo0bits>
 8005378:	9900      	ldr	r1, [sp, #0]
 800537a:	b300      	cbz	r0, 80053be <__d2b+0x82>
 800537c:	9a01      	ldr	r2, [sp, #4]
 800537e:	f1c0 0320 	rsb	r3, r0, #32
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	430b      	orrs	r3, r1
 8005388:	40c2      	lsrs	r2, r0
 800538a:	6163      	str	r3, [r4, #20]
 800538c:	9201      	str	r2, [sp, #4]
 800538e:	9b01      	ldr	r3, [sp, #4]
 8005390:	61a3      	str	r3, [r4, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	bf14      	ite	ne
 8005396:	2202      	movne	r2, #2
 8005398:	2201      	moveq	r2, #1
 800539a:	6122      	str	r2, [r4, #16]
 800539c:	b1d5      	cbz	r5, 80053d4 <__d2b+0x98>
 800539e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80053a2:	4405      	add	r5, r0
 80053a4:	f8c9 5000 	str.w	r5, [r9]
 80053a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80053ac:	f8c8 0000 	str.w	r0, [r8]
 80053b0:	4620      	mov	r0, r4
 80053b2:	b003      	add	sp, #12
 80053b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053bc:	e7d5      	b.n	800536a <__d2b+0x2e>
 80053be:	6161      	str	r1, [r4, #20]
 80053c0:	e7e5      	b.n	800538e <__d2b+0x52>
 80053c2:	a801      	add	r0, sp, #4
 80053c4:	f7ff fd64 	bl	8004e90 <__lo0bits>
 80053c8:	9b01      	ldr	r3, [sp, #4]
 80053ca:	6163      	str	r3, [r4, #20]
 80053cc:	2201      	movs	r2, #1
 80053ce:	6122      	str	r2, [r4, #16]
 80053d0:	3020      	adds	r0, #32
 80053d2:	e7e3      	b.n	800539c <__d2b+0x60>
 80053d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80053d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80053dc:	f8c9 0000 	str.w	r0, [r9]
 80053e0:	6918      	ldr	r0, [r3, #16]
 80053e2:	f7ff fd35 	bl	8004e50 <__hi0bits>
 80053e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80053ea:	e7df      	b.n	80053ac <__d2b+0x70>
 80053ec:	080071f7 	.word	0x080071f7
 80053f0:	08007268 	.word	0x08007268

080053f4 <_calloc_r>:
 80053f4:	b513      	push	{r0, r1, r4, lr}
 80053f6:	434a      	muls	r2, r1
 80053f8:	4611      	mov	r1, r2
 80053fa:	9201      	str	r2, [sp, #4]
 80053fc:	f000 f85a 	bl	80054b4 <_malloc_r>
 8005400:	4604      	mov	r4, r0
 8005402:	b118      	cbz	r0, 800540c <_calloc_r+0x18>
 8005404:	9a01      	ldr	r2, [sp, #4]
 8005406:	2100      	movs	r1, #0
 8005408:	f7fd fe12 	bl	8003030 <memset>
 800540c:	4620      	mov	r0, r4
 800540e:	b002      	add	sp, #8
 8005410:	bd10      	pop	{r4, pc}
	...

08005414 <_free_r>:
 8005414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005416:	2900      	cmp	r1, #0
 8005418:	d048      	beq.n	80054ac <_free_r+0x98>
 800541a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800541e:	9001      	str	r0, [sp, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	f1a1 0404 	sub.w	r4, r1, #4
 8005426:	bfb8      	it	lt
 8005428:	18e4      	addlt	r4, r4, r3
 800542a:	f000 fae3 	bl	80059f4 <__malloc_lock>
 800542e:	4a20      	ldr	r2, [pc, #128]	; (80054b0 <_free_r+0x9c>)
 8005430:	9801      	ldr	r0, [sp, #4]
 8005432:	6813      	ldr	r3, [r2, #0]
 8005434:	4615      	mov	r5, r2
 8005436:	b933      	cbnz	r3, 8005446 <_free_r+0x32>
 8005438:	6063      	str	r3, [r4, #4]
 800543a:	6014      	str	r4, [r2, #0]
 800543c:	b003      	add	sp, #12
 800543e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005442:	f000 badd 	b.w	8005a00 <__malloc_unlock>
 8005446:	42a3      	cmp	r3, r4
 8005448:	d90b      	bls.n	8005462 <_free_r+0x4e>
 800544a:	6821      	ldr	r1, [r4, #0]
 800544c:	1862      	adds	r2, r4, r1
 800544e:	4293      	cmp	r3, r2
 8005450:	bf04      	itt	eq
 8005452:	681a      	ldreq	r2, [r3, #0]
 8005454:	685b      	ldreq	r3, [r3, #4]
 8005456:	6063      	str	r3, [r4, #4]
 8005458:	bf04      	itt	eq
 800545a:	1852      	addeq	r2, r2, r1
 800545c:	6022      	streq	r2, [r4, #0]
 800545e:	602c      	str	r4, [r5, #0]
 8005460:	e7ec      	b.n	800543c <_free_r+0x28>
 8005462:	461a      	mov	r2, r3
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	b10b      	cbz	r3, 800546c <_free_r+0x58>
 8005468:	42a3      	cmp	r3, r4
 800546a:	d9fa      	bls.n	8005462 <_free_r+0x4e>
 800546c:	6811      	ldr	r1, [r2, #0]
 800546e:	1855      	adds	r5, r2, r1
 8005470:	42a5      	cmp	r5, r4
 8005472:	d10b      	bne.n	800548c <_free_r+0x78>
 8005474:	6824      	ldr	r4, [r4, #0]
 8005476:	4421      	add	r1, r4
 8005478:	1854      	adds	r4, r2, r1
 800547a:	42a3      	cmp	r3, r4
 800547c:	6011      	str	r1, [r2, #0]
 800547e:	d1dd      	bne.n	800543c <_free_r+0x28>
 8005480:	681c      	ldr	r4, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	6053      	str	r3, [r2, #4]
 8005486:	4421      	add	r1, r4
 8005488:	6011      	str	r1, [r2, #0]
 800548a:	e7d7      	b.n	800543c <_free_r+0x28>
 800548c:	d902      	bls.n	8005494 <_free_r+0x80>
 800548e:	230c      	movs	r3, #12
 8005490:	6003      	str	r3, [r0, #0]
 8005492:	e7d3      	b.n	800543c <_free_r+0x28>
 8005494:	6825      	ldr	r5, [r4, #0]
 8005496:	1961      	adds	r1, r4, r5
 8005498:	428b      	cmp	r3, r1
 800549a:	bf04      	itt	eq
 800549c:	6819      	ldreq	r1, [r3, #0]
 800549e:	685b      	ldreq	r3, [r3, #4]
 80054a0:	6063      	str	r3, [r4, #4]
 80054a2:	bf04      	itt	eq
 80054a4:	1949      	addeq	r1, r1, r5
 80054a6:	6021      	streq	r1, [r4, #0]
 80054a8:	6054      	str	r4, [r2, #4]
 80054aa:	e7c7      	b.n	800543c <_free_r+0x28>
 80054ac:	b003      	add	sp, #12
 80054ae:	bd30      	pop	{r4, r5, pc}
 80054b0:	20000210 	.word	0x20000210

080054b4 <_malloc_r>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	1ccd      	adds	r5, r1, #3
 80054b8:	f025 0503 	bic.w	r5, r5, #3
 80054bc:	3508      	adds	r5, #8
 80054be:	2d0c      	cmp	r5, #12
 80054c0:	bf38      	it	cc
 80054c2:	250c      	movcc	r5, #12
 80054c4:	2d00      	cmp	r5, #0
 80054c6:	4606      	mov	r6, r0
 80054c8:	db01      	blt.n	80054ce <_malloc_r+0x1a>
 80054ca:	42a9      	cmp	r1, r5
 80054cc:	d903      	bls.n	80054d6 <_malloc_r+0x22>
 80054ce:	230c      	movs	r3, #12
 80054d0:	6033      	str	r3, [r6, #0]
 80054d2:	2000      	movs	r0, #0
 80054d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054d6:	f000 fa8d 	bl	80059f4 <__malloc_lock>
 80054da:	4921      	ldr	r1, [pc, #132]	; (8005560 <_malloc_r+0xac>)
 80054dc:	680a      	ldr	r2, [r1, #0]
 80054de:	4614      	mov	r4, r2
 80054e0:	b99c      	cbnz	r4, 800550a <_malloc_r+0x56>
 80054e2:	4f20      	ldr	r7, [pc, #128]	; (8005564 <_malloc_r+0xb0>)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	b923      	cbnz	r3, 80054f2 <_malloc_r+0x3e>
 80054e8:	4621      	mov	r1, r4
 80054ea:	4630      	mov	r0, r6
 80054ec:	f000 f996 	bl	800581c <_sbrk_r>
 80054f0:	6038      	str	r0, [r7, #0]
 80054f2:	4629      	mov	r1, r5
 80054f4:	4630      	mov	r0, r6
 80054f6:	f000 f991 	bl	800581c <_sbrk_r>
 80054fa:	1c43      	adds	r3, r0, #1
 80054fc:	d123      	bne.n	8005546 <_malloc_r+0x92>
 80054fe:	230c      	movs	r3, #12
 8005500:	6033      	str	r3, [r6, #0]
 8005502:	4630      	mov	r0, r6
 8005504:	f000 fa7c 	bl	8005a00 <__malloc_unlock>
 8005508:	e7e3      	b.n	80054d2 <_malloc_r+0x1e>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	1b5b      	subs	r3, r3, r5
 800550e:	d417      	bmi.n	8005540 <_malloc_r+0x8c>
 8005510:	2b0b      	cmp	r3, #11
 8005512:	d903      	bls.n	800551c <_malloc_r+0x68>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	441c      	add	r4, r3
 8005518:	6025      	str	r5, [r4, #0]
 800551a:	e004      	b.n	8005526 <_malloc_r+0x72>
 800551c:	6863      	ldr	r3, [r4, #4]
 800551e:	42a2      	cmp	r2, r4
 8005520:	bf0c      	ite	eq
 8005522:	600b      	streq	r3, [r1, #0]
 8005524:	6053      	strne	r3, [r2, #4]
 8005526:	4630      	mov	r0, r6
 8005528:	f000 fa6a 	bl	8005a00 <__malloc_unlock>
 800552c:	f104 000b 	add.w	r0, r4, #11
 8005530:	1d23      	adds	r3, r4, #4
 8005532:	f020 0007 	bic.w	r0, r0, #7
 8005536:	1ac2      	subs	r2, r0, r3
 8005538:	d0cc      	beq.n	80054d4 <_malloc_r+0x20>
 800553a:	1a1b      	subs	r3, r3, r0
 800553c:	50a3      	str	r3, [r4, r2]
 800553e:	e7c9      	b.n	80054d4 <_malloc_r+0x20>
 8005540:	4622      	mov	r2, r4
 8005542:	6864      	ldr	r4, [r4, #4]
 8005544:	e7cc      	b.n	80054e0 <_malloc_r+0x2c>
 8005546:	1cc4      	adds	r4, r0, #3
 8005548:	f024 0403 	bic.w	r4, r4, #3
 800554c:	42a0      	cmp	r0, r4
 800554e:	d0e3      	beq.n	8005518 <_malloc_r+0x64>
 8005550:	1a21      	subs	r1, r4, r0
 8005552:	4630      	mov	r0, r6
 8005554:	f000 f962 	bl	800581c <_sbrk_r>
 8005558:	3001      	adds	r0, #1
 800555a:	d1dd      	bne.n	8005518 <_malloc_r+0x64>
 800555c:	e7cf      	b.n	80054fe <_malloc_r+0x4a>
 800555e:	bf00      	nop
 8005560:	20000210 	.word	0x20000210
 8005564:	20000214 	.word	0x20000214

08005568 <__sfputc_r>:
 8005568:	6893      	ldr	r3, [r2, #8]
 800556a:	3b01      	subs	r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	b410      	push	{r4}
 8005570:	6093      	str	r3, [r2, #8]
 8005572:	da08      	bge.n	8005586 <__sfputc_r+0x1e>
 8005574:	6994      	ldr	r4, [r2, #24]
 8005576:	42a3      	cmp	r3, r4
 8005578:	db01      	blt.n	800557e <__sfputc_r+0x16>
 800557a:	290a      	cmp	r1, #10
 800557c:	d103      	bne.n	8005586 <__sfputc_r+0x1e>
 800557e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005582:	f7fe ba55 	b.w	8003a30 <__swbuf_r>
 8005586:	6813      	ldr	r3, [r2, #0]
 8005588:	1c58      	adds	r0, r3, #1
 800558a:	6010      	str	r0, [r2, #0]
 800558c:	7019      	strb	r1, [r3, #0]
 800558e:	4608      	mov	r0, r1
 8005590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005594:	4770      	bx	lr

08005596 <__sfputs_r>:
 8005596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005598:	4606      	mov	r6, r0
 800559a:	460f      	mov	r7, r1
 800559c:	4614      	mov	r4, r2
 800559e:	18d5      	adds	r5, r2, r3
 80055a0:	42ac      	cmp	r4, r5
 80055a2:	d101      	bne.n	80055a8 <__sfputs_r+0x12>
 80055a4:	2000      	movs	r0, #0
 80055a6:	e007      	b.n	80055b8 <__sfputs_r+0x22>
 80055a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ac:	463a      	mov	r2, r7
 80055ae:	4630      	mov	r0, r6
 80055b0:	f7ff ffda 	bl	8005568 <__sfputc_r>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d1f3      	bne.n	80055a0 <__sfputs_r+0xa>
 80055b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055bc <_vfiprintf_r>:
 80055bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c0:	460d      	mov	r5, r1
 80055c2:	b09d      	sub	sp, #116	; 0x74
 80055c4:	4614      	mov	r4, r2
 80055c6:	4698      	mov	r8, r3
 80055c8:	4606      	mov	r6, r0
 80055ca:	b118      	cbz	r0, 80055d4 <_vfiprintf_r+0x18>
 80055cc:	6983      	ldr	r3, [r0, #24]
 80055ce:	b90b      	cbnz	r3, 80055d4 <_vfiprintf_r+0x18>
 80055d0:	f7ff fa80 	bl	8004ad4 <__sinit>
 80055d4:	4b89      	ldr	r3, [pc, #548]	; (80057fc <_vfiprintf_r+0x240>)
 80055d6:	429d      	cmp	r5, r3
 80055d8:	d11b      	bne.n	8005612 <_vfiprintf_r+0x56>
 80055da:	6875      	ldr	r5, [r6, #4]
 80055dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055de:	07d9      	lsls	r1, r3, #31
 80055e0:	d405      	bmi.n	80055ee <_vfiprintf_r+0x32>
 80055e2:	89ab      	ldrh	r3, [r5, #12]
 80055e4:	059a      	lsls	r2, r3, #22
 80055e6:	d402      	bmi.n	80055ee <_vfiprintf_r+0x32>
 80055e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ea:	f7ff fb16 	bl	8004c1a <__retarget_lock_acquire_recursive>
 80055ee:	89ab      	ldrh	r3, [r5, #12]
 80055f0:	071b      	lsls	r3, r3, #28
 80055f2:	d501      	bpl.n	80055f8 <_vfiprintf_r+0x3c>
 80055f4:	692b      	ldr	r3, [r5, #16]
 80055f6:	b9eb      	cbnz	r3, 8005634 <_vfiprintf_r+0x78>
 80055f8:	4629      	mov	r1, r5
 80055fa:	4630      	mov	r0, r6
 80055fc:	f7fe fa6a 	bl	8003ad4 <__swsetup_r>
 8005600:	b1c0      	cbz	r0, 8005634 <_vfiprintf_r+0x78>
 8005602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005604:	07dc      	lsls	r4, r3, #31
 8005606:	d50e      	bpl.n	8005626 <_vfiprintf_r+0x6a>
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	b01d      	add	sp, #116	; 0x74
 800560e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005612:	4b7b      	ldr	r3, [pc, #492]	; (8005800 <_vfiprintf_r+0x244>)
 8005614:	429d      	cmp	r5, r3
 8005616:	d101      	bne.n	800561c <_vfiprintf_r+0x60>
 8005618:	68b5      	ldr	r5, [r6, #8]
 800561a:	e7df      	b.n	80055dc <_vfiprintf_r+0x20>
 800561c:	4b79      	ldr	r3, [pc, #484]	; (8005804 <_vfiprintf_r+0x248>)
 800561e:	429d      	cmp	r5, r3
 8005620:	bf08      	it	eq
 8005622:	68f5      	ldreq	r5, [r6, #12]
 8005624:	e7da      	b.n	80055dc <_vfiprintf_r+0x20>
 8005626:	89ab      	ldrh	r3, [r5, #12]
 8005628:	0598      	lsls	r0, r3, #22
 800562a:	d4ed      	bmi.n	8005608 <_vfiprintf_r+0x4c>
 800562c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800562e:	f7ff faf5 	bl	8004c1c <__retarget_lock_release_recursive>
 8005632:	e7e9      	b.n	8005608 <_vfiprintf_r+0x4c>
 8005634:	2300      	movs	r3, #0
 8005636:	9309      	str	r3, [sp, #36]	; 0x24
 8005638:	2320      	movs	r3, #32
 800563a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800563e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005642:	2330      	movs	r3, #48	; 0x30
 8005644:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005808 <_vfiprintf_r+0x24c>
 8005648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800564c:	f04f 0901 	mov.w	r9, #1
 8005650:	4623      	mov	r3, r4
 8005652:	469a      	mov	sl, r3
 8005654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005658:	b10a      	cbz	r2, 800565e <_vfiprintf_r+0xa2>
 800565a:	2a25      	cmp	r2, #37	; 0x25
 800565c:	d1f9      	bne.n	8005652 <_vfiprintf_r+0x96>
 800565e:	ebba 0b04 	subs.w	fp, sl, r4
 8005662:	d00b      	beq.n	800567c <_vfiprintf_r+0xc0>
 8005664:	465b      	mov	r3, fp
 8005666:	4622      	mov	r2, r4
 8005668:	4629      	mov	r1, r5
 800566a:	4630      	mov	r0, r6
 800566c:	f7ff ff93 	bl	8005596 <__sfputs_r>
 8005670:	3001      	adds	r0, #1
 8005672:	f000 80aa 	beq.w	80057ca <_vfiprintf_r+0x20e>
 8005676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005678:	445a      	add	r2, fp
 800567a:	9209      	str	r2, [sp, #36]	; 0x24
 800567c:	f89a 3000 	ldrb.w	r3, [sl]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80a2 	beq.w	80057ca <_vfiprintf_r+0x20e>
 8005686:	2300      	movs	r3, #0
 8005688:	f04f 32ff 	mov.w	r2, #4294967295
 800568c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005690:	f10a 0a01 	add.w	sl, sl, #1
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	9307      	str	r3, [sp, #28]
 8005698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800569c:	931a      	str	r3, [sp, #104]	; 0x68
 800569e:	4654      	mov	r4, sl
 80056a0:	2205      	movs	r2, #5
 80056a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a6:	4858      	ldr	r0, [pc, #352]	; (8005808 <_vfiprintf_r+0x24c>)
 80056a8:	f7fa fd9a 	bl	80001e0 <memchr>
 80056ac:	9a04      	ldr	r2, [sp, #16]
 80056ae:	b9d8      	cbnz	r0, 80056e8 <_vfiprintf_r+0x12c>
 80056b0:	06d1      	lsls	r1, r2, #27
 80056b2:	bf44      	itt	mi
 80056b4:	2320      	movmi	r3, #32
 80056b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ba:	0713      	lsls	r3, r2, #28
 80056bc:	bf44      	itt	mi
 80056be:	232b      	movmi	r3, #43	; 0x2b
 80056c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c4:	f89a 3000 	ldrb.w	r3, [sl]
 80056c8:	2b2a      	cmp	r3, #42	; 0x2a
 80056ca:	d015      	beq.n	80056f8 <_vfiprintf_r+0x13c>
 80056cc:	9a07      	ldr	r2, [sp, #28]
 80056ce:	4654      	mov	r4, sl
 80056d0:	2000      	movs	r0, #0
 80056d2:	f04f 0c0a 	mov.w	ip, #10
 80056d6:	4621      	mov	r1, r4
 80056d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056dc:	3b30      	subs	r3, #48	; 0x30
 80056de:	2b09      	cmp	r3, #9
 80056e0:	d94e      	bls.n	8005780 <_vfiprintf_r+0x1c4>
 80056e2:	b1b0      	cbz	r0, 8005712 <_vfiprintf_r+0x156>
 80056e4:	9207      	str	r2, [sp, #28]
 80056e6:	e014      	b.n	8005712 <_vfiprintf_r+0x156>
 80056e8:	eba0 0308 	sub.w	r3, r0, r8
 80056ec:	fa09 f303 	lsl.w	r3, r9, r3
 80056f0:	4313      	orrs	r3, r2
 80056f2:	9304      	str	r3, [sp, #16]
 80056f4:	46a2      	mov	sl, r4
 80056f6:	e7d2      	b.n	800569e <_vfiprintf_r+0xe2>
 80056f8:	9b03      	ldr	r3, [sp, #12]
 80056fa:	1d19      	adds	r1, r3, #4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	9103      	str	r1, [sp, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	bfbb      	ittet	lt
 8005704:	425b      	neglt	r3, r3
 8005706:	f042 0202 	orrlt.w	r2, r2, #2
 800570a:	9307      	strge	r3, [sp, #28]
 800570c:	9307      	strlt	r3, [sp, #28]
 800570e:	bfb8      	it	lt
 8005710:	9204      	strlt	r2, [sp, #16]
 8005712:	7823      	ldrb	r3, [r4, #0]
 8005714:	2b2e      	cmp	r3, #46	; 0x2e
 8005716:	d10c      	bne.n	8005732 <_vfiprintf_r+0x176>
 8005718:	7863      	ldrb	r3, [r4, #1]
 800571a:	2b2a      	cmp	r3, #42	; 0x2a
 800571c:	d135      	bne.n	800578a <_vfiprintf_r+0x1ce>
 800571e:	9b03      	ldr	r3, [sp, #12]
 8005720:	1d1a      	adds	r2, r3, #4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	9203      	str	r2, [sp, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfb8      	it	lt
 800572a:	f04f 33ff 	movlt.w	r3, #4294967295
 800572e:	3402      	adds	r4, #2
 8005730:	9305      	str	r3, [sp, #20]
 8005732:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005818 <_vfiprintf_r+0x25c>
 8005736:	7821      	ldrb	r1, [r4, #0]
 8005738:	2203      	movs	r2, #3
 800573a:	4650      	mov	r0, sl
 800573c:	f7fa fd50 	bl	80001e0 <memchr>
 8005740:	b140      	cbz	r0, 8005754 <_vfiprintf_r+0x198>
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	eba0 000a 	sub.w	r0, r0, sl
 8005748:	fa03 f000 	lsl.w	r0, r3, r0
 800574c:	9b04      	ldr	r3, [sp, #16]
 800574e:	4303      	orrs	r3, r0
 8005750:	3401      	adds	r4, #1
 8005752:	9304      	str	r3, [sp, #16]
 8005754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005758:	482c      	ldr	r0, [pc, #176]	; (800580c <_vfiprintf_r+0x250>)
 800575a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800575e:	2206      	movs	r2, #6
 8005760:	f7fa fd3e 	bl	80001e0 <memchr>
 8005764:	2800      	cmp	r0, #0
 8005766:	d03f      	beq.n	80057e8 <_vfiprintf_r+0x22c>
 8005768:	4b29      	ldr	r3, [pc, #164]	; (8005810 <_vfiprintf_r+0x254>)
 800576a:	bb1b      	cbnz	r3, 80057b4 <_vfiprintf_r+0x1f8>
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	3307      	adds	r3, #7
 8005770:	f023 0307 	bic.w	r3, r3, #7
 8005774:	3308      	adds	r3, #8
 8005776:	9303      	str	r3, [sp, #12]
 8005778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577a:	443b      	add	r3, r7
 800577c:	9309      	str	r3, [sp, #36]	; 0x24
 800577e:	e767      	b.n	8005650 <_vfiprintf_r+0x94>
 8005780:	fb0c 3202 	mla	r2, ip, r2, r3
 8005784:	460c      	mov	r4, r1
 8005786:	2001      	movs	r0, #1
 8005788:	e7a5      	b.n	80056d6 <_vfiprintf_r+0x11a>
 800578a:	2300      	movs	r3, #0
 800578c:	3401      	adds	r4, #1
 800578e:	9305      	str	r3, [sp, #20]
 8005790:	4619      	mov	r1, r3
 8005792:	f04f 0c0a 	mov.w	ip, #10
 8005796:	4620      	mov	r0, r4
 8005798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800579c:	3a30      	subs	r2, #48	; 0x30
 800579e:	2a09      	cmp	r2, #9
 80057a0:	d903      	bls.n	80057aa <_vfiprintf_r+0x1ee>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0c5      	beq.n	8005732 <_vfiprintf_r+0x176>
 80057a6:	9105      	str	r1, [sp, #20]
 80057a8:	e7c3      	b.n	8005732 <_vfiprintf_r+0x176>
 80057aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ae:	4604      	mov	r4, r0
 80057b0:	2301      	movs	r3, #1
 80057b2:	e7f0      	b.n	8005796 <_vfiprintf_r+0x1da>
 80057b4:	ab03      	add	r3, sp, #12
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	462a      	mov	r2, r5
 80057ba:	4b16      	ldr	r3, [pc, #88]	; (8005814 <_vfiprintf_r+0x258>)
 80057bc:	a904      	add	r1, sp, #16
 80057be:	4630      	mov	r0, r6
 80057c0:	f7fd fcde 	bl	8003180 <_printf_float>
 80057c4:	4607      	mov	r7, r0
 80057c6:	1c78      	adds	r0, r7, #1
 80057c8:	d1d6      	bne.n	8005778 <_vfiprintf_r+0x1bc>
 80057ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057cc:	07d9      	lsls	r1, r3, #31
 80057ce:	d405      	bmi.n	80057dc <_vfiprintf_r+0x220>
 80057d0:	89ab      	ldrh	r3, [r5, #12]
 80057d2:	059a      	lsls	r2, r3, #22
 80057d4:	d402      	bmi.n	80057dc <_vfiprintf_r+0x220>
 80057d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057d8:	f7ff fa20 	bl	8004c1c <__retarget_lock_release_recursive>
 80057dc:	89ab      	ldrh	r3, [r5, #12]
 80057de:	065b      	lsls	r3, r3, #25
 80057e0:	f53f af12 	bmi.w	8005608 <_vfiprintf_r+0x4c>
 80057e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057e6:	e711      	b.n	800560c <_vfiprintf_r+0x50>
 80057e8:	ab03      	add	r3, sp, #12
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	462a      	mov	r2, r5
 80057ee:	4b09      	ldr	r3, [pc, #36]	; (8005814 <_vfiprintf_r+0x258>)
 80057f0:	a904      	add	r1, sp, #16
 80057f2:	4630      	mov	r0, r6
 80057f4:	f7fd ff68 	bl	80036c8 <_printf_i>
 80057f8:	e7e4      	b.n	80057c4 <_vfiprintf_r+0x208>
 80057fa:	bf00      	nop
 80057fc:	08007228 	.word	0x08007228
 8005800:	08007248 	.word	0x08007248
 8005804:	08007208 	.word	0x08007208
 8005808:	080073c4 	.word	0x080073c4
 800580c:	080073ce 	.word	0x080073ce
 8005810:	08003181 	.word	0x08003181
 8005814:	08005597 	.word	0x08005597
 8005818:	080073ca 	.word	0x080073ca

0800581c <_sbrk_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4d06      	ldr	r5, [pc, #24]	; (8005838 <_sbrk_r+0x1c>)
 8005820:	2300      	movs	r3, #0
 8005822:	4604      	mov	r4, r0
 8005824:	4608      	mov	r0, r1
 8005826:	602b      	str	r3, [r5, #0]
 8005828:	f7fc fb40 	bl	8001eac <_sbrk>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_sbrk_r+0x1a>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_sbrk_r+0x1a>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	20000920 	.word	0x20000920

0800583c <__sread>:
 800583c:	b510      	push	{r4, lr}
 800583e:	460c      	mov	r4, r1
 8005840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005844:	f000 f8e2 	bl	8005a0c <_read_r>
 8005848:	2800      	cmp	r0, #0
 800584a:	bfab      	itete	ge
 800584c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800584e:	89a3      	ldrhlt	r3, [r4, #12]
 8005850:	181b      	addge	r3, r3, r0
 8005852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005856:	bfac      	ite	ge
 8005858:	6563      	strge	r3, [r4, #84]	; 0x54
 800585a:	81a3      	strhlt	r3, [r4, #12]
 800585c:	bd10      	pop	{r4, pc}

0800585e <__swrite>:
 800585e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005862:	461f      	mov	r7, r3
 8005864:	898b      	ldrh	r3, [r1, #12]
 8005866:	05db      	lsls	r3, r3, #23
 8005868:	4605      	mov	r5, r0
 800586a:	460c      	mov	r4, r1
 800586c:	4616      	mov	r6, r2
 800586e:	d505      	bpl.n	800587c <__swrite+0x1e>
 8005870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005874:	2302      	movs	r3, #2
 8005876:	2200      	movs	r2, #0
 8005878:	f000 f898 	bl	80059ac <_lseek_r>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	4632      	mov	r2, r6
 800588a:	463b      	mov	r3, r7
 800588c:	4628      	mov	r0, r5
 800588e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005892:	f000 b817 	b.w	80058c4 <_write_r>

08005896 <__sseek>:
 8005896:	b510      	push	{r4, lr}
 8005898:	460c      	mov	r4, r1
 800589a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589e:	f000 f885 	bl	80059ac <_lseek_r>
 80058a2:	1c43      	adds	r3, r0, #1
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	bf15      	itete	ne
 80058a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80058aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058b2:	81a3      	strheq	r3, [r4, #12]
 80058b4:	bf18      	it	ne
 80058b6:	81a3      	strhne	r3, [r4, #12]
 80058b8:	bd10      	pop	{r4, pc}

080058ba <__sclose>:
 80058ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058be:	f000 b831 	b.w	8005924 <_close_r>
	...

080058c4 <_write_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d07      	ldr	r5, [pc, #28]	; (80058e4 <_write_r+0x20>)
 80058c8:	4604      	mov	r4, r0
 80058ca:	4608      	mov	r0, r1
 80058cc:	4611      	mov	r1, r2
 80058ce:	2200      	movs	r2, #0
 80058d0:	602a      	str	r2, [r5, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f7fc fad0 	bl	8001e78 <_write>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_write_r+0x1e>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_write_r+0x1e>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20000920 	.word	0x20000920

080058e8 <__assert_func>:
 80058e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058ea:	4614      	mov	r4, r2
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <__assert_func+0x2c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4605      	mov	r5, r0
 80058f4:	68d8      	ldr	r0, [r3, #12]
 80058f6:	b14c      	cbz	r4, 800590c <__assert_func+0x24>
 80058f8:	4b07      	ldr	r3, [pc, #28]	; (8005918 <__assert_func+0x30>)
 80058fa:	9100      	str	r1, [sp, #0]
 80058fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005900:	4906      	ldr	r1, [pc, #24]	; (800591c <__assert_func+0x34>)
 8005902:	462b      	mov	r3, r5
 8005904:	f000 f81e 	bl	8005944 <fiprintf>
 8005908:	f000 f89f 	bl	8005a4a <abort>
 800590c:	4b04      	ldr	r3, [pc, #16]	; (8005920 <__assert_func+0x38>)
 800590e:	461c      	mov	r4, r3
 8005910:	e7f3      	b.n	80058fa <__assert_func+0x12>
 8005912:	bf00      	nop
 8005914:	20000010 	.word	0x20000010
 8005918:	080073d5 	.word	0x080073d5
 800591c:	080073e2 	.word	0x080073e2
 8005920:	08007410 	.word	0x08007410

08005924 <_close_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4d06      	ldr	r5, [pc, #24]	; (8005940 <_close_r+0x1c>)
 8005928:	2300      	movs	r3, #0
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	602b      	str	r3, [r5, #0]
 8005930:	f7fc fab0 	bl	8001e94 <_close>
 8005934:	1c43      	adds	r3, r0, #1
 8005936:	d102      	bne.n	800593e <_close_r+0x1a>
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	b103      	cbz	r3, 800593e <_close_r+0x1a>
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	bd38      	pop	{r3, r4, r5, pc}
 8005940:	20000920 	.word	0x20000920

08005944 <fiprintf>:
 8005944:	b40e      	push	{r1, r2, r3}
 8005946:	b503      	push	{r0, r1, lr}
 8005948:	4601      	mov	r1, r0
 800594a:	ab03      	add	r3, sp, #12
 800594c:	4805      	ldr	r0, [pc, #20]	; (8005964 <fiprintf+0x20>)
 800594e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005952:	6800      	ldr	r0, [r0, #0]
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	f7ff fe31 	bl	80055bc <_vfiprintf_r>
 800595a:	b002      	add	sp, #8
 800595c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005960:	b003      	add	sp, #12
 8005962:	4770      	bx	lr
 8005964:	20000010 	.word	0x20000010

08005968 <_fstat_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	4d07      	ldr	r5, [pc, #28]	; (8005988 <_fstat_r+0x20>)
 800596c:	2300      	movs	r3, #0
 800596e:	4604      	mov	r4, r0
 8005970:	4608      	mov	r0, r1
 8005972:	4611      	mov	r1, r2
 8005974:	602b      	str	r3, [r5, #0]
 8005976:	f7fc fa90 	bl	8001e9a <_fstat>
 800597a:	1c43      	adds	r3, r0, #1
 800597c:	d102      	bne.n	8005984 <_fstat_r+0x1c>
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	b103      	cbz	r3, 8005984 <_fstat_r+0x1c>
 8005982:	6023      	str	r3, [r4, #0]
 8005984:	bd38      	pop	{r3, r4, r5, pc}
 8005986:	bf00      	nop
 8005988:	20000920 	.word	0x20000920

0800598c <_isatty_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4d06      	ldr	r5, [pc, #24]	; (80059a8 <_isatty_r+0x1c>)
 8005990:	2300      	movs	r3, #0
 8005992:	4604      	mov	r4, r0
 8005994:	4608      	mov	r0, r1
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	f7fc fa84 	bl	8001ea4 <_isatty>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d102      	bne.n	80059a6 <_isatty_r+0x1a>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <_isatty_r+0x1a>
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	20000920 	.word	0x20000920

080059ac <_lseek_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4d07      	ldr	r5, [pc, #28]	; (80059cc <_lseek_r+0x20>)
 80059b0:	4604      	mov	r4, r0
 80059b2:	4608      	mov	r0, r1
 80059b4:	4611      	mov	r1, r2
 80059b6:	2200      	movs	r2, #0
 80059b8:	602a      	str	r2, [r5, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	f7fc fa74 	bl	8001ea8 <_lseek>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d102      	bne.n	80059ca <_lseek_r+0x1e>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	b103      	cbz	r3, 80059ca <_lseek_r+0x1e>
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	20000920 	.word	0x20000920

080059d0 <__ascii_mbtowc>:
 80059d0:	b082      	sub	sp, #8
 80059d2:	b901      	cbnz	r1, 80059d6 <__ascii_mbtowc+0x6>
 80059d4:	a901      	add	r1, sp, #4
 80059d6:	b142      	cbz	r2, 80059ea <__ascii_mbtowc+0x1a>
 80059d8:	b14b      	cbz	r3, 80059ee <__ascii_mbtowc+0x1e>
 80059da:	7813      	ldrb	r3, [r2, #0]
 80059dc:	600b      	str	r3, [r1, #0]
 80059de:	7812      	ldrb	r2, [r2, #0]
 80059e0:	1e10      	subs	r0, r2, #0
 80059e2:	bf18      	it	ne
 80059e4:	2001      	movne	r0, #1
 80059e6:	b002      	add	sp, #8
 80059e8:	4770      	bx	lr
 80059ea:	4610      	mov	r0, r2
 80059ec:	e7fb      	b.n	80059e6 <__ascii_mbtowc+0x16>
 80059ee:	f06f 0001 	mvn.w	r0, #1
 80059f2:	e7f8      	b.n	80059e6 <__ascii_mbtowc+0x16>

080059f4 <__malloc_lock>:
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <__malloc_lock+0x8>)
 80059f6:	f7ff b910 	b.w	8004c1a <__retarget_lock_acquire_recursive>
 80059fa:	bf00      	nop
 80059fc:	20000918 	.word	0x20000918

08005a00 <__malloc_unlock>:
 8005a00:	4801      	ldr	r0, [pc, #4]	; (8005a08 <__malloc_unlock+0x8>)
 8005a02:	f7ff b90b 	b.w	8004c1c <__retarget_lock_release_recursive>
 8005a06:	bf00      	nop
 8005a08:	20000918 	.word	0x20000918

08005a0c <_read_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d07      	ldr	r5, [pc, #28]	; (8005a2c <_read_r+0x20>)
 8005a10:	4604      	mov	r4, r0
 8005a12:	4608      	mov	r0, r1
 8005a14:	4611      	mov	r1, r2
 8005a16:	2200      	movs	r2, #0
 8005a18:	602a      	str	r2, [r5, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f7fc fa1c 	bl	8001e58 <_read>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_read_r+0x1e>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_read_r+0x1e>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	20000920 	.word	0x20000920

08005a30 <__ascii_wctomb>:
 8005a30:	b149      	cbz	r1, 8005a46 <__ascii_wctomb+0x16>
 8005a32:	2aff      	cmp	r2, #255	; 0xff
 8005a34:	bf85      	ittet	hi
 8005a36:	238a      	movhi	r3, #138	; 0x8a
 8005a38:	6003      	strhi	r3, [r0, #0]
 8005a3a:	700a      	strbls	r2, [r1, #0]
 8005a3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005a40:	bf98      	it	ls
 8005a42:	2001      	movls	r0, #1
 8005a44:	4770      	bx	lr
 8005a46:	4608      	mov	r0, r1
 8005a48:	4770      	bx	lr

08005a4a <abort>:
 8005a4a:	b508      	push	{r3, lr}
 8005a4c:	2006      	movs	r0, #6
 8005a4e:	f000 f82b 	bl	8005aa8 <raise>
 8005a52:	2001      	movs	r0, #1
 8005a54:	f7fc f9fa 	bl	8001e4c <_exit>

08005a58 <_raise_r>:
 8005a58:	291f      	cmp	r1, #31
 8005a5a:	b538      	push	{r3, r4, r5, lr}
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	460d      	mov	r5, r1
 8005a60:	d904      	bls.n	8005a6c <_raise_r+0x14>
 8005a62:	2316      	movs	r3, #22
 8005a64:	6003      	str	r3, [r0, #0]
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6a:	bd38      	pop	{r3, r4, r5, pc}
 8005a6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005a6e:	b112      	cbz	r2, 8005a76 <_raise_r+0x1e>
 8005a70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a74:	b94b      	cbnz	r3, 8005a8a <_raise_r+0x32>
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 f830 	bl	8005adc <_getpid_r>
 8005a7c:	462a      	mov	r2, r5
 8005a7e:	4601      	mov	r1, r0
 8005a80:	4620      	mov	r0, r4
 8005a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a86:	f000 b817 	b.w	8005ab8 <_kill_r>
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d00a      	beq.n	8005aa4 <_raise_r+0x4c>
 8005a8e:	1c59      	adds	r1, r3, #1
 8005a90:	d103      	bne.n	8005a9a <_raise_r+0x42>
 8005a92:	2316      	movs	r3, #22
 8005a94:	6003      	str	r3, [r0, #0]
 8005a96:	2001      	movs	r0, #1
 8005a98:	e7e7      	b.n	8005a6a <_raise_r+0x12>
 8005a9a:	2400      	movs	r4, #0
 8005a9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	4798      	blx	r3
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	e7e0      	b.n	8005a6a <_raise_r+0x12>

08005aa8 <raise>:
 8005aa8:	4b02      	ldr	r3, [pc, #8]	; (8005ab4 <raise+0xc>)
 8005aaa:	4601      	mov	r1, r0
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	f7ff bfd3 	b.w	8005a58 <_raise_r>
 8005ab2:	bf00      	nop
 8005ab4:	20000010 	.word	0x20000010

08005ab8 <_kill_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d07      	ldr	r5, [pc, #28]	; (8005ad8 <_kill_r+0x20>)
 8005abc:	2300      	movs	r3, #0
 8005abe:	4604      	mov	r4, r0
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	602b      	str	r3, [r5, #0]
 8005ac6:	f7fc f9b9 	bl	8001e3c <_kill>
 8005aca:	1c43      	adds	r3, r0, #1
 8005acc:	d102      	bne.n	8005ad4 <_kill_r+0x1c>
 8005ace:	682b      	ldr	r3, [r5, #0]
 8005ad0:	b103      	cbz	r3, 8005ad4 <_kill_r+0x1c>
 8005ad2:	6023      	str	r3, [r4, #0]
 8005ad4:	bd38      	pop	{r3, r4, r5, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000920 	.word	0x20000920

08005adc <_getpid_r>:
 8005adc:	f7fc b9ac 	b.w	8001e38 <_getpid>

08005ae0 <atan2>:
 8005ae0:	f000 b8e2 	b.w	8005ca8 <__ieee754_atan2>

08005ae4 <pow>:
 8005ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae8:	ec59 8b10 	vmov	r8, r9, d0
 8005aec:	ec57 6b11 	vmov	r6, r7, d1
 8005af0:	f000 f9a6 	bl	8005e40 <__ieee754_pow>
 8005af4:	4b4e      	ldr	r3, [pc, #312]	; (8005c30 <pow+0x14c>)
 8005af6:	f993 3000 	ldrsb.w	r3, [r3]
 8005afa:	3301      	adds	r3, #1
 8005afc:	ec55 4b10 	vmov	r4, r5, d0
 8005b00:	d015      	beq.n	8005b2e <pow+0x4a>
 8005b02:	4632      	mov	r2, r6
 8005b04:	463b      	mov	r3, r7
 8005b06:	4630      	mov	r0, r6
 8005b08:	4639      	mov	r1, r7
 8005b0a:	f7fb f80f 	bl	8000b2c <__aeabi_dcmpun>
 8005b0e:	b970      	cbnz	r0, 8005b2e <pow+0x4a>
 8005b10:	4642      	mov	r2, r8
 8005b12:	464b      	mov	r3, r9
 8005b14:	4640      	mov	r0, r8
 8005b16:	4649      	mov	r1, r9
 8005b18:	f7fb f808 	bl	8000b2c <__aeabi_dcmpun>
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2300      	movs	r3, #0
 8005b20:	b148      	cbz	r0, 8005b36 <pow+0x52>
 8005b22:	4630      	mov	r0, r6
 8005b24:	4639      	mov	r1, r7
 8005b26:	f7fa ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d17d      	bne.n	8005c2a <pow+0x146>
 8005b2e:	ec45 4b10 	vmov	d0, r4, r5
 8005b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b36:	4640      	mov	r0, r8
 8005b38:	4649      	mov	r1, r9
 8005b3a:	f7fa ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b3e:	b1e0      	cbz	r0, 8005b7a <pow+0x96>
 8005b40:	2200      	movs	r2, #0
 8005b42:	2300      	movs	r3, #0
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d16c      	bne.n	8005c2a <pow+0x146>
 8005b50:	ec47 6b10 	vmov	d0, r6, r7
 8005b54:	f001 f8f5 	bl	8006d42 <finite>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d0e8      	beq.n	8005b2e <pow+0x4a>
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2300      	movs	r3, #0
 8005b60:	4630      	mov	r0, r6
 8005b62:	4639      	mov	r1, r7
 8005b64:	f7fa ffba 	bl	8000adc <__aeabi_dcmplt>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d0e0      	beq.n	8005b2e <pow+0x4a>
 8005b6c:	f7fd fa28 	bl	8002fc0 <__errno>
 8005b70:	2321      	movs	r3, #33	; 0x21
 8005b72:	6003      	str	r3, [r0, #0]
 8005b74:	2400      	movs	r4, #0
 8005b76:	4d2f      	ldr	r5, [pc, #188]	; (8005c34 <pow+0x150>)
 8005b78:	e7d9      	b.n	8005b2e <pow+0x4a>
 8005b7a:	ec45 4b10 	vmov	d0, r4, r5
 8005b7e:	f001 f8e0 	bl	8006d42 <finite>
 8005b82:	bbb8      	cbnz	r0, 8005bf4 <pow+0x110>
 8005b84:	ec49 8b10 	vmov	d0, r8, r9
 8005b88:	f001 f8db 	bl	8006d42 <finite>
 8005b8c:	b390      	cbz	r0, 8005bf4 <pow+0x110>
 8005b8e:	ec47 6b10 	vmov	d0, r6, r7
 8005b92:	f001 f8d6 	bl	8006d42 <finite>
 8005b96:	b368      	cbz	r0, 8005bf4 <pow+0x110>
 8005b98:	4622      	mov	r2, r4
 8005b9a:	462b      	mov	r3, r5
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	f7fa ffc4 	bl	8000b2c <__aeabi_dcmpun>
 8005ba4:	b160      	cbz	r0, 8005bc0 <pow+0xdc>
 8005ba6:	f7fd fa0b 	bl	8002fc0 <__errno>
 8005baa:	2321      	movs	r3, #33	; 0x21
 8005bac:	6003      	str	r3, [r0, #0]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	f7fa fe49 	bl	800084c <__aeabi_ddiv>
 8005bba:	4604      	mov	r4, r0
 8005bbc:	460d      	mov	r5, r1
 8005bbe:	e7b6      	b.n	8005b2e <pow+0x4a>
 8005bc0:	f7fd f9fe 	bl	8002fc0 <__errno>
 8005bc4:	2322      	movs	r3, #34	; 0x22
 8005bc6:	6003      	str	r3, [r0, #0]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2300      	movs	r3, #0
 8005bcc:	4640      	mov	r0, r8
 8005bce:	4649      	mov	r1, r9
 8005bd0:	f7fa ff84 	bl	8000adc <__aeabi_dcmplt>
 8005bd4:	2400      	movs	r4, #0
 8005bd6:	b158      	cbz	r0, 8005bf0 <pow+0x10c>
 8005bd8:	ec47 6b10 	vmov	d0, r6, r7
 8005bdc:	f001 f8c4 	bl	8006d68 <rint>
 8005be0:	4632      	mov	r2, r6
 8005be2:	ec51 0b10 	vmov	r0, r1, d0
 8005be6:	463b      	mov	r3, r7
 8005be8:	f7fa ff6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d0c2      	beq.n	8005b76 <pow+0x92>
 8005bf0:	4d11      	ldr	r5, [pc, #68]	; (8005c38 <pow+0x154>)
 8005bf2:	e79c      	b.n	8005b2e <pow+0x4a>
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	f7fa ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d094      	beq.n	8005b2e <pow+0x4a>
 8005c04:	ec49 8b10 	vmov	d0, r8, r9
 8005c08:	f001 f89b 	bl	8006d42 <finite>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d08e      	beq.n	8005b2e <pow+0x4a>
 8005c10:	ec47 6b10 	vmov	d0, r6, r7
 8005c14:	f001 f895 	bl	8006d42 <finite>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d088      	beq.n	8005b2e <pow+0x4a>
 8005c1c:	f7fd f9d0 	bl	8002fc0 <__errno>
 8005c20:	2322      	movs	r3, #34	; 0x22
 8005c22:	6003      	str	r3, [r0, #0]
 8005c24:	2400      	movs	r4, #0
 8005c26:	2500      	movs	r5, #0
 8005c28:	e781      	b.n	8005b2e <pow+0x4a>
 8005c2a:	4d04      	ldr	r5, [pc, #16]	; (8005c3c <pow+0x158>)
 8005c2c:	2400      	movs	r4, #0
 8005c2e:	e77e      	b.n	8005b2e <pow+0x4a>
 8005c30:	200001e0 	.word	0x200001e0
 8005c34:	fff00000 	.word	0xfff00000
 8005c38:	7ff00000 	.word	0x7ff00000
 8005c3c:	3ff00000 	.word	0x3ff00000

08005c40 <sqrt>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	ed2d 8b02 	vpush	{d8}
 8005c46:	ec55 4b10 	vmov	r4, r5, d0
 8005c4a:	f000 fe1b 	bl	8006884 <__ieee754_sqrt>
 8005c4e:	4b15      	ldr	r3, [pc, #84]	; (8005ca4 <sqrt+0x64>)
 8005c50:	eeb0 8a40 	vmov.f32	s16, s0
 8005c54:	eef0 8a60 	vmov.f32	s17, s1
 8005c58:	f993 3000 	ldrsb.w	r3, [r3]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	d019      	beq.n	8005c94 <sqrt+0x54>
 8005c60:	4622      	mov	r2, r4
 8005c62:	462b      	mov	r3, r5
 8005c64:	4620      	mov	r0, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7fa ff60 	bl	8000b2c <__aeabi_dcmpun>
 8005c6c:	b990      	cbnz	r0, 8005c94 <sqrt+0x54>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2300      	movs	r3, #0
 8005c72:	4620      	mov	r0, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	f7fa ff31 	bl	8000adc <__aeabi_dcmplt>
 8005c7a:	b158      	cbz	r0, 8005c94 <sqrt+0x54>
 8005c7c:	f7fd f9a0 	bl	8002fc0 <__errno>
 8005c80:	2321      	movs	r3, #33	; 0x21
 8005c82:	6003      	str	r3, [r0, #0]
 8005c84:	2200      	movs	r2, #0
 8005c86:	2300      	movs	r3, #0
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f7fa fdde 	bl	800084c <__aeabi_ddiv>
 8005c90:	ec41 0b18 	vmov	d8, r0, r1
 8005c94:	eeb0 0a48 	vmov.f32	s0, s16
 8005c98:	eef0 0a68 	vmov.f32	s1, s17
 8005c9c:	ecbd 8b02 	vpop	{d8}
 8005ca0:	bd38      	pop	{r3, r4, r5, pc}
 8005ca2:	bf00      	nop
 8005ca4:	200001e0 	.word	0x200001e0

08005ca8 <__ieee754_atan2>:
 8005ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cac:	ec57 6b11 	vmov	r6, r7, d1
 8005cb0:	4273      	negs	r3, r6
 8005cb2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005e38 <__ieee754_atan2+0x190>
 8005cb6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8005cba:	4333      	orrs	r3, r6
 8005cbc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005cc0:	4573      	cmp	r3, lr
 8005cc2:	ec51 0b10 	vmov	r0, r1, d0
 8005cc6:	ee11 8a10 	vmov	r8, s2
 8005cca:	d80a      	bhi.n	8005ce2 <__ieee754_atan2+0x3a>
 8005ccc:	4244      	negs	r4, r0
 8005cce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005cd2:	4304      	orrs	r4, r0
 8005cd4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005cd8:	4574      	cmp	r4, lr
 8005cda:	ee10 9a10 	vmov	r9, s0
 8005cde:	468c      	mov	ip, r1
 8005ce0:	d907      	bls.n	8005cf2 <__ieee754_atan2+0x4a>
 8005ce2:	4632      	mov	r2, r6
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	f7fa fad1 	bl	800028c <__adddf3>
 8005cea:	ec41 0b10 	vmov	d0, r0, r1
 8005cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cf2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005cf6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005cfa:	4334      	orrs	r4, r6
 8005cfc:	d103      	bne.n	8005d06 <__ieee754_atan2+0x5e>
 8005cfe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d02:	f000 be75 	b.w	80069f0 <atan>
 8005d06:	17bc      	asrs	r4, r7, #30
 8005d08:	f004 0402 	and.w	r4, r4, #2
 8005d0c:	ea53 0909 	orrs.w	r9, r3, r9
 8005d10:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005d14:	d107      	bne.n	8005d26 <__ieee754_atan2+0x7e>
 8005d16:	2c02      	cmp	r4, #2
 8005d18:	d060      	beq.n	8005ddc <__ieee754_atan2+0x134>
 8005d1a:	2c03      	cmp	r4, #3
 8005d1c:	d1e5      	bne.n	8005cea <__ieee754_atan2+0x42>
 8005d1e:	a142      	add	r1, pc, #264	; (adr r1, 8005e28 <__ieee754_atan2+0x180>)
 8005d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d24:	e7e1      	b.n	8005cea <__ieee754_atan2+0x42>
 8005d26:	ea52 0808 	orrs.w	r8, r2, r8
 8005d2a:	d106      	bne.n	8005d3a <__ieee754_atan2+0x92>
 8005d2c:	f1bc 0f00 	cmp.w	ip, #0
 8005d30:	da5f      	bge.n	8005df2 <__ieee754_atan2+0x14a>
 8005d32:	a13f      	add	r1, pc, #252	; (adr r1, 8005e30 <__ieee754_atan2+0x188>)
 8005d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d38:	e7d7      	b.n	8005cea <__ieee754_atan2+0x42>
 8005d3a:	4572      	cmp	r2, lr
 8005d3c:	d10f      	bne.n	8005d5e <__ieee754_atan2+0xb6>
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d44:	d107      	bne.n	8005d56 <__ieee754_atan2+0xae>
 8005d46:	2c02      	cmp	r4, #2
 8005d48:	d84c      	bhi.n	8005de4 <__ieee754_atan2+0x13c>
 8005d4a:	4b35      	ldr	r3, [pc, #212]	; (8005e20 <__ieee754_atan2+0x178>)
 8005d4c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005d50:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005d54:	e7c9      	b.n	8005cea <__ieee754_atan2+0x42>
 8005d56:	2c02      	cmp	r4, #2
 8005d58:	d848      	bhi.n	8005dec <__ieee754_atan2+0x144>
 8005d5a:	4b32      	ldr	r3, [pc, #200]	; (8005e24 <__ieee754_atan2+0x17c>)
 8005d5c:	e7f6      	b.n	8005d4c <__ieee754_atan2+0xa4>
 8005d5e:	4573      	cmp	r3, lr
 8005d60:	d0e4      	beq.n	8005d2c <__ieee754_atan2+0x84>
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005d68:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005d6c:	da1e      	bge.n	8005dac <__ieee754_atan2+0x104>
 8005d6e:	2f00      	cmp	r7, #0
 8005d70:	da01      	bge.n	8005d76 <__ieee754_atan2+0xce>
 8005d72:	323c      	adds	r2, #60	; 0x3c
 8005d74:	db1e      	blt.n	8005db4 <__ieee754_atan2+0x10c>
 8005d76:	4632      	mov	r2, r6
 8005d78:	463b      	mov	r3, r7
 8005d7a:	f7fa fd67 	bl	800084c <__aeabi_ddiv>
 8005d7e:	ec41 0b10 	vmov	d0, r0, r1
 8005d82:	f000 ffd5 	bl	8006d30 <fabs>
 8005d86:	f000 fe33 	bl	80069f0 <atan>
 8005d8a:	ec51 0b10 	vmov	r0, r1, d0
 8005d8e:	2c01      	cmp	r4, #1
 8005d90:	d013      	beq.n	8005dba <__ieee754_atan2+0x112>
 8005d92:	2c02      	cmp	r4, #2
 8005d94:	d015      	beq.n	8005dc2 <__ieee754_atan2+0x11a>
 8005d96:	2c00      	cmp	r4, #0
 8005d98:	d0a7      	beq.n	8005cea <__ieee754_atan2+0x42>
 8005d9a:	a319      	add	r3, pc, #100	; (adr r3, 8005e00 <__ieee754_atan2+0x158>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f7fa fa72 	bl	8000288 <__aeabi_dsub>
 8005da4:	a318      	add	r3, pc, #96	; (adr r3, 8005e08 <__ieee754_atan2+0x160>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	e014      	b.n	8005dd6 <__ieee754_atan2+0x12e>
 8005dac:	a118      	add	r1, pc, #96	; (adr r1, 8005e10 <__ieee754_atan2+0x168>)
 8005dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005db2:	e7ec      	b.n	8005d8e <__ieee754_atan2+0xe6>
 8005db4:	2000      	movs	r0, #0
 8005db6:	2100      	movs	r1, #0
 8005db8:	e7e9      	b.n	8005d8e <__ieee754_atan2+0xe6>
 8005dba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	e793      	b.n	8005cea <__ieee754_atan2+0x42>
 8005dc2:	a30f      	add	r3, pc, #60	; (adr r3, 8005e00 <__ieee754_atan2+0x158>)
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	f7fa fa5e 	bl	8000288 <__aeabi_dsub>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	a10d      	add	r1, pc, #52	; (adr r1, 8005e08 <__ieee754_atan2+0x160>)
 8005dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dd6:	f7fa fa57 	bl	8000288 <__aeabi_dsub>
 8005dda:	e786      	b.n	8005cea <__ieee754_atan2+0x42>
 8005ddc:	a10a      	add	r1, pc, #40	; (adr r1, 8005e08 <__ieee754_atan2+0x160>)
 8005dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005de2:	e782      	b.n	8005cea <__ieee754_atan2+0x42>
 8005de4:	a10c      	add	r1, pc, #48	; (adr r1, 8005e18 <__ieee754_atan2+0x170>)
 8005de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dea:	e77e      	b.n	8005cea <__ieee754_atan2+0x42>
 8005dec:	2000      	movs	r0, #0
 8005dee:	2100      	movs	r1, #0
 8005df0:	e77b      	b.n	8005cea <__ieee754_atan2+0x42>
 8005df2:	a107      	add	r1, pc, #28	; (adr r1, 8005e10 <__ieee754_atan2+0x168>)
 8005df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005df8:	e777      	b.n	8005cea <__ieee754_atan2+0x42>
 8005dfa:	bf00      	nop
 8005dfc:	f3af 8000 	nop.w
 8005e00:	33145c07 	.word	0x33145c07
 8005e04:	3ca1a626 	.word	0x3ca1a626
 8005e08:	54442d18 	.word	0x54442d18
 8005e0c:	400921fb 	.word	0x400921fb
 8005e10:	54442d18 	.word	0x54442d18
 8005e14:	3ff921fb 	.word	0x3ff921fb
 8005e18:	54442d18 	.word	0x54442d18
 8005e1c:	3fe921fb 	.word	0x3fe921fb
 8005e20:	08007520 	.word	0x08007520
 8005e24:	08007538 	.word	0x08007538
 8005e28:	54442d18 	.word	0x54442d18
 8005e2c:	c00921fb 	.word	0xc00921fb
 8005e30:	54442d18 	.word	0x54442d18
 8005e34:	bff921fb 	.word	0xbff921fb
 8005e38:	7ff00000 	.word	0x7ff00000
 8005e3c:	00000000 	.word	0x00000000

08005e40 <__ieee754_pow>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	ed2d 8b06 	vpush	{d8-d10}
 8005e48:	b08d      	sub	sp, #52	; 0x34
 8005e4a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005e4e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8005e52:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005e56:	ea56 0100 	orrs.w	r1, r6, r0
 8005e5a:	ec53 2b10 	vmov	r2, r3, d0
 8005e5e:	f000 84d1 	beq.w	8006804 <__ieee754_pow+0x9c4>
 8005e62:	497f      	ldr	r1, [pc, #508]	; (8006060 <__ieee754_pow+0x220>)
 8005e64:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005e68:	428c      	cmp	r4, r1
 8005e6a:	ee10 8a10 	vmov	r8, s0
 8005e6e:	4699      	mov	r9, r3
 8005e70:	dc09      	bgt.n	8005e86 <__ieee754_pow+0x46>
 8005e72:	d103      	bne.n	8005e7c <__ieee754_pow+0x3c>
 8005e74:	b97a      	cbnz	r2, 8005e96 <__ieee754_pow+0x56>
 8005e76:	42a6      	cmp	r6, r4
 8005e78:	dd02      	ble.n	8005e80 <__ieee754_pow+0x40>
 8005e7a:	e00c      	b.n	8005e96 <__ieee754_pow+0x56>
 8005e7c:	428e      	cmp	r6, r1
 8005e7e:	dc02      	bgt.n	8005e86 <__ieee754_pow+0x46>
 8005e80:	428e      	cmp	r6, r1
 8005e82:	d110      	bne.n	8005ea6 <__ieee754_pow+0x66>
 8005e84:	b178      	cbz	r0, 8005ea6 <__ieee754_pow+0x66>
 8005e86:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005e8a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005e8e:	ea54 0308 	orrs.w	r3, r4, r8
 8005e92:	f000 84b7 	beq.w	8006804 <__ieee754_pow+0x9c4>
 8005e96:	4873      	ldr	r0, [pc, #460]	; (8006064 <__ieee754_pow+0x224>)
 8005e98:	b00d      	add	sp, #52	; 0x34
 8005e9a:	ecbd 8b06 	vpop	{d8-d10}
 8005e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea2:	f000 bf59 	b.w	8006d58 <nan>
 8005ea6:	f1b9 0f00 	cmp.w	r9, #0
 8005eaa:	da36      	bge.n	8005f1a <__ieee754_pow+0xda>
 8005eac:	496e      	ldr	r1, [pc, #440]	; (8006068 <__ieee754_pow+0x228>)
 8005eae:	428e      	cmp	r6, r1
 8005eb0:	dc51      	bgt.n	8005f56 <__ieee754_pow+0x116>
 8005eb2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8005eb6:	428e      	cmp	r6, r1
 8005eb8:	f340 84af 	ble.w	800681a <__ieee754_pow+0x9da>
 8005ebc:	1531      	asrs	r1, r6, #20
 8005ebe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005ec2:	2914      	cmp	r1, #20
 8005ec4:	dd0f      	ble.n	8005ee6 <__ieee754_pow+0xa6>
 8005ec6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8005eca:	fa20 fc01 	lsr.w	ip, r0, r1
 8005ece:	fa0c f101 	lsl.w	r1, ip, r1
 8005ed2:	4281      	cmp	r1, r0
 8005ed4:	f040 84a1 	bne.w	800681a <__ieee754_pow+0x9da>
 8005ed8:	f00c 0c01 	and.w	ip, ip, #1
 8005edc:	f1cc 0102 	rsb	r1, ip, #2
 8005ee0:	9100      	str	r1, [sp, #0]
 8005ee2:	b180      	cbz	r0, 8005f06 <__ieee754_pow+0xc6>
 8005ee4:	e059      	b.n	8005f9a <__ieee754_pow+0x15a>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d155      	bne.n	8005f96 <__ieee754_pow+0x156>
 8005eea:	f1c1 0114 	rsb	r1, r1, #20
 8005eee:	fa46 fc01 	asr.w	ip, r6, r1
 8005ef2:	fa0c f101 	lsl.w	r1, ip, r1
 8005ef6:	42b1      	cmp	r1, r6
 8005ef8:	f040 848c 	bne.w	8006814 <__ieee754_pow+0x9d4>
 8005efc:	f00c 0c01 	and.w	ip, ip, #1
 8005f00:	f1cc 0102 	rsb	r1, ip, #2
 8005f04:	9100      	str	r1, [sp, #0]
 8005f06:	4959      	ldr	r1, [pc, #356]	; (800606c <__ieee754_pow+0x22c>)
 8005f08:	428e      	cmp	r6, r1
 8005f0a:	d12d      	bne.n	8005f68 <__ieee754_pow+0x128>
 8005f0c:	2f00      	cmp	r7, #0
 8005f0e:	da79      	bge.n	8006004 <__ieee754_pow+0x1c4>
 8005f10:	4956      	ldr	r1, [pc, #344]	; (800606c <__ieee754_pow+0x22c>)
 8005f12:	2000      	movs	r0, #0
 8005f14:	f7fa fc9a 	bl	800084c <__aeabi_ddiv>
 8005f18:	e016      	b.n	8005f48 <__ieee754_pow+0x108>
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	9100      	str	r1, [sp, #0]
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d13b      	bne.n	8005f9a <__ieee754_pow+0x15a>
 8005f22:	494f      	ldr	r1, [pc, #316]	; (8006060 <__ieee754_pow+0x220>)
 8005f24:	428e      	cmp	r6, r1
 8005f26:	d1ee      	bne.n	8005f06 <__ieee754_pow+0xc6>
 8005f28:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005f2c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005f30:	ea53 0308 	orrs.w	r3, r3, r8
 8005f34:	f000 8466 	beq.w	8006804 <__ieee754_pow+0x9c4>
 8005f38:	4b4d      	ldr	r3, [pc, #308]	; (8006070 <__ieee754_pow+0x230>)
 8005f3a:	429c      	cmp	r4, r3
 8005f3c:	dd0d      	ble.n	8005f5a <__ieee754_pow+0x11a>
 8005f3e:	2f00      	cmp	r7, #0
 8005f40:	f280 8464 	bge.w	800680c <__ieee754_pow+0x9cc>
 8005f44:	2000      	movs	r0, #0
 8005f46:	2100      	movs	r1, #0
 8005f48:	ec41 0b10 	vmov	d0, r0, r1
 8005f4c:	b00d      	add	sp, #52	; 0x34
 8005f4e:	ecbd 8b06 	vpop	{d8-d10}
 8005f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f56:	2102      	movs	r1, #2
 8005f58:	e7e0      	b.n	8005f1c <__ieee754_pow+0xdc>
 8005f5a:	2f00      	cmp	r7, #0
 8005f5c:	daf2      	bge.n	8005f44 <__ieee754_pow+0x104>
 8005f5e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005f62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005f66:	e7ef      	b.n	8005f48 <__ieee754_pow+0x108>
 8005f68:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005f6c:	d104      	bne.n	8005f78 <__ieee754_pow+0x138>
 8005f6e:	4610      	mov	r0, r2
 8005f70:	4619      	mov	r1, r3
 8005f72:	f7fa fb41 	bl	80005f8 <__aeabi_dmul>
 8005f76:	e7e7      	b.n	8005f48 <__ieee754_pow+0x108>
 8005f78:	493e      	ldr	r1, [pc, #248]	; (8006074 <__ieee754_pow+0x234>)
 8005f7a:	428f      	cmp	r7, r1
 8005f7c:	d10d      	bne.n	8005f9a <__ieee754_pow+0x15a>
 8005f7e:	f1b9 0f00 	cmp.w	r9, #0
 8005f82:	db0a      	blt.n	8005f9a <__ieee754_pow+0x15a>
 8005f84:	ec43 2b10 	vmov	d0, r2, r3
 8005f88:	b00d      	add	sp, #52	; 0x34
 8005f8a:	ecbd 8b06 	vpop	{d8-d10}
 8005f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f92:	f000 bc77 	b.w	8006884 <__ieee754_sqrt>
 8005f96:	2100      	movs	r1, #0
 8005f98:	9100      	str	r1, [sp, #0]
 8005f9a:	ec43 2b10 	vmov	d0, r2, r3
 8005f9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fa2:	f000 fec5 	bl	8006d30 <fabs>
 8005fa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005faa:	ec51 0b10 	vmov	r0, r1, d0
 8005fae:	f1b8 0f00 	cmp.w	r8, #0
 8005fb2:	d12a      	bne.n	800600a <__ieee754_pow+0x1ca>
 8005fb4:	b12c      	cbz	r4, 8005fc2 <__ieee754_pow+0x182>
 8005fb6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800606c <__ieee754_pow+0x22c>
 8005fba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8005fbe:	45e6      	cmp	lr, ip
 8005fc0:	d123      	bne.n	800600a <__ieee754_pow+0x1ca>
 8005fc2:	2f00      	cmp	r7, #0
 8005fc4:	da05      	bge.n	8005fd2 <__ieee754_pow+0x192>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	2000      	movs	r0, #0
 8005fcc:	4927      	ldr	r1, [pc, #156]	; (800606c <__ieee754_pow+0x22c>)
 8005fce:	f7fa fc3d 	bl	800084c <__aeabi_ddiv>
 8005fd2:	f1b9 0f00 	cmp.w	r9, #0
 8005fd6:	dab7      	bge.n	8005f48 <__ieee754_pow+0x108>
 8005fd8:	9b00      	ldr	r3, [sp, #0]
 8005fda:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005fde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005fe2:	4323      	orrs	r3, r4
 8005fe4:	d108      	bne.n	8005ff8 <__ieee754_pow+0x1b8>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4610      	mov	r0, r2
 8005fec:	4619      	mov	r1, r3
 8005fee:	f7fa f94b 	bl	8000288 <__aeabi_dsub>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	e78d      	b.n	8005f14 <__ieee754_pow+0xd4>
 8005ff8:	9b00      	ldr	r3, [sp, #0]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d1a4      	bne.n	8005f48 <__ieee754_pow+0x108>
 8005ffe:	4602      	mov	r2, r0
 8006000:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006004:	4610      	mov	r0, r2
 8006006:	4619      	mov	r1, r3
 8006008:	e79e      	b.n	8005f48 <__ieee754_pow+0x108>
 800600a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800600e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8006012:	950a      	str	r5, [sp, #40]	; 0x28
 8006014:	9d00      	ldr	r5, [sp, #0]
 8006016:	46ac      	mov	ip, r5
 8006018:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800601a:	ea5c 0505 	orrs.w	r5, ip, r5
 800601e:	d0e4      	beq.n	8005fea <__ieee754_pow+0x1aa>
 8006020:	4b15      	ldr	r3, [pc, #84]	; (8006078 <__ieee754_pow+0x238>)
 8006022:	429e      	cmp	r6, r3
 8006024:	f340 80fc 	ble.w	8006220 <__ieee754_pow+0x3e0>
 8006028:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800602c:	429e      	cmp	r6, r3
 800602e:	4b10      	ldr	r3, [pc, #64]	; (8006070 <__ieee754_pow+0x230>)
 8006030:	dd07      	ble.n	8006042 <__ieee754_pow+0x202>
 8006032:	429c      	cmp	r4, r3
 8006034:	dc0a      	bgt.n	800604c <__ieee754_pow+0x20c>
 8006036:	2f00      	cmp	r7, #0
 8006038:	da84      	bge.n	8005f44 <__ieee754_pow+0x104>
 800603a:	a307      	add	r3, pc, #28	; (adr r3, 8006058 <__ieee754_pow+0x218>)
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	e795      	b.n	8005f6e <__ieee754_pow+0x12e>
 8006042:	429c      	cmp	r4, r3
 8006044:	dbf7      	blt.n	8006036 <__ieee754_pow+0x1f6>
 8006046:	4b09      	ldr	r3, [pc, #36]	; (800606c <__ieee754_pow+0x22c>)
 8006048:	429c      	cmp	r4, r3
 800604a:	dd17      	ble.n	800607c <__ieee754_pow+0x23c>
 800604c:	2f00      	cmp	r7, #0
 800604e:	dcf4      	bgt.n	800603a <__ieee754_pow+0x1fa>
 8006050:	e778      	b.n	8005f44 <__ieee754_pow+0x104>
 8006052:	bf00      	nop
 8006054:	f3af 8000 	nop.w
 8006058:	8800759c 	.word	0x8800759c
 800605c:	7e37e43c 	.word	0x7e37e43c
 8006060:	7ff00000 	.word	0x7ff00000
 8006064:	08007410 	.word	0x08007410
 8006068:	433fffff 	.word	0x433fffff
 800606c:	3ff00000 	.word	0x3ff00000
 8006070:	3fefffff 	.word	0x3fefffff
 8006074:	3fe00000 	.word	0x3fe00000
 8006078:	41e00000 	.word	0x41e00000
 800607c:	4b64      	ldr	r3, [pc, #400]	; (8006210 <__ieee754_pow+0x3d0>)
 800607e:	2200      	movs	r2, #0
 8006080:	f7fa f902 	bl	8000288 <__aeabi_dsub>
 8006084:	a356      	add	r3, pc, #344	; (adr r3, 80061e0 <__ieee754_pow+0x3a0>)
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	4604      	mov	r4, r0
 800608c:	460d      	mov	r5, r1
 800608e:	f7fa fab3 	bl	80005f8 <__aeabi_dmul>
 8006092:	a355      	add	r3, pc, #340	; (adr r3, 80061e8 <__ieee754_pow+0x3a8>)
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	4606      	mov	r6, r0
 800609a:	460f      	mov	r7, r1
 800609c:	4620      	mov	r0, r4
 800609e:	4629      	mov	r1, r5
 80060a0:	f7fa faaa 	bl	80005f8 <__aeabi_dmul>
 80060a4:	4b5b      	ldr	r3, [pc, #364]	; (8006214 <__ieee754_pow+0x3d4>)
 80060a6:	4682      	mov	sl, r0
 80060a8:	468b      	mov	fp, r1
 80060aa:	2200      	movs	r2, #0
 80060ac:	4620      	mov	r0, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	f7fa faa2 	bl	80005f8 <__aeabi_dmul>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	a14d      	add	r1, pc, #308	; (adr r1, 80061f0 <__ieee754_pow+0x3b0>)
 80060ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060be:	f7fa f8e3 	bl	8000288 <__aeabi_dsub>
 80060c2:	4622      	mov	r2, r4
 80060c4:	462b      	mov	r3, r5
 80060c6:	f7fa fa97 	bl	80005f8 <__aeabi_dmul>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	2000      	movs	r0, #0
 80060d0:	4951      	ldr	r1, [pc, #324]	; (8006218 <__ieee754_pow+0x3d8>)
 80060d2:	f7fa f8d9 	bl	8000288 <__aeabi_dsub>
 80060d6:	4622      	mov	r2, r4
 80060d8:	4680      	mov	r8, r0
 80060da:	4689      	mov	r9, r1
 80060dc:	462b      	mov	r3, r5
 80060de:	4620      	mov	r0, r4
 80060e0:	4629      	mov	r1, r5
 80060e2:	f7fa fa89 	bl	80005f8 <__aeabi_dmul>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4640      	mov	r0, r8
 80060ec:	4649      	mov	r1, r9
 80060ee:	f7fa fa83 	bl	80005f8 <__aeabi_dmul>
 80060f2:	a341      	add	r3, pc, #260	; (adr r3, 80061f8 <__ieee754_pow+0x3b8>)
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f7fa fa7e 	bl	80005f8 <__aeabi_dmul>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4650      	mov	r0, sl
 8006102:	4659      	mov	r1, fp
 8006104:	f7fa f8c0 	bl	8000288 <__aeabi_dsub>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4680      	mov	r8, r0
 800610e:	4689      	mov	r9, r1
 8006110:	4630      	mov	r0, r6
 8006112:	4639      	mov	r1, r7
 8006114:	f7fa f8ba 	bl	800028c <__adddf3>
 8006118:	2400      	movs	r4, #0
 800611a:	4632      	mov	r2, r6
 800611c:	463b      	mov	r3, r7
 800611e:	4620      	mov	r0, r4
 8006120:	460d      	mov	r5, r1
 8006122:	f7fa f8b1 	bl	8000288 <__aeabi_dsub>
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4640      	mov	r0, r8
 800612c:	4649      	mov	r1, r9
 800612e:	f7fa f8ab 	bl	8000288 <__aeabi_dsub>
 8006132:	9b00      	ldr	r3, [sp, #0]
 8006134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006136:	3b01      	subs	r3, #1
 8006138:	4313      	orrs	r3, r2
 800613a:	4682      	mov	sl, r0
 800613c:	468b      	mov	fp, r1
 800613e:	f040 81f1 	bne.w	8006524 <__ieee754_pow+0x6e4>
 8006142:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006200 <__ieee754_pow+0x3c0>
 8006146:	eeb0 8a47 	vmov.f32	s16, s14
 800614a:	eef0 8a67 	vmov.f32	s17, s15
 800614e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006152:	2600      	movs	r6, #0
 8006154:	4632      	mov	r2, r6
 8006156:	463b      	mov	r3, r7
 8006158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800615c:	f7fa f894 	bl	8000288 <__aeabi_dsub>
 8006160:	4622      	mov	r2, r4
 8006162:	462b      	mov	r3, r5
 8006164:	f7fa fa48 	bl	80005f8 <__aeabi_dmul>
 8006168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800616c:	4680      	mov	r8, r0
 800616e:	4689      	mov	r9, r1
 8006170:	4650      	mov	r0, sl
 8006172:	4659      	mov	r1, fp
 8006174:	f7fa fa40 	bl	80005f8 <__aeabi_dmul>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4640      	mov	r0, r8
 800617e:	4649      	mov	r1, r9
 8006180:	f7fa f884 	bl	800028c <__adddf3>
 8006184:	4632      	mov	r2, r6
 8006186:	463b      	mov	r3, r7
 8006188:	4680      	mov	r8, r0
 800618a:	4689      	mov	r9, r1
 800618c:	4620      	mov	r0, r4
 800618e:	4629      	mov	r1, r5
 8006190:	f7fa fa32 	bl	80005f8 <__aeabi_dmul>
 8006194:	460b      	mov	r3, r1
 8006196:	4604      	mov	r4, r0
 8006198:	460d      	mov	r5, r1
 800619a:	4602      	mov	r2, r0
 800619c:	4649      	mov	r1, r9
 800619e:	4640      	mov	r0, r8
 80061a0:	f7fa f874 	bl	800028c <__adddf3>
 80061a4:	4b1d      	ldr	r3, [pc, #116]	; (800621c <__ieee754_pow+0x3dc>)
 80061a6:	4299      	cmp	r1, r3
 80061a8:	ec45 4b19 	vmov	d9, r4, r5
 80061ac:	4606      	mov	r6, r0
 80061ae:	460f      	mov	r7, r1
 80061b0:	468b      	mov	fp, r1
 80061b2:	f340 82fe 	ble.w	80067b2 <__ieee754_pow+0x972>
 80061b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80061ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80061be:	4303      	orrs	r3, r0
 80061c0:	f000 81f0 	beq.w	80065a4 <__ieee754_pow+0x764>
 80061c4:	a310      	add	r3, pc, #64	; (adr r3, 8006208 <__ieee754_pow+0x3c8>)
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	ec51 0b18 	vmov	r0, r1, d8
 80061ce:	f7fa fa13 	bl	80005f8 <__aeabi_dmul>
 80061d2:	a30d      	add	r3, pc, #52	; (adr r3, 8006208 <__ieee754_pow+0x3c8>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	e6cb      	b.n	8005f72 <__ieee754_pow+0x132>
 80061da:	bf00      	nop
 80061dc:	f3af 8000 	nop.w
 80061e0:	60000000 	.word	0x60000000
 80061e4:	3ff71547 	.word	0x3ff71547
 80061e8:	f85ddf44 	.word	0xf85ddf44
 80061ec:	3e54ae0b 	.word	0x3e54ae0b
 80061f0:	55555555 	.word	0x55555555
 80061f4:	3fd55555 	.word	0x3fd55555
 80061f8:	652b82fe 	.word	0x652b82fe
 80061fc:	3ff71547 	.word	0x3ff71547
 8006200:	00000000 	.word	0x00000000
 8006204:	bff00000 	.word	0xbff00000
 8006208:	8800759c 	.word	0x8800759c
 800620c:	7e37e43c 	.word	0x7e37e43c
 8006210:	3ff00000 	.word	0x3ff00000
 8006214:	3fd00000 	.word	0x3fd00000
 8006218:	3fe00000 	.word	0x3fe00000
 800621c:	408fffff 	.word	0x408fffff
 8006220:	4bd7      	ldr	r3, [pc, #860]	; (8006580 <__ieee754_pow+0x740>)
 8006222:	ea03 0309 	and.w	r3, r3, r9
 8006226:	2200      	movs	r2, #0
 8006228:	b92b      	cbnz	r3, 8006236 <__ieee754_pow+0x3f6>
 800622a:	4bd6      	ldr	r3, [pc, #856]	; (8006584 <__ieee754_pow+0x744>)
 800622c:	f7fa f9e4 	bl	80005f8 <__aeabi_dmul>
 8006230:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006234:	460c      	mov	r4, r1
 8006236:	1523      	asrs	r3, r4, #20
 8006238:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800623c:	4413      	add	r3, r2
 800623e:	9309      	str	r3, [sp, #36]	; 0x24
 8006240:	4bd1      	ldr	r3, [pc, #836]	; (8006588 <__ieee754_pow+0x748>)
 8006242:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006246:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800624a:	429c      	cmp	r4, r3
 800624c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006250:	dd08      	ble.n	8006264 <__ieee754_pow+0x424>
 8006252:	4bce      	ldr	r3, [pc, #824]	; (800658c <__ieee754_pow+0x74c>)
 8006254:	429c      	cmp	r4, r3
 8006256:	f340 8163 	ble.w	8006520 <__ieee754_pow+0x6e0>
 800625a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800625c:	3301      	adds	r3, #1
 800625e:	9309      	str	r3, [sp, #36]	; 0x24
 8006260:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006264:	2400      	movs	r4, #0
 8006266:	00e3      	lsls	r3, r4, #3
 8006268:	930b      	str	r3, [sp, #44]	; 0x2c
 800626a:	4bc9      	ldr	r3, [pc, #804]	; (8006590 <__ieee754_pow+0x750>)
 800626c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006270:	ed93 7b00 	vldr	d7, [r3]
 8006274:	4629      	mov	r1, r5
 8006276:	ec53 2b17 	vmov	r2, r3, d7
 800627a:	eeb0 8a47 	vmov.f32	s16, s14
 800627e:	eef0 8a67 	vmov.f32	s17, s15
 8006282:	4682      	mov	sl, r0
 8006284:	f7fa f800 	bl	8000288 <__aeabi_dsub>
 8006288:	4652      	mov	r2, sl
 800628a:	4606      	mov	r6, r0
 800628c:	460f      	mov	r7, r1
 800628e:	462b      	mov	r3, r5
 8006290:	ec51 0b18 	vmov	r0, r1, d8
 8006294:	f7f9 fffa 	bl	800028c <__adddf3>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	2000      	movs	r0, #0
 800629e:	49bd      	ldr	r1, [pc, #756]	; (8006594 <__ieee754_pow+0x754>)
 80062a0:	f7fa fad4 	bl	800084c <__aeabi_ddiv>
 80062a4:	ec41 0b19 	vmov	d9, r0, r1
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4630      	mov	r0, r6
 80062ae:	4639      	mov	r1, r7
 80062b0:	f7fa f9a2 	bl	80005f8 <__aeabi_dmul>
 80062b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80062b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062c0:	2300      	movs	r3, #0
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80062c8:	46ab      	mov	fp, r5
 80062ca:	106d      	asrs	r5, r5, #1
 80062cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80062d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80062d4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80062d8:	2200      	movs	r2, #0
 80062da:	4640      	mov	r0, r8
 80062dc:	4649      	mov	r1, r9
 80062de:	4614      	mov	r4, r2
 80062e0:	461d      	mov	r5, r3
 80062e2:	f7fa f989 	bl	80005f8 <__aeabi_dmul>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	4630      	mov	r0, r6
 80062ec:	4639      	mov	r1, r7
 80062ee:	f7f9 ffcb 	bl	8000288 <__aeabi_dsub>
 80062f2:	ec53 2b18 	vmov	r2, r3, d8
 80062f6:	4606      	mov	r6, r0
 80062f8:	460f      	mov	r7, r1
 80062fa:	4620      	mov	r0, r4
 80062fc:	4629      	mov	r1, r5
 80062fe:	f7f9 ffc3 	bl	8000288 <__aeabi_dsub>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4650      	mov	r0, sl
 8006308:	4659      	mov	r1, fp
 800630a:	f7f9 ffbd 	bl	8000288 <__aeabi_dsub>
 800630e:	4642      	mov	r2, r8
 8006310:	464b      	mov	r3, r9
 8006312:	f7fa f971 	bl	80005f8 <__aeabi_dmul>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4630      	mov	r0, r6
 800631c:	4639      	mov	r1, r7
 800631e:	f7f9 ffb3 	bl	8000288 <__aeabi_dsub>
 8006322:	ec53 2b19 	vmov	r2, r3, d9
 8006326:	f7fa f967 	bl	80005f8 <__aeabi_dmul>
 800632a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800632e:	ec41 0b18 	vmov	d8, r0, r1
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	f7fa f95f 	bl	80005f8 <__aeabi_dmul>
 800633a:	a37d      	add	r3, pc, #500	; (adr r3, 8006530 <__ieee754_pow+0x6f0>)
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	4604      	mov	r4, r0
 8006342:	460d      	mov	r5, r1
 8006344:	f7fa f958 	bl	80005f8 <__aeabi_dmul>
 8006348:	a37b      	add	r3, pc, #492	; (adr r3, 8006538 <__ieee754_pow+0x6f8>)
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	f7f9 ff9d 	bl	800028c <__adddf3>
 8006352:	4622      	mov	r2, r4
 8006354:	462b      	mov	r3, r5
 8006356:	f7fa f94f 	bl	80005f8 <__aeabi_dmul>
 800635a:	a379      	add	r3, pc, #484	; (adr r3, 8006540 <__ieee754_pow+0x700>)
 800635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006360:	f7f9 ff94 	bl	800028c <__adddf3>
 8006364:	4622      	mov	r2, r4
 8006366:	462b      	mov	r3, r5
 8006368:	f7fa f946 	bl	80005f8 <__aeabi_dmul>
 800636c:	a376      	add	r3, pc, #472	; (adr r3, 8006548 <__ieee754_pow+0x708>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f7f9 ff8b 	bl	800028c <__adddf3>
 8006376:	4622      	mov	r2, r4
 8006378:	462b      	mov	r3, r5
 800637a:	f7fa f93d 	bl	80005f8 <__aeabi_dmul>
 800637e:	a374      	add	r3, pc, #464	; (adr r3, 8006550 <__ieee754_pow+0x710>)
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f7f9 ff82 	bl	800028c <__adddf3>
 8006388:	4622      	mov	r2, r4
 800638a:	462b      	mov	r3, r5
 800638c:	f7fa f934 	bl	80005f8 <__aeabi_dmul>
 8006390:	a371      	add	r3, pc, #452	; (adr r3, 8006558 <__ieee754_pow+0x718>)
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	f7f9 ff79 	bl	800028c <__adddf3>
 800639a:	4622      	mov	r2, r4
 800639c:	4606      	mov	r6, r0
 800639e:	460f      	mov	r7, r1
 80063a0:	462b      	mov	r3, r5
 80063a2:	4620      	mov	r0, r4
 80063a4:	4629      	mov	r1, r5
 80063a6:	f7fa f927 	bl	80005f8 <__aeabi_dmul>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4630      	mov	r0, r6
 80063b0:	4639      	mov	r1, r7
 80063b2:	f7fa f921 	bl	80005f8 <__aeabi_dmul>
 80063b6:	4642      	mov	r2, r8
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	464b      	mov	r3, r9
 80063be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c2:	f7f9 ff63 	bl	800028c <__adddf3>
 80063c6:	ec53 2b18 	vmov	r2, r3, d8
 80063ca:	f7fa f915 	bl	80005f8 <__aeabi_dmul>
 80063ce:	4622      	mov	r2, r4
 80063d0:	462b      	mov	r3, r5
 80063d2:	f7f9 ff5b 	bl	800028c <__adddf3>
 80063d6:	4642      	mov	r2, r8
 80063d8:	4682      	mov	sl, r0
 80063da:	468b      	mov	fp, r1
 80063dc:	464b      	mov	r3, r9
 80063de:	4640      	mov	r0, r8
 80063e0:	4649      	mov	r1, r9
 80063e2:	f7fa f909 	bl	80005f8 <__aeabi_dmul>
 80063e6:	4b6c      	ldr	r3, [pc, #432]	; (8006598 <__ieee754_pow+0x758>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	4606      	mov	r6, r0
 80063ec:	460f      	mov	r7, r1
 80063ee:	f7f9 ff4d 	bl	800028c <__adddf3>
 80063f2:	4652      	mov	r2, sl
 80063f4:	465b      	mov	r3, fp
 80063f6:	f7f9 ff49 	bl	800028c <__adddf3>
 80063fa:	9c04      	ldr	r4, [sp, #16]
 80063fc:	460d      	mov	r5, r1
 80063fe:	4622      	mov	r2, r4
 8006400:	460b      	mov	r3, r1
 8006402:	4640      	mov	r0, r8
 8006404:	4649      	mov	r1, r9
 8006406:	f7fa f8f7 	bl	80005f8 <__aeabi_dmul>
 800640a:	4b63      	ldr	r3, [pc, #396]	; (8006598 <__ieee754_pow+0x758>)
 800640c:	4680      	mov	r8, r0
 800640e:	4689      	mov	r9, r1
 8006410:	2200      	movs	r2, #0
 8006412:	4620      	mov	r0, r4
 8006414:	4629      	mov	r1, r5
 8006416:	f7f9 ff37 	bl	8000288 <__aeabi_dsub>
 800641a:	4632      	mov	r2, r6
 800641c:	463b      	mov	r3, r7
 800641e:	f7f9 ff33 	bl	8000288 <__aeabi_dsub>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	4650      	mov	r0, sl
 8006428:	4659      	mov	r1, fp
 800642a:	f7f9 ff2d 	bl	8000288 <__aeabi_dsub>
 800642e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006432:	f7fa f8e1 	bl	80005f8 <__aeabi_dmul>
 8006436:	4622      	mov	r2, r4
 8006438:	4606      	mov	r6, r0
 800643a:	460f      	mov	r7, r1
 800643c:	462b      	mov	r3, r5
 800643e:	ec51 0b18 	vmov	r0, r1, d8
 8006442:	f7fa f8d9 	bl	80005f8 <__aeabi_dmul>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	4630      	mov	r0, r6
 800644c:	4639      	mov	r1, r7
 800644e:	f7f9 ff1d 	bl	800028c <__adddf3>
 8006452:	4606      	mov	r6, r0
 8006454:	460f      	mov	r7, r1
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4640      	mov	r0, r8
 800645c:	4649      	mov	r1, r9
 800645e:	f7f9 ff15 	bl	800028c <__adddf3>
 8006462:	9c04      	ldr	r4, [sp, #16]
 8006464:	a33e      	add	r3, pc, #248	; (adr r3, 8006560 <__ieee754_pow+0x720>)
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	4620      	mov	r0, r4
 800646c:	460d      	mov	r5, r1
 800646e:	f7fa f8c3 	bl	80005f8 <__aeabi_dmul>
 8006472:	4642      	mov	r2, r8
 8006474:	ec41 0b18 	vmov	d8, r0, r1
 8006478:	464b      	mov	r3, r9
 800647a:	4620      	mov	r0, r4
 800647c:	4629      	mov	r1, r5
 800647e:	f7f9 ff03 	bl	8000288 <__aeabi_dsub>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4630      	mov	r0, r6
 8006488:	4639      	mov	r1, r7
 800648a:	f7f9 fefd 	bl	8000288 <__aeabi_dsub>
 800648e:	a336      	add	r3, pc, #216	; (adr r3, 8006568 <__ieee754_pow+0x728>)
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f7fa f8b0 	bl	80005f8 <__aeabi_dmul>
 8006498:	a335      	add	r3, pc, #212	; (adr r3, 8006570 <__ieee754_pow+0x730>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	4606      	mov	r6, r0
 80064a0:	460f      	mov	r7, r1
 80064a2:	4620      	mov	r0, r4
 80064a4:	4629      	mov	r1, r5
 80064a6:	f7fa f8a7 	bl	80005f8 <__aeabi_dmul>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4630      	mov	r0, r6
 80064b0:	4639      	mov	r1, r7
 80064b2:	f7f9 feeb 	bl	800028c <__adddf3>
 80064b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064b8:	4b38      	ldr	r3, [pc, #224]	; (800659c <__ieee754_pow+0x75c>)
 80064ba:	4413      	add	r3, r2
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f7f9 fee4 	bl	800028c <__adddf3>
 80064c4:	4682      	mov	sl, r0
 80064c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064c8:	468b      	mov	fp, r1
 80064ca:	f7fa f82b 	bl	8000524 <__aeabi_i2d>
 80064ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064d0:	4b33      	ldr	r3, [pc, #204]	; (80065a0 <__ieee754_pow+0x760>)
 80064d2:	4413      	add	r3, r2
 80064d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064d8:	4606      	mov	r6, r0
 80064da:	460f      	mov	r7, r1
 80064dc:	4652      	mov	r2, sl
 80064de:	465b      	mov	r3, fp
 80064e0:	ec51 0b18 	vmov	r0, r1, d8
 80064e4:	f7f9 fed2 	bl	800028c <__adddf3>
 80064e8:	4642      	mov	r2, r8
 80064ea:	464b      	mov	r3, r9
 80064ec:	f7f9 fece 	bl	800028c <__adddf3>
 80064f0:	4632      	mov	r2, r6
 80064f2:	463b      	mov	r3, r7
 80064f4:	f7f9 feca 	bl	800028c <__adddf3>
 80064f8:	9c04      	ldr	r4, [sp, #16]
 80064fa:	4632      	mov	r2, r6
 80064fc:	463b      	mov	r3, r7
 80064fe:	4620      	mov	r0, r4
 8006500:	460d      	mov	r5, r1
 8006502:	f7f9 fec1 	bl	8000288 <__aeabi_dsub>
 8006506:	4642      	mov	r2, r8
 8006508:	464b      	mov	r3, r9
 800650a:	f7f9 febd 	bl	8000288 <__aeabi_dsub>
 800650e:	ec53 2b18 	vmov	r2, r3, d8
 8006512:	f7f9 feb9 	bl	8000288 <__aeabi_dsub>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4650      	mov	r0, sl
 800651c:	4659      	mov	r1, fp
 800651e:	e606      	b.n	800612e <__ieee754_pow+0x2ee>
 8006520:	2401      	movs	r4, #1
 8006522:	e6a0      	b.n	8006266 <__ieee754_pow+0x426>
 8006524:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006578 <__ieee754_pow+0x738>
 8006528:	e60d      	b.n	8006146 <__ieee754_pow+0x306>
 800652a:	bf00      	nop
 800652c:	f3af 8000 	nop.w
 8006530:	4a454eef 	.word	0x4a454eef
 8006534:	3fca7e28 	.word	0x3fca7e28
 8006538:	93c9db65 	.word	0x93c9db65
 800653c:	3fcd864a 	.word	0x3fcd864a
 8006540:	a91d4101 	.word	0xa91d4101
 8006544:	3fd17460 	.word	0x3fd17460
 8006548:	518f264d 	.word	0x518f264d
 800654c:	3fd55555 	.word	0x3fd55555
 8006550:	db6fabff 	.word	0xdb6fabff
 8006554:	3fdb6db6 	.word	0x3fdb6db6
 8006558:	33333303 	.word	0x33333303
 800655c:	3fe33333 	.word	0x3fe33333
 8006560:	e0000000 	.word	0xe0000000
 8006564:	3feec709 	.word	0x3feec709
 8006568:	dc3a03fd 	.word	0xdc3a03fd
 800656c:	3feec709 	.word	0x3feec709
 8006570:	145b01f5 	.word	0x145b01f5
 8006574:	be3e2fe0 	.word	0xbe3e2fe0
 8006578:	00000000 	.word	0x00000000
 800657c:	3ff00000 	.word	0x3ff00000
 8006580:	7ff00000 	.word	0x7ff00000
 8006584:	43400000 	.word	0x43400000
 8006588:	0003988e 	.word	0x0003988e
 800658c:	000bb679 	.word	0x000bb679
 8006590:	08007550 	.word	0x08007550
 8006594:	3ff00000 	.word	0x3ff00000
 8006598:	40080000 	.word	0x40080000
 800659c:	08007570 	.word	0x08007570
 80065a0:	08007560 	.word	0x08007560
 80065a4:	a3b5      	add	r3, pc, #724	; (adr r3, 800687c <__ieee754_pow+0xa3c>)
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	4640      	mov	r0, r8
 80065ac:	4649      	mov	r1, r9
 80065ae:	f7f9 fe6d 	bl	800028c <__adddf3>
 80065b2:	4622      	mov	r2, r4
 80065b4:	ec41 0b1a 	vmov	d10, r0, r1
 80065b8:	462b      	mov	r3, r5
 80065ba:	4630      	mov	r0, r6
 80065bc:	4639      	mov	r1, r7
 80065be:	f7f9 fe63 	bl	8000288 <__aeabi_dsub>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	ec51 0b1a 	vmov	r0, r1, d10
 80065ca:	f7fa faa5 	bl	8000b18 <__aeabi_dcmpgt>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f47f adf8 	bne.w	80061c4 <__ieee754_pow+0x384>
 80065d4:	4aa4      	ldr	r2, [pc, #656]	; (8006868 <__ieee754_pow+0xa28>)
 80065d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065da:	4293      	cmp	r3, r2
 80065dc:	f340 810b 	ble.w	80067f6 <__ieee754_pow+0x9b6>
 80065e0:	151b      	asrs	r3, r3, #20
 80065e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80065e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80065ea:	fa4a f303 	asr.w	r3, sl, r3
 80065ee:	445b      	add	r3, fp
 80065f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80065f4:	4e9d      	ldr	r6, [pc, #628]	; (800686c <__ieee754_pow+0xa2c>)
 80065f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80065fa:	4116      	asrs	r6, r2
 80065fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006600:	2000      	movs	r0, #0
 8006602:	ea23 0106 	bic.w	r1, r3, r6
 8006606:	f1c2 0214 	rsb	r2, r2, #20
 800660a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800660e:	fa4a fa02 	asr.w	sl, sl, r2
 8006612:	f1bb 0f00 	cmp.w	fp, #0
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4620      	mov	r0, r4
 800661c:	4629      	mov	r1, r5
 800661e:	bfb8      	it	lt
 8006620:	f1ca 0a00 	rsblt	sl, sl, #0
 8006624:	f7f9 fe30 	bl	8000288 <__aeabi_dsub>
 8006628:	ec41 0b19 	vmov	d9, r0, r1
 800662c:	4642      	mov	r2, r8
 800662e:	464b      	mov	r3, r9
 8006630:	ec51 0b19 	vmov	r0, r1, d9
 8006634:	f7f9 fe2a 	bl	800028c <__adddf3>
 8006638:	2400      	movs	r4, #0
 800663a:	a379      	add	r3, pc, #484	; (adr r3, 8006820 <__ieee754_pow+0x9e0>)
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	4620      	mov	r0, r4
 8006642:	460d      	mov	r5, r1
 8006644:	f7f9 ffd8 	bl	80005f8 <__aeabi_dmul>
 8006648:	ec53 2b19 	vmov	r2, r3, d9
 800664c:	4606      	mov	r6, r0
 800664e:	460f      	mov	r7, r1
 8006650:	4620      	mov	r0, r4
 8006652:	4629      	mov	r1, r5
 8006654:	f7f9 fe18 	bl	8000288 <__aeabi_dsub>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4640      	mov	r0, r8
 800665e:	4649      	mov	r1, r9
 8006660:	f7f9 fe12 	bl	8000288 <__aeabi_dsub>
 8006664:	a370      	add	r3, pc, #448	; (adr r3, 8006828 <__ieee754_pow+0x9e8>)
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	f7f9 ffc5 	bl	80005f8 <__aeabi_dmul>
 800666e:	a370      	add	r3, pc, #448	; (adr r3, 8006830 <__ieee754_pow+0x9f0>)
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	4680      	mov	r8, r0
 8006676:	4689      	mov	r9, r1
 8006678:	4620      	mov	r0, r4
 800667a:	4629      	mov	r1, r5
 800667c:	f7f9 ffbc 	bl	80005f8 <__aeabi_dmul>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4640      	mov	r0, r8
 8006686:	4649      	mov	r1, r9
 8006688:	f7f9 fe00 	bl	800028c <__adddf3>
 800668c:	4604      	mov	r4, r0
 800668e:	460d      	mov	r5, r1
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4630      	mov	r0, r6
 8006696:	4639      	mov	r1, r7
 8006698:	f7f9 fdf8 	bl	800028c <__adddf3>
 800669c:	4632      	mov	r2, r6
 800669e:	463b      	mov	r3, r7
 80066a0:	4680      	mov	r8, r0
 80066a2:	4689      	mov	r9, r1
 80066a4:	f7f9 fdf0 	bl	8000288 <__aeabi_dsub>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4620      	mov	r0, r4
 80066ae:	4629      	mov	r1, r5
 80066b0:	f7f9 fdea 	bl	8000288 <__aeabi_dsub>
 80066b4:	4642      	mov	r2, r8
 80066b6:	4606      	mov	r6, r0
 80066b8:	460f      	mov	r7, r1
 80066ba:	464b      	mov	r3, r9
 80066bc:	4640      	mov	r0, r8
 80066be:	4649      	mov	r1, r9
 80066c0:	f7f9 ff9a 	bl	80005f8 <__aeabi_dmul>
 80066c4:	a35c      	add	r3, pc, #368	; (adr r3, 8006838 <__ieee754_pow+0x9f8>)
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	4604      	mov	r4, r0
 80066cc:	460d      	mov	r5, r1
 80066ce:	f7f9 ff93 	bl	80005f8 <__aeabi_dmul>
 80066d2:	a35b      	add	r3, pc, #364	; (adr r3, 8006840 <__ieee754_pow+0xa00>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f7f9 fdd6 	bl	8000288 <__aeabi_dsub>
 80066dc:	4622      	mov	r2, r4
 80066de:	462b      	mov	r3, r5
 80066e0:	f7f9 ff8a 	bl	80005f8 <__aeabi_dmul>
 80066e4:	a358      	add	r3, pc, #352	; (adr r3, 8006848 <__ieee754_pow+0xa08>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f7f9 fdcf 	bl	800028c <__adddf3>
 80066ee:	4622      	mov	r2, r4
 80066f0:	462b      	mov	r3, r5
 80066f2:	f7f9 ff81 	bl	80005f8 <__aeabi_dmul>
 80066f6:	a356      	add	r3, pc, #344	; (adr r3, 8006850 <__ieee754_pow+0xa10>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	f7f9 fdc4 	bl	8000288 <__aeabi_dsub>
 8006700:	4622      	mov	r2, r4
 8006702:	462b      	mov	r3, r5
 8006704:	f7f9 ff78 	bl	80005f8 <__aeabi_dmul>
 8006708:	a353      	add	r3, pc, #332	; (adr r3, 8006858 <__ieee754_pow+0xa18>)
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f7f9 fdbd 	bl	800028c <__adddf3>
 8006712:	4622      	mov	r2, r4
 8006714:	462b      	mov	r3, r5
 8006716:	f7f9 ff6f 	bl	80005f8 <__aeabi_dmul>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7f9 fdb1 	bl	8000288 <__aeabi_dsub>
 8006726:	4604      	mov	r4, r0
 8006728:	460d      	mov	r5, r1
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4640      	mov	r0, r8
 8006730:	4649      	mov	r1, r9
 8006732:	f7f9 ff61 	bl	80005f8 <__aeabi_dmul>
 8006736:	2200      	movs	r2, #0
 8006738:	ec41 0b19 	vmov	d9, r0, r1
 800673c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006740:	4620      	mov	r0, r4
 8006742:	4629      	mov	r1, r5
 8006744:	f7f9 fda0 	bl	8000288 <__aeabi_dsub>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	ec51 0b19 	vmov	r0, r1, d9
 8006750:	f7fa f87c 	bl	800084c <__aeabi_ddiv>
 8006754:	4632      	mov	r2, r6
 8006756:	4604      	mov	r4, r0
 8006758:	460d      	mov	r5, r1
 800675a:	463b      	mov	r3, r7
 800675c:	4640      	mov	r0, r8
 800675e:	4649      	mov	r1, r9
 8006760:	f7f9 ff4a 	bl	80005f8 <__aeabi_dmul>
 8006764:	4632      	mov	r2, r6
 8006766:	463b      	mov	r3, r7
 8006768:	f7f9 fd90 	bl	800028c <__adddf3>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4620      	mov	r0, r4
 8006772:	4629      	mov	r1, r5
 8006774:	f7f9 fd88 	bl	8000288 <__aeabi_dsub>
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	f7f9 fd84 	bl	8000288 <__aeabi_dsub>
 8006780:	460b      	mov	r3, r1
 8006782:	4602      	mov	r2, r0
 8006784:	493a      	ldr	r1, [pc, #232]	; (8006870 <__ieee754_pow+0xa30>)
 8006786:	2000      	movs	r0, #0
 8006788:	f7f9 fd7e 	bl	8000288 <__aeabi_dsub>
 800678c:	e9cd 0100 	strd	r0, r1, [sp]
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800679a:	da2f      	bge.n	80067fc <__ieee754_pow+0x9bc>
 800679c:	4650      	mov	r0, sl
 800679e:	ed9d 0b00 	vldr	d0, [sp]
 80067a2:	f000 fb6d 	bl	8006e80 <scalbn>
 80067a6:	ec51 0b10 	vmov	r0, r1, d0
 80067aa:	ec53 2b18 	vmov	r2, r3, d8
 80067ae:	f7ff bbe0 	b.w	8005f72 <__ieee754_pow+0x132>
 80067b2:	4b30      	ldr	r3, [pc, #192]	; (8006874 <__ieee754_pow+0xa34>)
 80067b4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80067b8:	429e      	cmp	r6, r3
 80067ba:	f77f af0b 	ble.w	80065d4 <__ieee754_pow+0x794>
 80067be:	4b2e      	ldr	r3, [pc, #184]	; (8006878 <__ieee754_pow+0xa38>)
 80067c0:	440b      	add	r3, r1
 80067c2:	4303      	orrs	r3, r0
 80067c4:	d00b      	beq.n	80067de <__ieee754_pow+0x99e>
 80067c6:	a326      	add	r3, pc, #152	; (adr r3, 8006860 <__ieee754_pow+0xa20>)
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	ec51 0b18 	vmov	r0, r1, d8
 80067d0:	f7f9 ff12 	bl	80005f8 <__aeabi_dmul>
 80067d4:	a322      	add	r3, pc, #136	; (adr r3, 8006860 <__ieee754_pow+0xa20>)
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f7ff bbca 	b.w	8005f72 <__ieee754_pow+0x132>
 80067de:	4622      	mov	r2, r4
 80067e0:	462b      	mov	r3, r5
 80067e2:	f7f9 fd51 	bl	8000288 <__aeabi_dsub>
 80067e6:	4642      	mov	r2, r8
 80067e8:	464b      	mov	r3, r9
 80067ea:	f7fa f98b 	bl	8000b04 <__aeabi_dcmpge>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	f43f aef0 	beq.w	80065d4 <__ieee754_pow+0x794>
 80067f4:	e7e7      	b.n	80067c6 <__ieee754_pow+0x986>
 80067f6:	f04f 0a00 	mov.w	sl, #0
 80067fa:	e717      	b.n	800662c <__ieee754_pow+0x7ec>
 80067fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006800:	4619      	mov	r1, r3
 8006802:	e7d2      	b.n	80067aa <__ieee754_pow+0x96a>
 8006804:	491a      	ldr	r1, [pc, #104]	; (8006870 <__ieee754_pow+0xa30>)
 8006806:	2000      	movs	r0, #0
 8006808:	f7ff bb9e 	b.w	8005f48 <__ieee754_pow+0x108>
 800680c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006810:	f7ff bb9a 	b.w	8005f48 <__ieee754_pow+0x108>
 8006814:	9000      	str	r0, [sp, #0]
 8006816:	f7ff bb76 	b.w	8005f06 <__ieee754_pow+0xc6>
 800681a:	2100      	movs	r1, #0
 800681c:	f7ff bb60 	b.w	8005ee0 <__ieee754_pow+0xa0>
 8006820:	00000000 	.word	0x00000000
 8006824:	3fe62e43 	.word	0x3fe62e43
 8006828:	fefa39ef 	.word	0xfefa39ef
 800682c:	3fe62e42 	.word	0x3fe62e42
 8006830:	0ca86c39 	.word	0x0ca86c39
 8006834:	be205c61 	.word	0xbe205c61
 8006838:	72bea4d0 	.word	0x72bea4d0
 800683c:	3e663769 	.word	0x3e663769
 8006840:	c5d26bf1 	.word	0xc5d26bf1
 8006844:	3ebbbd41 	.word	0x3ebbbd41
 8006848:	af25de2c 	.word	0xaf25de2c
 800684c:	3f11566a 	.word	0x3f11566a
 8006850:	16bebd93 	.word	0x16bebd93
 8006854:	3f66c16c 	.word	0x3f66c16c
 8006858:	5555553e 	.word	0x5555553e
 800685c:	3fc55555 	.word	0x3fc55555
 8006860:	c2f8f359 	.word	0xc2f8f359
 8006864:	01a56e1f 	.word	0x01a56e1f
 8006868:	3fe00000 	.word	0x3fe00000
 800686c:	000fffff 	.word	0x000fffff
 8006870:	3ff00000 	.word	0x3ff00000
 8006874:	4090cbff 	.word	0x4090cbff
 8006878:	3f6f3400 	.word	0x3f6f3400
 800687c:	652b82fe 	.word	0x652b82fe
 8006880:	3c971547 	.word	0x3c971547

08006884 <__ieee754_sqrt>:
 8006884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006888:	ec55 4b10 	vmov	r4, r5, d0
 800688c:	4e56      	ldr	r6, [pc, #344]	; (80069e8 <__ieee754_sqrt+0x164>)
 800688e:	43ae      	bics	r6, r5
 8006890:	ee10 0a10 	vmov	r0, s0
 8006894:	ee10 3a10 	vmov	r3, s0
 8006898:	4629      	mov	r1, r5
 800689a:	462a      	mov	r2, r5
 800689c:	d110      	bne.n	80068c0 <__ieee754_sqrt+0x3c>
 800689e:	ee10 2a10 	vmov	r2, s0
 80068a2:	462b      	mov	r3, r5
 80068a4:	f7f9 fea8 	bl	80005f8 <__aeabi_dmul>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4620      	mov	r0, r4
 80068ae:	4629      	mov	r1, r5
 80068b0:	f7f9 fcec 	bl	800028c <__adddf3>
 80068b4:	4604      	mov	r4, r0
 80068b6:	460d      	mov	r5, r1
 80068b8:	ec45 4b10 	vmov	d0, r4, r5
 80068bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c0:	2d00      	cmp	r5, #0
 80068c2:	dc10      	bgt.n	80068e6 <__ieee754_sqrt+0x62>
 80068c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80068c8:	4330      	orrs	r0, r6
 80068ca:	d0f5      	beq.n	80068b8 <__ieee754_sqrt+0x34>
 80068cc:	b15d      	cbz	r5, 80068e6 <__ieee754_sqrt+0x62>
 80068ce:	ee10 2a10 	vmov	r2, s0
 80068d2:	462b      	mov	r3, r5
 80068d4:	ee10 0a10 	vmov	r0, s0
 80068d8:	f7f9 fcd6 	bl	8000288 <__aeabi_dsub>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	f7f9 ffb4 	bl	800084c <__aeabi_ddiv>
 80068e4:	e7e6      	b.n	80068b4 <__ieee754_sqrt+0x30>
 80068e6:	1509      	asrs	r1, r1, #20
 80068e8:	d076      	beq.n	80069d8 <__ieee754_sqrt+0x154>
 80068ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80068ee:	07ce      	lsls	r6, r1, #31
 80068f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80068f4:	bf5e      	ittt	pl
 80068f6:	0fda      	lsrpl	r2, r3, #31
 80068f8:	005b      	lslpl	r3, r3, #1
 80068fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80068fe:	0fda      	lsrs	r2, r3, #31
 8006900:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006904:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006908:	2000      	movs	r0, #0
 800690a:	106d      	asrs	r5, r5, #1
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	f04f 0e16 	mov.w	lr, #22
 8006912:	4684      	mov	ip, r0
 8006914:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006918:	eb0c 0401 	add.w	r4, ip, r1
 800691c:	4294      	cmp	r4, r2
 800691e:	bfde      	ittt	le
 8006920:	1b12      	suble	r2, r2, r4
 8006922:	eb04 0c01 	addle.w	ip, r4, r1
 8006926:	1840      	addle	r0, r0, r1
 8006928:	0052      	lsls	r2, r2, #1
 800692a:	f1be 0e01 	subs.w	lr, lr, #1
 800692e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006932:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006936:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800693a:	d1ed      	bne.n	8006918 <__ieee754_sqrt+0x94>
 800693c:	4671      	mov	r1, lr
 800693e:	2720      	movs	r7, #32
 8006940:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006944:	4562      	cmp	r2, ip
 8006946:	eb04 060e 	add.w	r6, r4, lr
 800694a:	dc02      	bgt.n	8006952 <__ieee754_sqrt+0xce>
 800694c:	d113      	bne.n	8006976 <__ieee754_sqrt+0xf2>
 800694e:	429e      	cmp	r6, r3
 8006950:	d811      	bhi.n	8006976 <__ieee754_sqrt+0xf2>
 8006952:	2e00      	cmp	r6, #0
 8006954:	eb06 0e04 	add.w	lr, r6, r4
 8006958:	da43      	bge.n	80069e2 <__ieee754_sqrt+0x15e>
 800695a:	f1be 0f00 	cmp.w	lr, #0
 800695e:	db40      	blt.n	80069e2 <__ieee754_sqrt+0x15e>
 8006960:	f10c 0801 	add.w	r8, ip, #1
 8006964:	eba2 020c 	sub.w	r2, r2, ip
 8006968:	429e      	cmp	r6, r3
 800696a:	bf88      	it	hi
 800696c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006970:	1b9b      	subs	r3, r3, r6
 8006972:	4421      	add	r1, r4
 8006974:	46c4      	mov	ip, r8
 8006976:	0052      	lsls	r2, r2, #1
 8006978:	3f01      	subs	r7, #1
 800697a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800697e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006982:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006986:	d1dd      	bne.n	8006944 <__ieee754_sqrt+0xc0>
 8006988:	4313      	orrs	r3, r2
 800698a:	d006      	beq.n	800699a <__ieee754_sqrt+0x116>
 800698c:	1c4c      	adds	r4, r1, #1
 800698e:	bf13      	iteet	ne
 8006990:	3101      	addne	r1, #1
 8006992:	3001      	addeq	r0, #1
 8006994:	4639      	moveq	r1, r7
 8006996:	f021 0101 	bicne.w	r1, r1, #1
 800699a:	1043      	asrs	r3, r0, #1
 800699c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80069a0:	0849      	lsrs	r1, r1, #1
 80069a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80069a6:	07c2      	lsls	r2, r0, #31
 80069a8:	bf48      	it	mi
 80069aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80069ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80069b2:	460c      	mov	r4, r1
 80069b4:	463d      	mov	r5, r7
 80069b6:	e77f      	b.n	80068b8 <__ieee754_sqrt+0x34>
 80069b8:	0ada      	lsrs	r2, r3, #11
 80069ba:	3815      	subs	r0, #21
 80069bc:	055b      	lsls	r3, r3, #21
 80069be:	2a00      	cmp	r2, #0
 80069c0:	d0fa      	beq.n	80069b8 <__ieee754_sqrt+0x134>
 80069c2:	02d7      	lsls	r7, r2, #11
 80069c4:	d50a      	bpl.n	80069dc <__ieee754_sqrt+0x158>
 80069c6:	f1c1 0420 	rsb	r4, r1, #32
 80069ca:	fa23 f404 	lsr.w	r4, r3, r4
 80069ce:	1e4d      	subs	r5, r1, #1
 80069d0:	408b      	lsls	r3, r1
 80069d2:	4322      	orrs	r2, r4
 80069d4:	1b41      	subs	r1, r0, r5
 80069d6:	e788      	b.n	80068ea <__ieee754_sqrt+0x66>
 80069d8:	4608      	mov	r0, r1
 80069da:	e7f0      	b.n	80069be <__ieee754_sqrt+0x13a>
 80069dc:	0052      	lsls	r2, r2, #1
 80069de:	3101      	adds	r1, #1
 80069e0:	e7ef      	b.n	80069c2 <__ieee754_sqrt+0x13e>
 80069e2:	46e0      	mov	r8, ip
 80069e4:	e7be      	b.n	8006964 <__ieee754_sqrt+0xe0>
 80069e6:	bf00      	nop
 80069e8:	7ff00000 	.word	0x7ff00000
 80069ec:	00000000 	.word	0x00000000

080069f0 <atan>:
 80069f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	ec55 4b10 	vmov	r4, r5, d0
 80069f8:	4bc3      	ldr	r3, [pc, #780]	; (8006d08 <atan+0x318>)
 80069fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80069fe:	429e      	cmp	r6, r3
 8006a00:	46ab      	mov	fp, r5
 8006a02:	dd18      	ble.n	8006a36 <atan+0x46>
 8006a04:	4bc1      	ldr	r3, [pc, #772]	; (8006d0c <atan+0x31c>)
 8006a06:	429e      	cmp	r6, r3
 8006a08:	dc01      	bgt.n	8006a0e <atan+0x1e>
 8006a0a:	d109      	bne.n	8006a20 <atan+0x30>
 8006a0c:	b144      	cbz	r4, 8006a20 <atan+0x30>
 8006a0e:	4622      	mov	r2, r4
 8006a10:	462b      	mov	r3, r5
 8006a12:	4620      	mov	r0, r4
 8006a14:	4629      	mov	r1, r5
 8006a16:	f7f9 fc39 	bl	800028c <__adddf3>
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	460d      	mov	r5, r1
 8006a1e:	e006      	b.n	8006a2e <atan+0x3e>
 8006a20:	f1bb 0f00 	cmp.w	fp, #0
 8006a24:	f300 8131 	bgt.w	8006c8a <atan+0x29a>
 8006a28:	a59b      	add	r5, pc, #620	; (adr r5, 8006c98 <atan+0x2a8>)
 8006a2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a2e:	ec45 4b10 	vmov	d0, r4, r5
 8006a32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a36:	4bb6      	ldr	r3, [pc, #728]	; (8006d10 <atan+0x320>)
 8006a38:	429e      	cmp	r6, r3
 8006a3a:	dc14      	bgt.n	8006a66 <atan+0x76>
 8006a3c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006a40:	429e      	cmp	r6, r3
 8006a42:	dc0d      	bgt.n	8006a60 <atan+0x70>
 8006a44:	a396      	add	r3, pc, #600	; (adr r3, 8006ca0 <atan+0x2b0>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	ee10 0a10 	vmov	r0, s0
 8006a4e:	4629      	mov	r1, r5
 8006a50:	f7f9 fc1c 	bl	800028c <__adddf3>
 8006a54:	4baf      	ldr	r3, [pc, #700]	; (8006d14 <atan+0x324>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	f7fa f85e 	bl	8000b18 <__aeabi_dcmpgt>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d1e6      	bne.n	8006a2e <atan+0x3e>
 8006a60:	f04f 3aff 	mov.w	sl, #4294967295
 8006a64:	e02b      	b.n	8006abe <atan+0xce>
 8006a66:	f000 f963 	bl	8006d30 <fabs>
 8006a6a:	4bab      	ldr	r3, [pc, #684]	; (8006d18 <atan+0x328>)
 8006a6c:	429e      	cmp	r6, r3
 8006a6e:	ec55 4b10 	vmov	r4, r5, d0
 8006a72:	f300 80bf 	bgt.w	8006bf4 <atan+0x204>
 8006a76:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006a7a:	429e      	cmp	r6, r3
 8006a7c:	f300 80a0 	bgt.w	8006bc0 <atan+0x1d0>
 8006a80:	ee10 2a10 	vmov	r2, s0
 8006a84:	ee10 0a10 	vmov	r0, s0
 8006a88:	462b      	mov	r3, r5
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	f7f9 fbfe 	bl	800028c <__adddf3>
 8006a90:	4ba0      	ldr	r3, [pc, #640]	; (8006d14 <atan+0x324>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	f7f9 fbf8 	bl	8000288 <__aeabi_dsub>
 8006a98:	2200      	movs	r2, #0
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	460f      	mov	r7, r1
 8006a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	f7f9 fbf1 	bl	800028c <__adddf3>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	f7f9 fecb 	bl	800084c <__aeabi_ddiv>
 8006ab6:	f04f 0a00 	mov.w	sl, #0
 8006aba:	4604      	mov	r4, r0
 8006abc:	460d      	mov	r5, r1
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	f7f9 fd97 	bl	80005f8 <__aeabi_dmul>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4680      	mov	r8, r0
 8006ad0:	4689      	mov	r9, r1
 8006ad2:	f7f9 fd91 	bl	80005f8 <__aeabi_dmul>
 8006ad6:	a374      	add	r3, pc, #464	; (adr r3, 8006ca8 <atan+0x2b8>)
 8006ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006adc:	4606      	mov	r6, r0
 8006ade:	460f      	mov	r7, r1
 8006ae0:	f7f9 fd8a 	bl	80005f8 <__aeabi_dmul>
 8006ae4:	a372      	add	r3, pc, #456	; (adr r3, 8006cb0 <atan+0x2c0>)
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	f7f9 fbcf 	bl	800028c <__adddf3>
 8006aee:	4632      	mov	r2, r6
 8006af0:	463b      	mov	r3, r7
 8006af2:	f7f9 fd81 	bl	80005f8 <__aeabi_dmul>
 8006af6:	a370      	add	r3, pc, #448	; (adr r3, 8006cb8 <atan+0x2c8>)
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f7f9 fbc6 	bl	800028c <__adddf3>
 8006b00:	4632      	mov	r2, r6
 8006b02:	463b      	mov	r3, r7
 8006b04:	f7f9 fd78 	bl	80005f8 <__aeabi_dmul>
 8006b08:	a36d      	add	r3, pc, #436	; (adr r3, 8006cc0 <atan+0x2d0>)
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f7f9 fbbd 	bl	800028c <__adddf3>
 8006b12:	4632      	mov	r2, r6
 8006b14:	463b      	mov	r3, r7
 8006b16:	f7f9 fd6f 	bl	80005f8 <__aeabi_dmul>
 8006b1a:	a36b      	add	r3, pc, #428	; (adr r3, 8006cc8 <atan+0x2d8>)
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f7f9 fbb4 	bl	800028c <__adddf3>
 8006b24:	4632      	mov	r2, r6
 8006b26:	463b      	mov	r3, r7
 8006b28:	f7f9 fd66 	bl	80005f8 <__aeabi_dmul>
 8006b2c:	a368      	add	r3, pc, #416	; (adr r3, 8006cd0 <atan+0x2e0>)
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	f7f9 fbab 	bl	800028c <__adddf3>
 8006b36:	4642      	mov	r2, r8
 8006b38:	464b      	mov	r3, r9
 8006b3a:	f7f9 fd5d 	bl	80005f8 <__aeabi_dmul>
 8006b3e:	a366      	add	r3, pc, #408	; (adr r3, 8006cd8 <atan+0x2e8>)
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	4680      	mov	r8, r0
 8006b46:	4689      	mov	r9, r1
 8006b48:	4630      	mov	r0, r6
 8006b4a:	4639      	mov	r1, r7
 8006b4c:	f7f9 fd54 	bl	80005f8 <__aeabi_dmul>
 8006b50:	a363      	add	r3, pc, #396	; (adr r3, 8006ce0 <atan+0x2f0>)
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f7f9 fb97 	bl	8000288 <__aeabi_dsub>
 8006b5a:	4632      	mov	r2, r6
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	f7f9 fd4b 	bl	80005f8 <__aeabi_dmul>
 8006b62:	a361      	add	r3, pc, #388	; (adr r3, 8006ce8 <atan+0x2f8>)
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	f7f9 fb8e 	bl	8000288 <__aeabi_dsub>
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	463b      	mov	r3, r7
 8006b70:	f7f9 fd42 	bl	80005f8 <__aeabi_dmul>
 8006b74:	a35e      	add	r3, pc, #376	; (adr r3, 8006cf0 <atan+0x300>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f7f9 fb85 	bl	8000288 <__aeabi_dsub>
 8006b7e:	4632      	mov	r2, r6
 8006b80:	463b      	mov	r3, r7
 8006b82:	f7f9 fd39 	bl	80005f8 <__aeabi_dmul>
 8006b86:	a35c      	add	r3, pc, #368	; (adr r3, 8006cf8 <atan+0x308>)
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f7f9 fb7c 	bl	8000288 <__aeabi_dsub>
 8006b90:	4632      	mov	r2, r6
 8006b92:	463b      	mov	r3, r7
 8006b94:	f7f9 fd30 	bl	80005f8 <__aeabi_dmul>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	f7f9 fb74 	bl	800028c <__adddf3>
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	462b      	mov	r3, r5
 8006ba8:	f7f9 fd26 	bl	80005f8 <__aeabi_dmul>
 8006bac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	d14b      	bne.n	8006c4e <atan+0x25e>
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f7f9 fb65 	bl	8000288 <__aeabi_dsub>
 8006bbe:	e72c      	b.n	8006a1a <atan+0x2a>
 8006bc0:	ee10 0a10 	vmov	r0, s0
 8006bc4:	4b53      	ldr	r3, [pc, #332]	; (8006d14 <atan+0x324>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4629      	mov	r1, r5
 8006bca:	f7f9 fb5d 	bl	8000288 <__aeabi_dsub>
 8006bce:	4b51      	ldr	r3, [pc, #324]	; (8006d14 <atan+0x324>)
 8006bd0:	4606      	mov	r6, r0
 8006bd2:	460f      	mov	r7, r1
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	4629      	mov	r1, r5
 8006bda:	f7f9 fb57 	bl	800028c <__adddf3>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4630      	mov	r0, r6
 8006be4:	4639      	mov	r1, r7
 8006be6:	f7f9 fe31 	bl	800084c <__aeabi_ddiv>
 8006bea:	f04f 0a01 	mov.w	sl, #1
 8006bee:	4604      	mov	r4, r0
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	e764      	b.n	8006abe <atan+0xce>
 8006bf4:	4b49      	ldr	r3, [pc, #292]	; (8006d1c <atan+0x32c>)
 8006bf6:	429e      	cmp	r6, r3
 8006bf8:	da1d      	bge.n	8006c36 <atan+0x246>
 8006bfa:	ee10 0a10 	vmov	r0, s0
 8006bfe:	4b48      	ldr	r3, [pc, #288]	; (8006d20 <atan+0x330>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	4629      	mov	r1, r5
 8006c04:	f7f9 fb40 	bl	8000288 <__aeabi_dsub>
 8006c08:	4b45      	ldr	r3, [pc, #276]	; (8006d20 <atan+0x330>)
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	460f      	mov	r7, r1
 8006c0e:	2200      	movs	r2, #0
 8006c10:	4620      	mov	r0, r4
 8006c12:	4629      	mov	r1, r5
 8006c14:	f7f9 fcf0 	bl	80005f8 <__aeabi_dmul>
 8006c18:	4b3e      	ldr	r3, [pc, #248]	; (8006d14 <atan+0x324>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f7f9 fb36 	bl	800028c <__adddf3>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4630      	mov	r0, r6
 8006c26:	4639      	mov	r1, r7
 8006c28:	f7f9 fe10 	bl	800084c <__aeabi_ddiv>
 8006c2c:	f04f 0a02 	mov.w	sl, #2
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	e743      	b.n	8006abe <atan+0xce>
 8006c36:	462b      	mov	r3, r5
 8006c38:	ee10 2a10 	vmov	r2, s0
 8006c3c:	4939      	ldr	r1, [pc, #228]	; (8006d24 <atan+0x334>)
 8006c3e:	2000      	movs	r0, #0
 8006c40:	f7f9 fe04 	bl	800084c <__aeabi_ddiv>
 8006c44:	f04f 0a03 	mov.w	sl, #3
 8006c48:	4604      	mov	r4, r0
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	e737      	b.n	8006abe <atan+0xce>
 8006c4e:	4b36      	ldr	r3, [pc, #216]	; (8006d28 <atan+0x338>)
 8006c50:	4e36      	ldr	r6, [pc, #216]	; (8006d2c <atan+0x33c>)
 8006c52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006c56:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006c5a:	e9da 2300 	ldrd	r2, r3, [sl]
 8006c5e:	f7f9 fb13 	bl	8000288 <__aeabi_dsub>
 8006c62:	4622      	mov	r2, r4
 8006c64:	462b      	mov	r3, r5
 8006c66:	f7f9 fb0f 	bl	8000288 <__aeabi_dsub>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006c72:	f7f9 fb09 	bl	8000288 <__aeabi_dsub>
 8006c76:	f1bb 0f00 	cmp.w	fp, #0
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	460d      	mov	r5, r1
 8006c7e:	f6bf aed6 	bge.w	8006a2e <atan+0x3e>
 8006c82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c86:	461d      	mov	r5, r3
 8006c88:	e6d1      	b.n	8006a2e <atan+0x3e>
 8006c8a:	a51d      	add	r5, pc, #116	; (adr r5, 8006d00 <atan+0x310>)
 8006c8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c90:	e6cd      	b.n	8006a2e <atan+0x3e>
 8006c92:	bf00      	nop
 8006c94:	f3af 8000 	nop.w
 8006c98:	54442d18 	.word	0x54442d18
 8006c9c:	bff921fb 	.word	0xbff921fb
 8006ca0:	8800759c 	.word	0x8800759c
 8006ca4:	7e37e43c 	.word	0x7e37e43c
 8006ca8:	e322da11 	.word	0xe322da11
 8006cac:	3f90ad3a 	.word	0x3f90ad3a
 8006cb0:	24760deb 	.word	0x24760deb
 8006cb4:	3fa97b4b 	.word	0x3fa97b4b
 8006cb8:	a0d03d51 	.word	0xa0d03d51
 8006cbc:	3fb10d66 	.word	0x3fb10d66
 8006cc0:	c54c206e 	.word	0xc54c206e
 8006cc4:	3fb745cd 	.word	0x3fb745cd
 8006cc8:	920083ff 	.word	0x920083ff
 8006ccc:	3fc24924 	.word	0x3fc24924
 8006cd0:	5555550d 	.word	0x5555550d
 8006cd4:	3fd55555 	.word	0x3fd55555
 8006cd8:	2c6a6c2f 	.word	0x2c6a6c2f
 8006cdc:	bfa2b444 	.word	0xbfa2b444
 8006ce0:	52defd9a 	.word	0x52defd9a
 8006ce4:	3fadde2d 	.word	0x3fadde2d
 8006ce8:	af749a6d 	.word	0xaf749a6d
 8006cec:	3fb3b0f2 	.word	0x3fb3b0f2
 8006cf0:	fe231671 	.word	0xfe231671
 8006cf4:	3fbc71c6 	.word	0x3fbc71c6
 8006cf8:	9998ebc4 	.word	0x9998ebc4
 8006cfc:	3fc99999 	.word	0x3fc99999
 8006d00:	54442d18 	.word	0x54442d18
 8006d04:	3ff921fb 	.word	0x3ff921fb
 8006d08:	440fffff 	.word	0x440fffff
 8006d0c:	7ff00000 	.word	0x7ff00000
 8006d10:	3fdbffff 	.word	0x3fdbffff
 8006d14:	3ff00000 	.word	0x3ff00000
 8006d18:	3ff2ffff 	.word	0x3ff2ffff
 8006d1c:	40038000 	.word	0x40038000
 8006d20:	3ff80000 	.word	0x3ff80000
 8006d24:	bff00000 	.word	0xbff00000
 8006d28:	080075a0 	.word	0x080075a0
 8006d2c:	08007580 	.word	0x08007580

08006d30 <fabs>:
 8006d30:	ec51 0b10 	vmov	r0, r1, d0
 8006d34:	ee10 2a10 	vmov	r2, s0
 8006d38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d3c:	ec43 2b10 	vmov	d0, r2, r3
 8006d40:	4770      	bx	lr

08006d42 <finite>:
 8006d42:	b082      	sub	sp, #8
 8006d44:	ed8d 0b00 	vstr	d0, [sp]
 8006d48:	9801      	ldr	r0, [sp, #4]
 8006d4a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006d4e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006d52:	0fc0      	lsrs	r0, r0, #31
 8006d54:	b002      	add	sp, #8
 8006d56:	4770      	bx	lr

08006d58 <nan>:
 8006d58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006d60 <nan+0x8>
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	00000000 	.word	0x00000000
 8006d64:	7ff80000 	.word	0x7ff80000

08006d68 <rint>:
 8006d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6a:	ec51 0b10 	vmov	r0, r1, d0
 8006d6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006d72:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006d76:	2e13      	cmp	r6, #19
 8006d78:	ee10 4a10 	vmov	r4, s0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006d82:	dc58      	bgt.n	8006e36 <rint+0xce>
 8006d84:	2e00      	cmp	r6, #0
 8006d86:	da2b      	bge.n	8006de0 <rint+0x78>
 8006d88:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006d8c:	4302      	orrs	r2, r0
 8006d8e:	d023      	beq.n	8006dd8 <rint+0x70>
 8006d90:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006d94:	4302      	orrs	r2, r0
 8006d96:	4254      	negs	r4, r2
 8006d98:	4314      	orrs	r4, r2
 8006d9a:	0c4b      	lsrs	r3, r1, #17
 8006d9c:	0b24      	lsrs	r4, r4, #12
 8006d9e:	045b      	lsls	r3, r3, #17
 8006da0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006da4:	ea44 0103 	orr.w	r1, r4, r3
 8006da8:	4b32      	ldr	r3, [pc, #200]	; (8006e74 <rint+0x10c>)
 8006daa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006dae:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4630      	mov	r0, r6
 8006db8:	4639      	mov	r1, r7
 8006dba:	f7f9 fa67 	bl	800028c <__adddf3>
 8006dbe:	e9cd 0100 	strd	r0, r1, [sp]
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dc8:	4632      	mov	r2, r6
 8006dca:	f7f9 fa5d 	bl	8000288 <__aeabi_dsub>
 8006dce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006dd2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	ec41 0b10 	vmov	d0, r0, r1
 8006ddc:	b003      	add	sp, #12
 8006dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de0:	4a25      	ldr	r2, [pc, #148]	; (8006e78 <rint+0x110>)
 8006de2:	4132      	asrs	r2, r6
 8006de4:	ea01 0702 	and.w	r7, r1, r2
 8006de8:	4307      	orrs	r7, r0
 8006dea:	d0f5      	beq.n	8006dd8 <rint+0x70>
 8006dec:	0851      	lsrs	r1, r2, #1
 8006dee:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8006df2:	4314      	orrs	r4, r2
 8006df4:	d00c      	beq.n	8006e10 <rint+0xa8>
 8006df6:	ea23 0201 	bic.w	r2, r3, r1
 8006dfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006dfe:	2e13      	cmp	r6, #19
 8006e00:	fa43 f606 	asr.w	r6, r3, r6
 8006e04:	bf0c      	ite	eq
 8006e06:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006e0a:	2400      	movne	r4, #0
 8006e0c:	ea42 0306 	orr.w	r3, r2, r6
 8006e10:	4918      	ldr	r1, [pc, #96]	; (8006e74 <rint+0x10c>)
 8006e12:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006e16:	4622      	mov	r2, r4
 8006e18:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fa34 	bl	800028c <__adddf3>
 8006e24:	e9cd 0100 	strd	r0, r1, [sp]
 8006e28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e2c:	4622      	mov	r2, r4
 8006e2e:	462b      	mov	r3, r5
 8006e30:	f7f9 fa2a 	bl	8000288 <__aeabi_dsub>
 8006e34:	e7d0      	b.n	8006dd8 <rint+0x70>
 8006e36:	2e33      	cmp	r6, #51	; 0x33
 8006e38:	dd07      	ble.n	8006e4a <rint+0xe2>
 8006e3a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006e3e:	d1cb      	bne.n	8006dd8 <rint+0x70>
 8006e40:	ee10 2a10 	vmov	r2, s0
 8006e44:	f7f9 fa22 	bl	800028c <__adddf3>
 8006e48:	e7c6      	b.n	8006dd8 <rint+0x70>
 8006e4a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006e4e:	f04f 36ff 	mov.w	r6, #4294967295
 8006e52:	40d6      	lsrs	r6, r2
 8006e54:	4230      	tst	r0, r6
 8006e56:	d0bf      	beq.n	8006dd8 <rint+0x70>
 8006e58:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8006e5c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006e60:	bf1f      	itttt	ne
 8006e62:	ea24 0101 	bicne.w	r1, r4, r1
 8006e66:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006e6a:	fa44 f202 	asrne.w	r2, r4, r2
 8006e6e:	ea41 0402 	orrne.w	r4, r1, r2
 8006e72:	e7cd      	b.n	8006e10 <rint+0xa8>
 8006e74:	080075c0 	.word	0x080075c0
 8006e78:	000fffff 	.word	0x000fffff
 8006e7c:	00000000 	.word	0x00000000

08006e80 <scalbn>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	ec55 4b10 	vmov	r4, r5, d0
 8006e86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	b99a      	cbnz	r2, 8006eb8 <scalbn+0x38>
 8006e90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006e94:	4323      	orrs	r3, r4
 8006e96:	d036      	beq.n	8006f06 <scalbn+0x86>
 8006e98:	4b39      	ldr	r3, [pc, #228]	; (8006f80 <scalbn+0x100>)
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	ee10 0a10 	vmov	r0, s0
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f7f9 fba9 	bl	80005f8 <__aeabi_dmul>
 8006ea6:	4b37      	ldr	r3, [pc, #220]	; (8006f84 <scalbn+0x104>)
 8006ea8:	429e      	cmp	r6, r3
 8006eaa:	4604      	mov	r4, r0
 8006eac:	460d      	mov	r5, r1
 8006eae:	da10      	bge.n	8006ed2 <scalbn+0x52>
 8006eb0:	a32b      	add	r3, pc, #172	; (adr r3, 8006f60 <scalbn+0xe0>)
 8006eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb6:	e03a      	b.n	8006f2e <scalbn+0xae>
 8006eb8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006ebc:	428a      	cmp	r2, r1
 8006ebe:	d10c      	bne.n	8006eda <scalbn+0x5a>
 8006ec0:	ee10 2a10 	vmov	r2, s0
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	f7f9 f9e0 	bl	800028c <__adddf3>
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	e019      	b.n	8006f06 <scalbn+0x86>
 8006ed2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	3a36      	subs	r2, #54	; 0x36
 8006eda:	4432      	add	r2, r6
 8006edc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ee0:	428a      	cmp	r2, r1
 8006ee2:	dd08      	ble.n	8006ef6 <scalbn+0x76>
 8006ee4:	2d00      	cmp	r5, #0
 8006ee6:	a120      	add	r1, pc, #128	; (adr r1, 8006f68 <scalbn+0xe8>)
 8006ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006eec:	da1c      	bge.n	8006f28 <scalbn+0xa8>
 8006eee:	a120      	add	r1, pc, #128	; (adr r1, 8006f70 <scalbn+0xf0>)
 8006ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ef4:	e018      	b.n	8006f28 <scalbn+0xa8>
 8006ef6:	2a00      	cmp	r2, #0
 8006ef8:	dd08      	ble.n	8006f0c <scalbn+0x8c>
 8006efa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006efe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006f06:	ec45 4b10 	vmov	d0, r4, r5
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006f10:	da19      	bge.n	8006f46 <scalbn+0xc6>
 8006f12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006f16:	429e      	cmp	r6, r3
 8006f18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006f1c:	dd0a      	ble.n	8006f34 <scalbn+0xb4>
 8006f1e:	a112      	add	r1, pc, #72	; (adr r1, 8006f68 <scalbn+0xe8>)
 8006f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e2      	bne.n	8006eee <scalbn+0x6e>
 8006f28:	a30f      	add	r3, pc, #60	; (adr r3, 8006f68 <scalbn+0xe8>)
 8006f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2e:	f7f9 fb63 	bl	80005f8 <__aeabi_dmul>
 8006f32:	e7cb      	b.n	8006ecc <scalbn+0x4c>
 8006f34:	a10a      	add	r1, pc, #40	; (adr r1, 8006f60 <scalbn+0xe0>)
 8006f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d0b8      	beq.n	8006eb0 <scalbn+0x30>
 8006f3e:	a10e      	add	r1, pc, #56	; (adr r1, 8006f78 <scalbn+0xf8>)
 8006f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f44:	e7b4      	b.n	8006eb0 <scalbn+0x30>
 8006f46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f4a:	3236      	adds	r2, #54	; 0x36
 8006f4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006f54:	4620      	mov	r0, r4
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <scalbn+0x108>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	e7e8      	b.n	8006f2e <scalbn+0xae>
 8006f5c:	f3af 8000 	nop.w
 8006f60:	c2f8f359 	.word	0xc2f8f359
 8006f64:	01a56e1f 	.word	0x01a56e1f
 8006f68:	8800759c 	.word	0x8800759c
 8006f6c:	7e37e43c 	.word	0x7e37e43c
 8006f70:	8800759c 	.word	0x8800759c
 8006f74:	fe37e43c 	.word	0xfe37e43c
 8006f78:	c2f8f359 	.word	0xc2f8f359
 8006f7c:	81a56e1f 	.word	0x81a56e1f
 8006f80:	43500000 	.word	0x43500000
 8006f84:	ffff3cb0 	.word	0xffff3cb0
 8006f88:	3c900000 	.word	0x3c900000

08006f8c <_init>:
 8006f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8e:	bf00      	nop
 8006f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f92:	bc08      	pop	{r3}
 8006f94:	469e      	mov	lr, r3
 8006f96:	4770      	bx	lr

08006f98 <_fini>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr
